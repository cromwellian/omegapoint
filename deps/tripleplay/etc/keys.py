"""
Jython script to generate Key.java.

Regenerate with jython etc/keys.py > src/main/java/tripleplay/util/Key.java
"""
import textwrap
from java.awt.event import KeyEvent

getcode = lambda name: getattr(KeyEvent, "VK_%s" % name)

meta = set(["ALT", "BACK_SPACE", "CAPS_LOCK", "CONTROL", "DELETE", "DOWN", "END", "ENTER",
    "ESCAPE", "LEFT", "RIGHT", "SHIFT", "UP"])

punc = dict(BACK_SLASH=("\\\\", "|"), COMMA=(",", "<"), EQUALS=("=", "+"),
    MINUS=("-", "_"), PERIOD=(".", ">"), SLASH=("/", "?"), SPACE=(" ", " "))

expected = meta.union(punc.keys())

codearraylen = max(getcode(name) for name in expected) + 1

chars = []
skipped = []

for f in dir(KeyEvent):
    if not f.startswith("VK_"):
        continue
    f = f[3:] # Drop VK_
    if len(f) > 1:
        if not f in expected:
            skipped.append(f)
        else:
            expected.remove(f)
    elif f not in "1234567890":
        chars.append((f, f))

if expected:
    print "Missed expected", expected

#print skipped # Uncomment to add additional characters to meta or punc

def wrap(consts):
    return textwrap.fill(", ".join(consts), initial_indent="    ",
        subsequent_indent="    ", width=100)

chars = wrap(["%s('%s','%s',%s)" % (f[0], f[1].lower(), f[1], getcode(f[1])) for f in chars])

nums = [("ZERO", ")"), ("ONE", "!"), ("TWO", "@"), ("THREE", "#"), ("FOUR", "$"),
("FIVE", "%"), ("SIX", "^"), ("SEVEN", "&"), ("EIGHT", "*"), ("NINE", "(")]

nums = wrap(["%s('%s','%s',%s)" % (f[0], i, f[1], getcode(i)) for i, f in enumerate(nums)])

punc = wrap(sorted(["%s('%s','%s',%s)" % (f[0], f[1][0], f[1][1], getcode(f[0])) for f in punc.items()]))

meta = wrap(sorted(["%s(null,null,%s)" % (f, getcode(f)) for f in meta]))

print """//
// Triple Play - utilities for use in PlayN-based games
// Copyright (c) 2011, Three Rings Design, Inc. - All rights reserved.
// http://github.com/threerings/tripleplay/blob/master/LICENSE

package tripleplay.util;

// Generated by jython etc/keys.py > src/main/java/tripleplay/util/Key.java
public enum Key
{
    // Characters
%(chars)s,

    // Numbers
%(nums)s,

    // Punctuation
%(punc)s,

    // Meta
%(meta)s;

    public final int code;
    public final Character character;
    public final Character upper;

    private static final Key[] BY_CODE = new Key[%(codearraylen)s];
    static {
        for (Key key : Key.values()) {
            BY_CODE[key.code] = key;
        }
    }

    public static Key get (int code) {
        return code >= BY_CODE.length ? null : BY_CODE[code];
    }

    private Key (Character character, Character upper, int keyCode) {
        code = keyCode;
        this.character = character;
        this.upper = upper;
    }
}""" % globals()


