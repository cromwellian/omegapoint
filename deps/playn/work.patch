diff --git a/.gitignore b/.gitignore
index 812ceac..ed8952a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -21,16 +21,16 @@ target
 /sample/cute/android/bin
 /sample/cute/android/gen
 
+# /sample/cute/core/war/WEB-INF/
+/sample/cute/core/war/WEB-INF/lib
+/sample/cute/core/war/WEB-INF/classes
+/sample/cute/core/war/WEB-INF/deploy
+
 # /sample/cute/html/war/WEB-INF/
 /sample/cute/html/war/WEB-INF/lib
 /sample/cute/html/war/WEB-INF/classes
 /sample/cute/html/war/WEB-INF/deploy
 
-# /sample/cute/flash/war/WEB-INF/
-/sample/cute/flash/war/WEB-INF/lib
-/sample/cute/flash/war/WEB-INF/classes
-/sample/cute/flash/war/WEB-INF/deploy
-
 # /sample/cute/server/
 /sample/cute/server/bin
 
@@ -38,15 +38,10 @@ target
 /sample/hello/android/bin
 /sample/hello/android/gen
 
-# /sample/hello/html/war/WEB-INF/
-/sample/hello/html/war/WEB-INF/lib
-/sample/hello/html/war/WEB-INF/classes
-/sample/hello/html/war/WEB-INF/deploy
-
-# /sample/hello/flash/war/WEB-INF/
-/sample/hello/flash/war/WEB-INF/lib
-/sample/hello/flash/war/WEB-INF/classes
-/sample/hello/flash/war/WEB-INF/deploy
+# /sample/hello/core/war/WEB-INF/
+/sample/hello/core/war/WEB-INF/lib
+/sample/hello/core/war/WEB-INF/classes
+/sample/hello/core/war/WEB-INF/deploy
 
 # /sample/noise/noise/war/WEB-INF/
 /sample/noise/noise/war/WEB-INF/lib
diff --git a/build.xml b/build.xml
index bf1a10f..875545b 100644
--- a/build.xml
+++ b/build.xml
@@ -12,7 +12,7 @@
     <ant dir="html" target="clean"/>
     <ant dir="android" target="clean"/>
     <ant dir="server" target="clean"/>
-    <ant dir="test/benchmark" target="clean"/>
+    <ant dir="test/core" target="clean"/>
     <ant dir="test/manualtests" target="clean"/>
   </target>
 
@@ -24,7 +24,7 @@
     <ant dir="html" target="compile"/>
     <ant dir="android" target="compile"/>
     <ant dir="server" target="compile"/>
-    <ant dir="test/benchmark" target="compile"/>
+    <ant dir="test/core" target="compile"/>
     <ant dir="test/manualtests" target="compile"/>
   </target>
 
diff --git a/core/pom.xml b/core/pom.xml
index 18f116e..ed25464 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -21,7 +21,6 @@
   </repositories>
 
   <dependencies>
-
     <dependency>
       <groupId>com.samskivert</groupId>
       <artifactId>pythagoras</artifactId>
diff --git a/core/src/playn/core/CanvasLayer.java b/core/src/playn/core/CanvasLayer.java
index c439d0a..0f401a5 100644
--- a/core/src/playn/core/CanvasLayer.java
+++ b/core/src/playn/core/CanvasLayer.java
@@ -18,7 +18,7 @@ package playn.core;
 /**
  * TODO
  */
-public interface CanvasLayer extends Layer.HasSize {
+public interface CanvasLayer extends Layer, Layer.HasSize {
 
   /**
    * TODO
diff --git a/core/src/playn/core/GroupLayer.java b/core/src/playn/core/GroupLayer.java
index d1d1ef3..dfd6f40 100644
--- a/core/src/playn/core/GroupLayer.java
+++ b/core/src/playn/core/GroupLayer.java
@@ -16,15 +16,12 @@
 package playn.core;
 
 /**
- * GroupLayer creates a Layer hierarchy by maintaining an ordered group of child Layers.
+ * TODO - Need to add javadoc
  */
 public interface GroupLayer extends Layer {
 
   /**
-   * Returns the layer at the specified index.
-   * <p>
-   * Layers are ordered in terms of their depth and will be returned in this order, with 0 being the
-   * layer on bottom.
+   * Returns the layer at the specified position.
    */
   Layer get(int index);
 
diff --git a/core/src/playn/core/GroupLayerImpl.java b/core/src/playn/core/GroupLayerImpl.java
index 4669537..5f6b7a3 100644
--- a/core/src/playn/core/GroupLayerImpl.java
+++ b/core/src/playn/core/GroupLayerImpl.java
@@ -102,21 +102,15 @@ public class GroupLayerImpl<L extends AbstractLayer>
     }
   }
 
-  /**
-   * @return the new index of the depth-changed layer.
-   */
-  public int depthChanged(GroupLayer self, Layer layer, float oldDepth) {
+  public void depthChanged(GroupLayer self, Layer layer, float oldDepth) {
     // structuring things such that Java's type system knew what was going on here would require
     // making AbstractLayer and ParentLayer more complex than is worth it
     @SuppressWarnings("unchecked") L child = (L)layer;
 
     // it would be great if we could move an element from one place in an ArrayList to another
     // (portably), but instead we have to remove and re-add
-    int oldIndex = findChild(child, oldDepth);
-    children.remove(oldIndex);
-    int newIndex = findInsertion(child.depth());
-    children.add(newIndex, child);
-    return newIndex;
+    children.remove(findChild(child, oldDepth));
+    children.add(findInsertion(child.depth()), child);
   }
 
   private void remove(int index) {
diff --git a/core/src/playn/core/ImageLayer.java b/core/src/playn/core/ImageLayer.java
index 524591d..4e6af16 100644
--- a/core/src/playn/core/ImageLayer.java
+++ b/core/src/playn/core/ImageLayer.java
@@ -18,7 +18,7 @@ package playn.core;
 /**
  * TODO
  */
-public interface ImageLayer extends Layer.HasSize {
+public interface ImageLayer extends Layer, Layer.HasSize {
 
   /**
    * TODO
diff --git a/core/src/playn/core/Layer.java b/core/src/playn/core/Layer.java
index 454a4ff..58b5938 100644
--- a/core/src/playn/core/Layer.java
+++ b/core/src/playn/core/Layer.java
@@ -15,8 +15,6 @@
  */
 package playn.core;
 
-import pythagoras.f.IPoint;
-import pythagoras.f.Point;
 import pythagoras.f.Transform;
 
 /**
@@ -175,7 +173,7 @@ public interface Layer {
   /**
    * Interface for {@link Layer}s containing explicit sizes.
    */
-  public interface HasSize extends Layer {
+  public interface HasSize {
     /**
      * Return the width of the layer.
      */
@@ -196,105 +194,4 @@ public interface Layer {
      */
     public float scaledHeight();
   }
-
-  /**
-   * Utility class for transforming coordinates between {@link Layer}s.
-   */
-  public static class Util {
-    /**
-     * Converts the supplied point from coordinates relative to the specified
-     * layer to screen coordinates. The results are stored into {@code into},
-     * which is returned for convenience.
-     */
-    public static Point layerToScreen(Layer layer, IPoint point, Point into) {
-      return layerToParent(layer, null, point, into);
-    }
-
-    /**
-     * Converts the supplied point from coordinates relative to the specified
-     * layer to screen coordinates.
-     */
-    public static Point layerToScreen(Layer layer, float x, float y) {
-      Point into = new Point(x, y);
-      return layerToScreen(layer, into, into);
-    }
-
-    /**
-     * Converts the supplied point from coordinates relative to the specified
-     * child layer to coordinates relative to the specified parent layer. The
-     * results are stored into {@code into}, which is returned for convenience.
-     */
-    public static Point layerToParent(Layer layer, Layer parent, IPoint point, Point into) {
-      into.set(point);
-      while (layer != parent) {
-        if (layer == null) {
-          throw new IllegalArgumentException(
-              "Failed to find parent, perhaps you passed parent, layer instead of "
-                  + "layer, parent?");
-        }
-        into.x -= layer.originX();
-        into.y -= layer.originY();
-        layer.transform().transform(into, into);
-        layer = layer.parent();
-      }
-      return into;
-    }
-
-    /**
-     * Converts the supplied point from coordinates relative to the specified
-     * child layer to coordinates relative to the specified parent layer.
-     */
-    public static Point layerToParent(Layer layer, Layer parent, float x, float y) {
-      Point into = new Point(x, y);
-      return layerToParent(layer, parent, into.set(x, y), into);
-    }
-
-    /**
-     * Converts the supplied point from screen coordinates to coordinates
-     * relative to the specified layer. The results are stored into {@code into}
-     * , which is returned for convenience.
-     */
-    public static Point screenToLayer(Layer layer, IPoint point, Point into) {
-      Layer parent = layer.parent();
-      IPoint cur = (parent == null) ? point : screenToLayer(parent, point, into);
-      into = layer.transform().inverseTransform(cur, into);
-      into.x += layer.originX();
-      into.y += layer.originY();
-      return into;
-    }
-
-    /**
-     * Converts the supplied point from screen coordinates to coordinates
-     * relative to the specified layer.
-     */
-    public static Point screenToLayer(Layer layer, float x, float y) {
-      Point into = new Point(x, y);
-      return screenToLayer(layer, into.set(x, y), into);
-    }
-
-    /**
-     * Returns true if a {@link IPoint} on the screen touches a {@link Layer.HasSize}.
-     */
-    public static boolean hitTest(Layer.HasSize layer, IPoint point) {
-      return hitTest(layer, point.x(), point.y());
-    }
-
-    /**
-     * Returns true if a {@link Events.Position} touches a {@link Layer.HasSize}.
-     */
-    public static boolean hitTest(Layer.HasSize layer, Events.Position position) {
-      return hitTest(layer, position.x(), position.y());
-    }
-
-    /**
-     * Returns true if a coordinate on the screen touches a {@link Layer.HasSize}.
-     */
-    public static boolean hitTest(Layer.HasSize layer, float x, float y) {
-      Point point = new Point(x, y);
-      screenToLayer(layer, point, point);
-      return (
-          point.x() >= 0 &&  point.y() >= 0 && 
-          point.x() <= layer.width() && point.y() <= layer.height());
-    }
-  }
 }
diff --git a/core/src/playn/core/SurfaceLayer.java b/core/src/playn/core/SurfaceLayer.java
index 3354755..db75929 100644
--- a/core/src/playn/core/SurfaceLayer.java
+++ b/core/src/playn/core/SurfaceLayer.java
@@ -18,7 +18,7 @@ package playn.core;
 /**
  * TODO
  */
-public interface SurfaceLayer extends Layer.HasSize {
+public interface SurfaceLayer extends Layer, Layer.HasSize {
 
   /**
    * TODO
diff --git a/core/tests/playn/core/LayerUtilTest.java b/core/tests/playn/core/LayerUtilTest.java
deleted file mode 100644
index 6f96f49..0000000
--- a/core/tests/playn/core/LayerUtilTest.java
+++ /dev/null
@@ -1,132 +0,0 @@
-package playn.core;
-
-import org.junit.Test;
-
-import pythagoras.f.Point;
-import static org.junit.Assert.*;
-
-/**
- * Tests the Layer.Util class.
- */
-public class LayerUtilTest {
-  static float tol = 0.001f; // tolerance for floating point equality checks
-
-  @Test public void testTransformWithScale() {
-    TestGroupLayer root = new TestGroupLayer();
-    TestGroupLayer middle = new TestGroupLayer();
-    TestLayer child = new TestLayer();
-    root.add(middle);
-    middle.add(child);
-
-    middle.setScale(2f, 0.1f);
-    Point point = new Point(100f, 100f);
-
-    Point pointOnChild = new Point(0f, 0f);
-    Layer.Util.screenToLayer(child, point, pointOnChild);
-    assertEquals(point.x() * 0.5, pointOnChild.x(), tol);
-    assertEquals(point.y() * 10, pointOnChild.y(), tol);
-
-    Point pointOnParent = new Point(0f, 0f);
-    Layer.Util.layerToScreen(child, pointOnChild, pointOnParent);
-    assertEquals(point.x(), pointOnParent.x(), tol);
-    assertEquals(point.y(), pointOnParent.y(), tol);
-
-    root.clear();
-  }
-
-  @Test public void testTransformWithTrans() {
-    TestGroupLayer root = new TestGroupLayer();
-    TestGroupLayer middle = new TestGroupLayer();
-    TestLayer child = new TestLayer();
-    root.add(middle);
-    middle.add(child);
-
-    middle.setTranslation(10, -10);
-    Point point = new Point(100f, 100f);
-
-    Point pointOnChild = new Point(0f, 0f);
-    Layer.Util.screenToLayer(child, point, pointOnChild);
-    assertEquals(point.x() - 10, pointOnChild.x(), tol);
-    assertEquals(point.y() + 10, pointOnChild.y(), tol);
-
-    Point pointOnParent = new Point(0f, 0f);
-    Layer.Util.layerToScreen(child, pointOnChild, pointOnParent);
-    assertEquals(point.x(), pointOnParent.x(), tol);
-    assertEquals(point.y(), pointOnParent.y(), tol);
-
-    root.clear();
-  }
-
-  @Test public void testTransformWithRot() {
-    TestGroupLayer root = new TestGroupLayer();
-    TestGroupLayer middle = new TestGroupLayer();
-    TestLayer child = new TestLayer();
-    root.add(middle);
-    middle.add(child);
-
-    middle.setRotation((float)(Math.PI / 4.0));
-    Point point = new Point(100f, 100f);
-
-    Point pointOnChild = new Point(0f, 0f);
-    Layer.Util.screenToLayer(child, point, pointOnChild);
-    assertEquals(141.421356, pointOnChild.x(), tol);
-    assertEquals(0, pointOnChild.y(), tol);
-
-    Point pointOnParent = new Point(0f, 0f);
-    Layer.Util.layerToScreen(child, pointOnChild, pointOnParent);
-    assertEquals(point.x(), pointOnParent.x(), tol);
-    assertEquals(point.y(), pointOnParent.y(), tol);
-
-    root.clear();
-  }
-
-  @Test public void testTransformWithScaleRotTrans() {
-    TestGroupLayer root = new TestGroupLayer();
-    TestGroupLayer middle = new TestGroupLayer();
-    TestLayer child = new TestLayer();
-    root.add(middle);
-    middle.add(child);
-
-    middle.setRotation((float)(Math.PI / 4.0));
-    middle.setTranslation(10, -10);
-    middle.setScale(10f, 0.5f);
-    Point point = new Point(100f, 100f);
-
-    Point pointOnChild = new Point(0f, 0f);
-    Layer.Util.screenToLayer(child, point, pointOnChild);
-    Point pointOnParent = new Point(0f, 0f);
-    Layer.Util.layerToScreen(child, pointOnChild, pointOnParent);
-    assertEquals(point.x(), pointOnParent.x(), tol);
-    assertEquals(point.y(), pointOnParent.y(), tol);
-
-    root.clear();
-  }
-
-  protected static class TestLayer extends AbstractLayer {
-  }
-
-  protected static class TestGroupLayer extends AbstractLayer implements GroupLayer {
-    public final GroupLayerImpl<AbstractLayer> impl = new GroupLayerImpl<AbstractLayer>();
-    public Layer get(int index) {
-      return impl.children.get(index);
-    }
-    public void add(Layer layer) {
-      impl.add(this, (AbstractLayer)layer);
-    }
-    @Deprecated public void add(int index, Layer layer) {
-      impl.add(this, index, (AbstractLayer)layer);
-    }
-    public void remove(Layer layer) {
-      impl.remove(this, (AbstractLayer)layer);
-    }
-    @Deprecated public void remove(int index) {
-      impl.remove(this, index);
-    }
-    public void clear() {
-      impl.clear(this);
-    }
-    public int size() {
-      return impl.children.size();
-    }
-  }
-}
\ No newline at end of file
diff --git a/eclipse_format.xml b/eclipse_format.xml
index 59b2185..ce3d0a4 100644
--- a/eclipse_format.xml
+++ b/eclipse_format.xml
@@ -195,7 +195,7 @@
 <setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement" value="do not insert"/>
 <setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant" value="16"/>
 <setting id="org.eclipse.jdt.core.formatter.comment.format_javadoc_comments" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.line_length" value="100"/>
+<setting id="org.eclipse.jdt.core.formatter.comment.line_length" value="80"/>
 <setting id="org.eclipse.jdt.core.formatter.blank_lines_between_import_groups" value="1"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments" value="do not insert"/>
 <setting id="org.eclipse.jdt.core.formatter.insert_space_before_semicolon" value="do not insert"/>
diff --git a/flash/playn-flash.iml b/flash/playn-flash.iml
deleted file mode 100644
index ec8853e..0000000
--- a/flash/playn-flash.iml
+++ /dev/null
@@ -1,37 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="gwt" name="GWT">
-      <configuration>
-        <setting name="gwtSdkUrl" value="file://$MAVEN_REPOSITORY$/com/google/gwt/gwt-dev/2.3.0/" />
-        <setting name="gwtSdkType" value="maven" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_6" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/target/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/annotations" isTestSource="false" />
-      <excludeFolder url="file://$MODULE_DIR$/target/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/target/maven-archiver" />
-      <excludeFolder url="file://$MODULE_DIR$/target/surefire" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="playn-core" />
-    <orderEntry type="library" name="Maven: com.samskivert:pythagoras:1.1-SNAPSHOT" level="project" />
-    <orderEntry type="module" module-name="playn-html" />
-    <orderEntry type="module" module-name="playn-webgl" />
-    <orderEntry type="library" name="Maven: com.google.gwt:gwt-user:2.3.0" level="project" />
-    <orderEntry type="library" scope="RUNTIME" name="Maven: com.google.gwt:gwt-servlet:2.3.0" level="project" />
-    <orderEntry type="library" name="Maven: allen_sauer:gwt-voices:2.1.2" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: com.google.gwt:gwt-dev:2.3.0" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: javax.validation:validation-api:1.0.0.GA" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: javax.validation:validation-api:sources:1.0.0.GA" level="project" />
-    <orderEntry type="library" name="Maven: com.google.gwt:gwt-flash:1.0" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.8.1" level="project" />
-  </component>
-</module>
-
diff --git a/flash/src/flash/display/BitmapData.java b/flash/src/flash/display/BitmapData.java
index d8b0129..92e0f02 100755
--- a/flash/src/flash/display/BitmapData.java
+++ b/flash/src/flash/display/BitmapData.java
@@ -21,8 +21,6 @@ package flash.display;
 
 import com.google.gwt.core.client.JavaScriptObject;
 
-import flash.geom.Point;
-import flash.geom.Rectangle;
 import flash.gwt.FlashImport;
 
 
@@ -97,8 +95,5 @@ final public class BitmapData extends JavaScriptObject {
           transparent, fillColor);
     }-*/;
 
-  public static native BitmapData applyFilter(BitmapData bitmapData, Rectangle sourceRect, Point dest, Object filter) /*-{
-    return this.applyFilter(bitmapData, sourceRect, dest, filter);
-  }-*/;
 }
 
diff --git a/flash/src/flash/display/Graphics.java b/flash/src/flash/display/Graphics.java
index c5ae1d1..4f410d2 100755
--- a/flash/src/flash/display/Graphics.java
+++ b/flash/src/flash/display/Graphics.java
@@ -20,16 +20,4 @@ import com.google.gwt.core.client.JavaScriptObject;
 
 final public class Graphics extends JavaScriptObject {
   protected Graphics() {}
-
-  public native void beginFill(int i) /*-{
-    this.beginFill(i);
-  }-*/;
-
-  public native void drawRect(float sx, float sy, float sw, float sh) /*-{
-    this.drawRect(sx, sy, sw, sh);    
-  }-*/;
-
-  public native void endFill() /*-{
-    this.endFill();
-  }-*/;
 }
diff --git a/flash/src/flash/display/InteractiveObject.java b/flash/src/flash/display/InteractiveObject.java
index c599604..21d64cc 100755
--- a/flash/src/flash/display/InteractiveObject.java
+++ b/flash/src/flash/display/InteractiveObject.java
@@ -74,6 +74,7 @@ public class InteractiveObject extends DisplayObject {
     this.tabEnabled = enabled;
   }-*/;
 
+
   final public native void setTabIndex(int tabIndex) /*-{
     this.tabIndex = tabIndex;
   }-*/;
@@ -83,11 +84,10 @@ public class InteractiveObject extends DisplayObject {
    *   user's pointing device over the same InteractiveObject. 
    */
   final static public EventType CLICK = make("click");
-  
   /**
-   * Dispatched when a user presses and releases the main button of a pointing
-   * device twice in rapid succession over the same InteractiveObject when that
-   * object's doubleClickEnabled flag is set to true. 
+  Dispatched when a user presses and releases the main button of a pointing
+   device twice in rapid succession over the same InteractiveObject when that
+    object's doubleClickEnabled flag is set to true. 
    */
   final static public EventType DOUBLECLICK = make("doubleClick");
   /**
@@ -156,6 +156,7 @@ public class InteractiveObject extends DisplayObject {
    */
   final static public EventType TABCHILDRENCHANGE = make("tabChildrenChange");
 
+
   /**
    * Dispatched when the object's tabEnabled flag changes.  
    */
diff --git a/flash/src/flash/geom/Point.java b/flash/src/flash/geom/Point.java
index 64c7e87..fdb7ae0 100755
--- a/flash/src/flash/geom/Point.java
+++ b/flash/src/flash/geom/Point.java
@@ -18,14 +18,7 @@ package flash.geom;
 
 import com.google.gwt.core.client.JavaScriptObject;
 
-import flash.gwt.FlashImport;
-import playn.flash.FlashImageLayer;
-
-@FlashImport({"flash.geom.Rectangle"})
 public class Point extends JavaScriptObject {
   protected Point() {}
-
-  public static native Point create(int x, int y) /*-{
-    return new flash.geom.Point(x, y);
-  }-*/;
+  
 }
diff --git a/flash/src/flash/geom/Rectangle.java b/flash/src/flash/geom/Rectangle.java
index 21cc065..678b765 100755
--- a/flash/src/flash/geom/Rectangle.java
+++ b/flash/src/flash/geom/Rectangle.java
@@ -18,13 +18,6 @@ package flash.geom;
 
 import com.google.gwt.core.client.JavaScriptObject;
 
-import flash.gwt.FlashImport;
-
-@FlashImport({"flash.geom.Rectangle"})
-final public class Rectangle extends JavaScriptObject {
+public class Rectangle extends JavaScriptObject {
   protected Rectangle() {}
-
-  public static native Rectangle create(float sx, float sy, float sw, float sh) /*-{
-    return new flash.geom.Rectangle(sx, sy, sw, sh);
-  }-*/;
 }
diff --git a/flash/src/playn/PlayNFlash.gwt.xml b/flash/src/playn/PlayNFlash.gwt.xml
deleted file mode 100755
index c3d28af..0000000
--- a/flash/src/playn/PlayNFlash.gwt.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
- * Copyright 2010 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License. 
--->
-<!DOCTYPE module PUBLIC "-//Google Inc.//DTD Google Web Toolkit trunk//EN" "http://google-web-toolkit.googlecode.com/svn/trunk/distro-source/core/src/gwt-module.dtd">
-<module>
-  <inherits name='playn.PlayN'/>
-  <inherits name='com.google.gwt.jas.Jas' /> 
-  <source path='flash'/>
-  <public path='flash/as'/>
-</module>
diff --git a/flash/src/playn/flash/FlashImageLayer.java b/flash/src/playn/flash/FlashImageLayer.java
index 7a89f6f..a273d43 100755
--- a/flash/src/playn/flash/FlashImageLayer.java
+++ b/flash/src/playn/flash/FlashImageLayer.java
@@ -16,9 +16,6 @@
 
 package playn.flash;
 
-import flash.display.BitmapData;
-import flash.geom.Point;
-import flash.geom.Rectangle;
 import playn.core.Asserts;
 
 import flash.display.Bitmap;
@@ -35,47 +32,26 @@ public class FlashImageLayer extends FlashLayer implements ImageLayer {
   
   private final Image image;
 
-  private BitmapData bitmapData;
-
-  private Rectangle sourceRect;
-
   /**
    * @param image
    */
   public FlashImageLayer(Image image) {
-    super((Sprite) (Bitmap.create()));
+    super((Sprite) (Bitmap.create(((FlashImage) image).bitmapData()).cast()));
     this.image = image;
-    setBitmapData(((FlashImage) image));
-    
     image.addCallback(new ResourceCallback<Image>() {
-
+      
       @Override
       public void error(Throwable err) {
-        PlayN.log().error(err.toString());
+       PlayN.log().error(err.toString());
       }
-
+    
       @Override
       public void done(Image resource) {
-        setBitmapData((FlashImage) resource);
+        ((Bitmap) display().cast()).setBitmapData(((FlashImage) resource).bitmapData());
       }
     });
   }
 
-  private void setBitmapData(FlashImage resource) {
-    bitmapData = resource.bitmapData();
-    applySourceRect();
-  }
-
-  private void applySourceRect() {
-    BitmapData clippedSource;
-    if (sourceRect == null) {
-      clippedSource = bitmapData;
-    } else {
-      clippedSource = bitmapData.applyFilter(bitmapData, sourceRect, Point.create(0,0), null);
-    }
-    ((Bitmap) display()).setBitmapData(clippedSource);
-  }
-
   /**
    * 
    */
@@ -98,8 +74,8 @@ public class FlashImageLayer extends FlashLayer implements ImageLayer {
    */
   @Override
   public void clearSourceRect() {
-    sourceRect = null;
-    applySourceRect();
+    // TODO Auto-generated method stub
+
   }
 
   /* (non-Javadoc)
@@ -134,7 +110,9 @@ public class FlashImageLayer extends FlashLayer implements ImageLayer {
    */
   @Override
   public void setImage(Image image) {
-    setBitmapData((FlashImage) image);
+    ((Bitmap) display().cast()).setBitmapData(((FlashImage) image).bitmapData());
+
+
   }
 
   /* (non-Javadoc)
@@ -160,8 +138,8 @@ public class FlashImageLayer extends FlashLayer implements ImageLayer {
    */
   @Override
   public void setSourceRect(float sx, float sy, float sw, float sh) {
-    sourceRect = Rectangle.create(sx, sy, sw, sh);
-    applySourceRect();
+    // TODO Auto-generated method stub
+
   }
 
   /* (non-Javadoc)
diff --git a/flash/src/playn/flash/FlashLayer.java b/flash/src/playn/flash/FlashLayer.java
index 26c5d5b..6511ca0 100755
--- a/flash/src/playn/flash/FlashLayer.java
+++ b/flash/src/playn/flash/FlashLayer.java
@@ -17,7 +17,6 @@
 package playn.flash;
 
 import flash.display.DisplayObject;
-import flash.display.InteractiveObject;
 import flash.gwt.FlashImport;
 
 import playn.core.AbstractLayer;
@@ -34,7 +33,6 @@ public class FlashLayer extends AbstractLayer {
    */
   public FlashLayer(DisplayObject displayObject) {
     this.displayObject = displayObject;
-//    ((InteractiveObject) displayObject).setMouseEnabled(false);
   }
 
   @Override
diff --git a/flash/src/playn/flash/FlashPlatform.java b/flash/src/playn/flash/FlashPlatform.java
index 6392a71..104a0d5 100644
--- a/flash/src/playn/flash/FlashPlatform.java
+++ b/flash/src/playn/flash/FlashPlatform.java
@@ -222,7 +222,7 @@ public class FlashPlatform implements Platform {
         if (frameCounter == FPS_COUNTER_MAX) {
           double frameRate = frameCounter / 
             ((time() - frameCounterStart) / 1000.0);
-          PlayN.log().info("XFPS: " + frameRate);
+          PlayN.log().info("FPS: " + frameRate);
           frameCounter = 0;
         }
       }
@@ -261,7 +261,7 @@ public class FlashPlatform implements Platform {
   }-*/;
 
   public static native void captureEvent(EventType eventType, EventHandler<?> eventHandler) /*-{
-    $root.stage.addEventListener(eventType, function(arg) {
+    $root.addEventListener(eventType, function(arg) {
       eventHandler.@playn.flash.EventHandler::handleEvent(Lflash/events/Event;)(arg);
     });
   }-*/;
diff --git a/flash/src/playn/flash/FlashPointer.java b/flash/src/playn/flash/FlashPointer.java
index fd5cc96..84c042e 100644
--- a/flash/src/playn/flash/FlashPointer.java
+++ b/flash/src/playn/flash/FlashPointer.java
@@ -30,7 +30,6 @@ class FlashPointer implements Pointer {
     // Mouse handlers.
     FlashPlatform.captureEvent(Sprite.MOUSEDOWN, new EventHandler<MouseEvent>() {
       public void handleEvent(MouseEvent evt) {
-        PlayN.log().info("MouseDown");
         evt.preventDefault();  
         mouseDown = true;
         if (listener != null) {
@@ -41,8 +40,6 @@ class FlashPointer implements Pointer {
     });
     FlashPlatform.captureEvent(Sprite.MOUSEUP, new EventHandler<MouseEvent>() {
       public void handleEvent(MouseEvent evt) {
-        PlayN.log().info("MouseUp");
-        
         mouseDown = false;
         if (listener != null) {
           listener.onPointerEnd(
diff --git a/gwtbox2d/playn-jbox2d.iml b/gwtbox2d/playn-jbox2d.iml
deleted file mode 100644
index 9b3aa77..0000000
--- a/gwtbox2d/playn-jbox2d.iml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="gwt" name="GWT">
-      <configuration>
-        <setting name="gwtSdkUrl" value="file://$MAVEN_REPOSITORY$/com/google/gwt/gwt-dev/2.3.0/" />
-        <setting name="gwtSdkType" value="maven" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_6" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/target/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gwtemul" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/annotations" isTestSource="false" />
-      <excludeFolder url="file://$MODULE_DIR$/target/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/target/maven-archiver" />
-      <excludeFolder url="file://$MODULE_DIR$/target/surefire" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="playn-core" />
-    <orderEntry type="library" name="Maven: com.samskivert:pythagoras:1.1-SNAPSHOT" level="project" />
-    <orderEntry type="library" name="Maven: com.google.gwt:gwt-user:2.3.0" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: com.google.gwt:gwt-dev:2.3.0" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.8.1" level="project" />
-  </component>
-</module>
-
diff --git a/html/playn-html.iml b/html/playn-html.iml
deleted file mode 100644
index 35cb00f..0000000
--- a/html/playn-html.iml
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="gwt" name="GWT">
-      <configuration>
-        <setting name="gwtSdkUrl" value="file://$MAVEN_REPOSITORY$/com/google/gwt/gwt-dev/2.3.0/" />
-        <setting name="gwtSdkType" value="maven" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_6" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/target/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/annotations" isTestSource="false" />
-      <excludeFolder url="file://$MODULE_DIR$/target/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/target/maven-archiver" />
-      <excludeFolder url="file://$MODULE_DIR$/target/surefire" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="playn-core" />
-    <orderEntry type="library" name="Maven: com.samskivert:pythagoras:1.1-SNAPSHOT" level="project" />
-    <orderEntry type="module" module-name="playn-webgl" />
-    <orderEntry type="library" name="Maven: com.google.gwt:gwt-user:2.3.0" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: com.google.gwt:gwt-dev:2.3.0" level="project" />
-    <orderEntry type="library" scope="RUNTIME" name="Maven: com.google.gwt:gwt-servlet:2.3.0" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: javax.validation:validation-api:1.0.0.GA" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: javax.validation:validation-api:sources:1.0.0.GA" level="project" />
-    <orderEntry type="library" name="Maven: allen_sauer:gwt-log:3.1.4" level="project" />
-    <orderEntry type="library" name="Maven: allen_sauer:gwt-voices:2.1.2" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.8.1" level="project" />
-  </component>
-</module>
-
diff --git a/html/src/playn/PlayNFlash.gwt.xml b/html/src/playn/PlayNFlash.gwt.xml
new file mode 100755
index 0000000..c3d28af
--- /dev/null
+++ b/html/src/playn/PlayNFlash.gwt.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ * Copyright 2010 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<!DOCTYPE module PUBLIC "-//Google Inc.//DTD Google Web Toolkit trunk//EN" "http://google-web-toolkit.googlecode.com/svn/trunk/distro-source/core/src/gwt-module.dtd">
+<module>
+  <inherits name='playn.PlayN'/>
+  <inherits name='com.google.gwt.jas.Jas' /> 
+  <source path='flash'/>
+  <public path='flash/as'/>
+</module>
diff --git a/html/src/playn/html/HtmlGroupLayerDom.java b/html/src/playn/html/HtmlGroupLayerDom.java
index aa02619..76d4517 100644
--- a/html/src/playn/html/HtmlGroupLayerDom.java
+++ b/html/src/playn/html/HtmlGroupLayerDom.java
@@ -107,15 +107,7 @@ class HtmlGroupLayerDom extends HtmlLayerDom implements GroupLayer, ParentLayer
 
   @Override
   public void depthChanged(Layer layer, float oldDepth) {
-    Asserts.checkArgument(layer instanceof HtmlLayerDom);
-    HtmlLayerDom hlayer = (HtmlLayerDom) layer;
-    int index = impl.depthChanged(this, layer, oldDepth);
-    if (index == size()) {
-      element().appendChild(hlayer.element());
-    } else {
-      Node refChild = element().getChild(index);
-      element().insertBefore(hlayer.element(), refChild);
-    }
+    impl.depthChanged(this, layer, oldDepth);
   }
 
   void update() {
diff --git a/java/playn-java.iml b/java/playn-java.iml
deleted file mode 100644
index 7870104..0000000
--- a/java/playn-java.iml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="gwt" name="GWT">
-      <configuration />
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_6" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/target/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/tests" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/test-annotations" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/annotations" isTestSource="false" />
-      <excludeFolder url="file://$MODULE_DIR$/target/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/target/maven-archiver" />
-      <excludeFolder url="file://$MODULE_DIR$/target/surefire" />
-      <excludeFolder url="file://$MODULE_DIR$/target/surefire-reports" />
-      <excludeFolder url="file://$MODULE_DIR$/target/test-classes" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="playn-core" />
-    <orderEntry type="library" name="Maven: com.samskivert:pythagoras:1.1-SNAPSHOT" level="project" />
-    <orderEntry type="library" name="Maven: jlayer:jlayer:1.0.1" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.8.1" level="project" />
-  </component>
-</module>
-
diff --git a/pom.xml b/pom.xml
index a0f8ac3..7a2b515 100644
--- a/pom.xml
+++ b/pom.xml
@@ -25,7 +25,8 @@
     <module>android</module>
     <module>server</module>
     <module>sample</module>
-    <module>test</module>
+    <module>test/core</module>
+    <module>test/manualtests</module>
   </modules>
 
   <properties>
diff --git a/sample/build-common.xml b/sample/build-common.xml
index ed6d809..81f088d 100644
--- a/sample/build-common.xml
+++ b/sample/build-common.xml
@@ -30,16 +30,12 @@
   </target>
 
   <target name="-prepare-html" depends="-prepare">
-    <artifact:dependencies pathId="html-extras.classpath">
+    <artifact:dependencies pathId="html.classpath">
       <dependency groupId="com.googlecode.playn" artifactId="playn-html"
                   version="${pom.properties.coreversion}"/>
       <dependency groupId="com.google.gwt" artifactId="gwt-dev"
                   version="${pom.properties.gwtversion}"/>
     </artifact:dependencies>
-    <path id="html.classpath">
-      <path refid="classpath"/>
-      <path refid="html-extras.classpath"/>
-    </path>
   </target>
 
   <target name="-prepare-android" depends="-prepare">
@@ -83,6 +79,13 @@
   </target>
 
   <target name="compile-html" depends="-prep-webapp,-compile-html" description="Compiles HTML game.">
+    <javac srcdir="html/${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
+           debug="on" deprecation="on" source="1.6" target="1.6">
+      <classpath refid="html.classpath"/>
+      <compilerarg value="-Xlint"/>
+      <compilerarg value="-Xlint:-serial"/>
+    </javac>
+
     <java fork="true" maxmemory="1024M" failonerror="true" classname="com.google.gwt.dev.Compiler">
       <classpath>
         <pathelement location="${javax.validation:validation-api:jar}"/>
@@ -103,7 +106,7 @@
 
   <target name="run-html" depends="compile-html" description="Serves HTML game on localhost.">
     <artifact:dependencies pathId="jetty-ant.classpath">
-      <remoteRepository id="jetty-repo" url="http://oss.sonatype.org/content/groups/jetty/"/>
+      <remoteRepository url="http://oss.sonatype.org/content/groups/jetty/"/>
       <Dependency groupId="org.mortbay.jetty" artifactId="jetty-ant"
                   version="7.4.2.v20110526" scope="runtime" />
     </artifact:dependencies>
diff --git a/sample/cute/flash/war/.gitignore b/sample/cute/flash/war/.gitignore
deleted file mode 100644
index 216826a..0000000
--- a/sample/cute/flash/war/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-cutegameflash
diff --git a/sample/cute/flash/war/CuteGameFlash.html b/sample/cute/flash/war/CuteGameFlash.html
deleted file mode 100644
index e6dcf0e..0000000
--- a/sample/cute/flash/war/CuteGameFlash.html
+++ /dev/null
@@ -1,25 +0,0 @@
-<!--
- * Copyright 2010 The Glib Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License. 
--->
-<!DOCTYPE html>
-<html>
-  <head>
-    <title>Cute</title>
-  </head>
-  <body bgcolor="black">
-    <div id='flash_player'></div>
-    <script src="cutegameflash/cutegameflash.nocache.js"></script>
-  </body>
-</html>
diff --git a/sample/cute/flash/war/WEB-INF/web.xml b/sample/cute/flash/war/WEB-INF/web.xml
deleted file mode 100644
index 96a1fce..0000000
--- a/sample/cute/flash/war/WEB-INF/web.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
-  <welcome-file-list>
-    <welcome-file>CuteGameFlash.html</welcome-file>
-  </welcome-file-list>
-</web-app>
diff --git a/sample/cute/html/war/.gitignore b/sample/cute/html/war/.gitignore
index cd23e4a..6911c5d 100644
--- a/sample/cute/html/war/.gitignore
+++ b/sample/cute/html/war/.gitignore
@@ -1 +1,2 @@
 cutegame
+cutegameflash
diff --git a/sample/cute/html/war/CuteGameFlash.html b/sample/cute/html/war/CuteGameFlash.html
new file mode 100644
index 0000000..e6dcf0e
--- /dev/null
+++ b/sample/cute/html/war/CuteGameFlash.html
@@ -0,0 +1,25 @@
+<!--
+ * Copyright 2010 The Glib Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<!DOCTYPE html>
+<html>
+  <head>
+    <title>Cute</title>
+  </head>
+  <body bgcolor="black">
+    <div id='flash_player'></div>
+    <script src="cutegameflash/cutegameflash.nocache.js"></script>
+  </body>
+</html>
diff --git a/sample/hello/android/playn-hello-android.iml b/sample/hello/android/playn-hello-android.iml
deleted file mode 100644
index 26ff3b8..0000000
--- a/sample/hello/android/playn-hello-android.iml
+++ /dev/null
@@ -1,63 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/target/generated-sources/r" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/target/generated-sources/aidl" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="REGENERATE_R_JAVA" value="true" />
-        <option name="REGENERATE_JAVA_BY_AIDL" value="true" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="/target/generated-sources/combined-resources/res" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="/target/playn-hello-android.apk" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="false" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-      </configuration>
-    </facet>
-    <facet type="gwt" name="GWT">
-      <configuration />
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_6" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/target/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/r" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/annotations" isTestSource="false" />
-      <excludeFolder url="file://$MODULE_DIR$/target/android-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/target/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/target/generated-sources/combined-resources" />
-      <excludeFolder url="file://$MODULE_DIR$/target/generated-sources/extracted-dependencies" />
-      <excludeFolder url="file://$MODULE_DIR$/target/maven-archiver" />
-      <excludeFolder url="file://$MODULE_DIR$/target/surefire" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 3.0 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="playn-hello-core" />
-    <orderEntry type="module" module-name="playn-java" />
-    <orderEntry type="module" module-name="playn-core" />
-    <orderEntry type="library" name="Maven: com.samskivert:pythagoras:1.1-SNAPSHOT" level="project" />
-    <orderEntry type="library" name="Maven: jlayer:jlayer:1.0.1" level="project" />
-    <orderEntry type="module" module-name="playn-android" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: com.google.android:android:2.3.3" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: commons-logging:commons-logging:1.1.1" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: org.apache.httpcomponents:httpclient:4.0.1" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: org.apache.httpcomponents:httpcore:4.0.1" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: commons-codec:commons-codec:1.3" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: org.khronos:opengl-api:gl1.1-android-2.1_r1" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: xerces:xmlParserAPIs:2.6.2" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: xpp3:xpp3:1.1.4c" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: org.json:json:20080701" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.8.1" level="project" />
-  </component>
-</module>
-
diff --git a/sample/hello/core/playn-hello-core.iml b/sample/hello/core/playn-hello-core.iml
deleted file mode 100644
index a9f12b4..0000000
--- a/sample/hello/core/playn-hello-core.iml
+++ /dev/null
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="gwt" name="GWT">
-      <configuration />
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_6" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/target/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/annotations" isTestSource="false" />
-      <excludeFolder url="file://$MODULE_DIR$/target/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/target/maven-archiver" />
-      <excludeFolder url="file://$MODULE_DIR$/target/surefire" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="playn-java" />
-    <orderEntry type="module" module-name="playn-core" />
-    <orderEntry type="library" name="Maven: com.samskivert:pythagoras:1.1-SNAPSHOT" level="project" />
-    <orderEntry type="library" name="Maven: jlayer:jlayer:1.0.1" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.8.1" level="project" />
-  </component>
-</module>
-
diff --git a/sample/hello/flash/playn-hello-flash.iml b/sample/hello/flash/playn-hello-flash.iml
deleted file mode 100644
index b0fcc59..0000000
--- a/sample/hello/flash/playn-hello-flash.iml
+++ /dev/null
@@ -1,51 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="web" name="Web">
-      <configuration>
-        <descriptors>
-          <deploymentDescriptor name="web.xml" url="file://$MODULE_DIR$/war/WEB-INF/web.xml" />
-        </descriptors>
-        <webroots>
-          <root url="file://$MODULE_DIR$/src/main/webapp" relative="/" />
-        </webroots>
-      </configuration>
-    </facet>
-    <facet type="gwt" name="GWT">
-      <configuration>
-        <setting name="gwtSdkUrl" value="file://$MAVEN_REPOSITORY$/com/google/gwt/gwt-dev/2.3.0/" />
-        <setting name="gwtSdkType" value="maven" />
-        <setting name="webFacet" value="Web" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_6" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/war/WEB-INF/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/annotations" isTestSource="false" />
-      <excludeFolder url="file://$MODULE_DIR$/target/maven-archiver" />
-      <excludeFolder url="file://$MODULE_DIR$/target/playn-hello-flash-1.0-SNAPSHOT" />
-      <excludeFolder url="file://$MODULE_DIR$/target/surefire" />
-      <excludeFolder url="file://$MODULE_DIR$/war/WEB-INF/classes" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="playn-hello-core" />
-    <orderEntry type="module" module-name="playn-java" />
-    <orderEntry type="module" module-name="playn-core" />
-    <orderEntry type="library" name="Maven: com.samskivert:pythagoras:1.1-SNAPSHOT" level="project" />
-    <orderEntry type="library" name="Maven: jlayer:jlayer:1.0.1" level="project" />
-    <orderEntry type="module" module-name="playn-flash" />
-    <orderEntry type="module" module-name="playn-html" />
-    <orderEntry type="module" module-name="playn-webgl" />
-    <orderEntry type="library" name="Maven: com.google.gwt:gwt-user:2.3.0" level="project" />
-    <orderEntry type="library" scope="RUNTIME" name="Maven: com.google.gwt:gwt-servlet:2.3.0" level="project" />
-    <orderEntry type="library" name="Maven: allen_sauer:gwt-voices:2.1.2" level="project" />
-    <orderEntry type="library" name="Maven: com.google.gwt:gwt-flash:1.0" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: com.google.gwt:gwt-dev:2.3.0" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.8.1" level="project" />
-  </component>
-</module>
-
diff --git a/sample/hello/flash/pom.xml b/sample/hello/flash/pom.xml
index 5ec2bed..0811d82 100644
--- a/sample/hello/flash/pom.xml
+++ b/sample/hello/flash/pom.xml
@@ -14,8 +14,8 @@
   <packaging>war</packaging>
 
   <properties>
-    <gwt.module>playn.sample.hello.HelloGameFlash</gwt.module>
-    <gwt.name>helloflash</gwt.name>
+    <gwt.module>playn.sample.hello.HelloGame</gwt.module>
+    <gwt.name>hello</gwt.name>
   </properties>
 
   <dependencies>
@@ -48,7 +48,6 @@
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-source-plugin</artifactId>
       </plugin>
-
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-war-plugin</artifactId>
@@ -57,61 +56,6 @@
           <webXml>war/WEB-INF/web.xml</webXml>
         </configuration>
       </plugin>
-
-      <!-- download and unpack flex4sdk -->
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-dependency-plugin</artifactId>
-        <version>2.2</version>
-        <executions>
-          <execution>
-            <id>unpack</id>
-            <phase>validate</phase>
-            <goals>
-              <goal>unpack</goal>
-            </goals>
-            <configuration>
-              <artifactItems>
-                <artifactItem>
-                  <groupId>com.adobe.flex</groupId>
-                  <artifactId>flex-sdk</artifactId>
-                  <version>4.1.0.16076_mpl</version>
-                  <type>zip</type>
-                  <overWrite>false</overWrite>
-                  <outputDirectory>${project.build.directory}/flex4sdk</outputDirectory>
-                </artifactItem>
-              </artifactItems>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-antrun-plugin</artifactId>
-        <executions>
-          <execution>
-            <phase>validate</phase>
-            <goals>
-              <goal>run</goal>
-            </goals>
-            <configuration>
-              <tasks>
-                <!-- Dependency plugin discards file permissions so we need to set them manually -->
-                <chmod file="${project.build.directory}/flex4sdk/bin/mxmlc" perm="ugo+rx"/>
-	     </tasks>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>gwt-maven-plugin</artifactId>
-	<configuration>
-	  <extraJvmArgs>-Dflexsdk.home=${project.build.directory}/flex4sdk</extraJvmArgs>
-	</configuration>
-      </plugin>
     </plugins>
 
     <resources>
diff --git a/sample/hello/flash/src/playn/sample/hello/flash/HelloGameFlash.java b/sample/hello/flash/src/playn/sample/hello/flash/HelloGameFlash.java
index 682a545..b3d5ee5 100644
--- a/sample/hello/flash/src/playn/sample/hello/flash/HelloGameFlash.java
+++ b/sample/hello/flash/src/playn/sample/hello/flash/HelloGameFlash.java
@@ -26,7 +26,7 @@ public class HelloGameFlash extends FlashGame {
   @Override
   public void start() {
     FlashAssetManager assets = FlashPlatform.register().assetManager();
-    assets.setPathPrefix("hellogameflash/");
+    assets.setPathPrefix("hellogame/");
     PlayN.run(new HelloGame());
   }
 }
diff --git a/sample/hello/flash/war/.gitignore b/sample/hello/flash/war/.gitignore
deleted file mode 100644
index f4d18b5..0000000
--- a/sample/hello/flash/war/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-hellogameflash
diff --git a/sample/hello/flash/war/HelloGameFlash.html b/sample/hello/flash/war/HelloGameFlash.html
deleted file mode 100644
index c55545e..0000000
--- a/sample/hello/flash/war/HelloGameFlash.html
+++ /dev/null
@@ -1,25 +0,0 @@
-<!--
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License. 
--->
-<!DOCTYPE html>
-<html>
-  <head>
-    <title>HelloGame</title>
-  </head>
-  <body bgcolor="black">
-    <div id='flash_player'></div>
-    <script src="hellogameflash/hellogameflash.nocache.js"></script>
-  </body>
-</html>
diff --git a/sample/hello/flash/war/WEB-INF/web.xml b/sample/hello/flash/war/WEB-INF/web.xml
deleted file mode 100644
index 40ce0b6..0000000
--- a/sample/hello/flash/war/WEB-INF/web.xml
+++ /dev/null
@@ -1,13 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-xmlns="http://java.sun.com/xml/ns/javaee"
-xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
-xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
-http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
-	<!-- TODO: Add <servlet> tags for each servlet here. -->
-	<!-- TODO: Add <servlet-mapping> tags for each <servlet> here. -->
-	<!-- TODO: Optionally add a <welcome-file-list> tag to display a welcome file. -->
-	<welcome-file-list>
-	<welcome-file>HelloGameFlash.html</welcome-file>
-	</welcome-file-list>
-</web-app>
diff --git a/sample/hello/html/playn-hello-html.iml b/sample/hello/html/playn-hello-html.iml
deleted file mode 100644
index ff6b31c..0000000
--- a/sample/hello/html/playn-hello-html.iml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="web" name="Web">
-      <configuration>
-        <descriptors>
-          <deploymentDescriptor name="web.xml" url="file://$MODULE_DIR$/war/WEB-INF/web.xml" />
-        </descriptors>
-        <webroots>
-          <root url="file://$MODULE_DIR$/src/main/webapp" relative="/" />
-        </webroots>
-      </configuration>
-    </facet>
-    <facet type="gwt" name="GWT">
-      <configuration>
-        <setting name="gwtSdkUrl" value="file://$MAVEN_REPOSITORY$/com/google/gwt/gwt-dev/2.3.0/" />
-        <setting name="gwtSdkType" value="maven" />
-        <setting name="webFacet" value="Web" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_6" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/war/WEB-INF/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/annotations" isTestSource="false" />
-      <excludeFolder url="file://$MODULE_DIR$/target/maven-archiver" />
-      <excludeFolder url="file://$MODULE_DIR$/target/playn-hello-html-1.0-SNAPSHOT" />
-      <excludeFolder url="file://$MODULE_DIR$/target/surefire" />
-      <excludeFolder url="file://$MODULE_DIR$/war/WEB-INF/classes" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="playn-hello-core" />
-    <orderEntry type="module" module-name="playn-java" />
-    <orderEntry type="module" module-name="playn-core" />
-    <orderEntry type="library" name="Maven: com.samskivert:pythagoras:1.1-SNAPSHOT" level="project" />
-    <orderEntry type="library" name="Maven: jlayer:jlayer:1.0.1" level="project" />
-    <orderEntry type="module" module-name="playn-html" />
-    <orderEntry type="module" module-name="playn-webgl" />
-    <orderEntry type="library" name="Maven: com.google.gwt:gwt-user:2.3.0" level="project" />
-    <orderEntry type="library" scope="RUNTIME" name="Maven: com.google.gwt:gwt-servlet:2.3.0" level="project" />
-    <orderEntry type="library" name="Maven: allen_sauer:gwt-voices:2.1.2" level="project" />
-    <orderEntry type="library" scope="PROVIDED" name="Maven: com.google.gwt:gwt-dev:2.3.0" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.8.1" level="project" />
-  </component>
-</module>
-
diff --git a/sample/hello/html/war/.gitignore b/sample/hello/html/war/.gitignore
index 390462b..42ec8a2 100644
--- a/sample/hello/html/war/.gitignore
+++ b/sample/hello/html/war/.gitignore
@@ -1 +1,2 @@
 hellogame
+hellogameflash
diff --git a/sample/hello/html/war/HelloGameFlash.html b/sample/hello/html/war/HelloGameFlash.html
new file mode 100644
index 0000000..c55545e
--- /dev/null
+++ b/sample/hello/html/war/HelloGameFlash.html
@@ -0,0 +1,25 @@
+<!--
+ * Copyright 2011 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<!DOCTYPE html>
+<html>
+  <head>
+    <title>HelloGame</title>
+  </head>
+  <body bgcolor="black">
+    <div id='flash_player'></div>
+    <script src="hellogameflash/hellogameflash.nocache.js"></script>
+  </body>
+</html>
diff --git a/sample/hello/html/war/WEB-INF/web.xml b/sample/hello/html/war/WEB-INF/web.xml
index b953f77..fc876a8 100644
--- a/sample/hello/html/war/WEB-INF/web.xml
+++ b/sample/hello/html/war/WEB-INF/web.xml
@@ -9,5 +9,6 @@ http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
 	<!-- TODO: Optionally add a <welcome-file-list> tag to display a welcome file. -->
 	<welcome-file-list>
 	<welcome-file>HelloGame.html</welcome-file>
+	<welcome-file>HelloGameFlash.html</welcome-file>
 	</welcome-file-list>
 </web-app>
diff --git a/sample/hello/playn-hello.iml b/sample/hello/playn-hello.iml
deleted file mode 100644
index a22c133..0000000
--- a/sample/hello/playn-hello.iml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="gwt" name="GWT">
-      <configuration />
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_6" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/target/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/target" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.8.1" level="project" />
-  </component>
-</module>
-
diff --git a/sample/peas/android/.gitignore b/sample/peas/android/.gitignore
new file mode 100644
index 0000000..ddb0a2d
--- /dev/null
+++ b/sample/peas/android/.gitignore
@@ -0,0 +1,2 @@
+bin
+.settings
diff --git a/sample/peas/android/AndroidManifest.xml b/sample/peas/android/AndroidManifest.xml
new file mode 100644
index 0000000..c75d227
--- /dev/null
+++ b/sample/peas/android/AndroidManifest.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+      package="playn.sample.peas.android"
+      android:screenOrientation="landscape"
+      android:versionCode="1"
+      android:versionName="1.0">
+    <uses-sdk android:minSdkVersion="6" android:targetSdkVersion="11" />
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
+    <application android:icon="@drawable/icon" android:label="@string/app_name" android:debuggable="true">
+        <activity android:name="PeasActivity"
+                  android:label="@string/app_name"
+                  android:theme="@android:style/Theme.NoTitleBar.Fullscreen"
+                  android:configChanges="keyboardHidden|orientation">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+</manifest> 
diff --git a/sample/peas/android/default.properties b/sample/peas/android/default.properties
new file mode 100644
index 0000000..370331f
--- /dev/null
+++ b/sample/peas/android/default.properties
@@ -0,0 +1,12 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system use,
+# "build.properties", and override values to adapt the script to your
+# project structure.
+
+# Project target.
+target=android-11
+android.library.reference.1=../../../android
diff --git a/sample/peas/android/peas-android.launch b/sample/peas/android/peas-android.launch
new file mode 100644
index 0000000..7471719
--- /dev/null
+++ b/sample/peas/android/peas-android.launch
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="com.android.ide.eclipse.adt.debug.LaunchConfigType">
+<intAttribute key="com.android.ide.eclipse.adt.action" value="0"/>
+<stringAttribute key="com.android.ide.eclipse.adt.commandline" value=""/>
+<intAttribute key="com.android.ide.eclipse.adt.delay" value="0"/>
+<booleanAttribute key="com.android.ide.eclipse.adt.nobootanim" value="false"/>
+<intAttribute key="com.android.ide.eclipse.adt.speed" value="0"/>
+<booleanAttribute key="com.android.ide.eclipse.adt.target" value="false"/>
+<booleanAttribute key="com.android.ide.eclipse.adt.wipedata" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/peas-android"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="4"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.jdt.launching.ALLOW_TERMINATE" value="true"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="peas-android"/>
+</launchConfiguration>
diff --git a/sample/peas/android/proguard.cfg b/sample/peas/android/proguard.cfg
new file mode 100644
index 0000000..8ad7d33
--- /dev/null
+++ b/sample/peas/android/proguard.cfg
@@ -0,0 +1,34 @@
+-optimizationpasses 5
+-dontusemixedcaseclassnames
+-dontskipnonpubliclibraryclasses
+-dontpreverify
+-verbose
+-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
+
+-keep public class * extends android.app.Activity
+-keep public class * extends android.app.Application
+-keep public class * extends android.app.Service
+-keep public class * extends android.content.BroadcastReceiver
+-keep public class * extends android.content.ContentProvider
+-keep public class com.android.vending.licensing.ILicensingService
+
+-keepclasseswithmembernames class * {
+    native <methods>;
+}
+
+-keepclasseswithmembernames class * {
+    public <init>(android.content.Context, android.util.AttributeSet);
+}
+
+-keepclasseswithmembernames class * {
+    public <init>(android.content.Context, android.util.AttributeSet, int);
+}
+
+-keepclassmembers enum * {
+    public static **[] values();
+    public static ** valueOf(java.lang.String);
+}
+
+-keep class * implements android.os.Parcelable {
+  public static final android.os.Parcelable$Creator *;
+}
diff --git a/sample/peas/android/res/drawable-hdpi/icon.png b/sample/peas/android/res/drawable-hdpi/icon.png
new file mode 100644
index 0000000..5801ed0
Binary files /dev/null and b/sample/peas/android/res/drawable-hdpi/icon.png differ
diff --git a/sample/peas/android/res/drawable-ldpi/icon.png b/sample/peas/android/res/drawable-ldpi/icon.png
new file mode 100644
index 0000000..bd0e62f
Binary files /dev/null and b/sample/peas/android/res/drawable-ldpi/icon.png differ
diff --git a/sample/peas/android/res/drawable-mdpi/icon.png b/sample/peas/android/res/drawable-mdpi/icon.png
new file mode 100644
index 0000000..dbf9396
Binary files /dev/null and b/sample/peas/android/res/drawable-mdpi/icon.png differ
diff --git a/sample/peas/android/res/values/strings.xml b/sample/peas/android/res/values/strings.xml
new file mode 100644
index 0000000..5315136
--- /dev/null
+++ b/sample/peas/android/res/values/strings.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">Peas</string>
+</resources>
diff --git a/sample/peas/android/src/playn/sample/peas/android/PeasActivity.java b/sample/peas/android/src/playn/sample/peas/android/PeasActivity.java
new file mode 100644
index 0000000..3c29a13
--- /dev/null
+++ b/sample/peas/android/src/playn/sample/peas/android/PeasActivity.java
@@ -0,0 +1,29 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.android;
+
+import playn.android.GameActivity;
+import playn.core.PlayN;
+import playn.sample.peas.core.Peas;
+
+public class PeasActivity extends GameActivity {
+
+  @Override
+  public void main(){
+    platform().assetManager().setPathPrefix("playn/sample/peas/resources");
+    PlayN.run(new Peas());
+  }
+}
diff --git a/sample/peas/core/.gitignore b/sample/peas/core/.gitignore
new file mode 100644
index 0000000..5e83119
--- /dev/null
+++ b/sample/peas/core/.gitignore
@@ -0,0 +1 @@
+.settings
diff --git a/sample/peas/core/build.xml b/sample/peas/core/build.xml
new file mode 100644
index 0000000..c64f657
--- /dev/null
+++ b/sample/peas/core/build.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0"?>
+<project name="peas" default="compile">
+  <property name="java.classname" value="playn.sample.peas.java.PeasJava"/>
+  <property name="html.classname" value="playn.sample.peas.Peas"/>
+  <property name="html.index" value="Peas.html"/>
+  <import file="../../build-common.xml"/>
+</project>
diff --git a/sample/peas/core/peas-html.launch b/sample/peas/core/peas-html.launch
new file mode 100644
index 0000000..e473863
--- /dev/null
+++ b/sample/peas/core/peas-html.launch
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="com.google.gdt.eclipse.suite.webapp">
+<stringAttribute key="com.google.gdt.eclipse.suiteMainTypeProcessor.PREVIOUSLY_SET_MAIN_TYPE_NAME" value="com.google.gwt.dev.DevMode"/>
+<booleanAttribute key="com.google.gdt.eclipse.suiteWarArgumentProcessor.IS_WAR_FROM_PROJECT_PROPERTIES" value="false"/>
+<listAttribute key="com.google.gwt.eclipse.core.ENTRY_POINT_MODULES">
+<listEntry value="playn.sample.peas.Peas"/>
+<listEntry value="playn.sample.peas.PeasFlash"/>
+</listAttribute>
+<stringAttribute key="com.google.gwt.eclipse.core.URL" value="Peas.html"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/peas"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="4"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="com.google.gwt.eclipse.core.moduleClasspathProvider"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="com.google.gwt.dev.DevMode"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-server com.google.appengine.tools.development.gwt.AppEngineLauncher -remoteUI &quot;${gwt_remote_ui_server_port}:${unique_id}&quot; -startupUrl Peas.html -logLevel INFO -codeServerPort 9997 -port 8888 -war &quot;${project_loc:/peas}/war&quot; playn.sample.peas.PeasFlash playn.sample.peas.Peas"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="peas"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-javaagent:/home/philip/eclipse/plugins/com.google.appengine.eclipse.sdkbundle_1.5.2.r36v201107211953/appengine-java-sdk-1.5.2/lib/agent/appengine-agent.jar -Xmx512m -Xbootclasspath/p:/opt/appengine-java-sdk-1.5.0.1/lib/override/appengine-dev-jdk-overrides.jar"/>
+</launchConfiguration>
diff --git a/sample/peas/core/peas-java.launch b/sample/peas/core/peas-java.launch
new file mode 100644
index 0000000..fe1e958
--- /dev/null
+++ b/sample/peas/core/peas-java.launch
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.jdt.launching.localJavaApplication">
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/peas/src/playn/sample/peas/java/PeasJava.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="playn.sample.peas.java.PeasJava"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="peas"/>
+</launchConfiguration>
diff --git a/sample/peas/core/pom.xml b/sample/peas/core/pom.xml
new file mode 100644
index 0000000..0d43961
--- /dev/null
+++ b/sample/peas/core/pom.xml
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>com.googlecode.playn</groupId>
+    <artifactId>playn-demos</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <relativePath>../../pom.xml</relativePath>
+  </parent>
+
+  <artifactId>playn-peaphysics</artifactId>
+  <name>PlayN Peas Sample</name>
+
+  <properties>
+    <gwt.module>playn.sample.peas.Peas</gwt.module>
+    <gwt.name>peas</gwt.name>
+  </properties>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.googlecode.playn</groupId>
+      <artifactId>playn-java</artifactId>
+      <version>${coreversion}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>com.googlecode.playn</groupId>
+      <artifactId>playn-flash</artifactId>
+      <version>${coreversion}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>com.googlecode.playn</groupId>
+      <artifactId>playn-jbox2d</artifactId>
+      <version>${coreversion}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>com.google.gwt</groupId>
+      <artifactId>gwt-dev</artifactId>
+      <version>${gwtversion}</version>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <sourceDirectory>src</sourceDirectory>
+
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-source-plugin</artifactId>
+      </plugin>
+    </plugins>
+    <resources>
+      <resource>
+        <directory>${basedir}/src</directory>
+      </resource>
+      <resource>
+        <directory>${basedir}/war/WEB-INF/classes</directory>
+      </resource>
+    </resources>
+  </build>
+</project>
diff --git a/sample/peas/core/src/playn/sample/peas/Peas.gwt.xml b/sample/peas/core/src/playn/sample/peas/Peas.gwt.xml
new file mode 100644
index 0000000..3109db6
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/Peas.gwt.xml
@@ -0,0 +1,32 @@
+<!--
+ * Copyright 2011 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<module rename-to='peas'>
+  <inherits name='playn.PlayN' />
+  <inherits name="org.jbox2d.GwtBox2D" />
+    
+  <!--
+    Optionally, enable gwt-log's advanced logging features:
+    
+      <inherits name="playn.logging.Enhanced" />
+  -->
+
+  <source path='core'/>
+  <source path='html'/>
+
+  <public path="resources" />
+
+  <entry-point class='playn.sample.peas.html.PeasHtml'/>
+</module>
diff --git a/sample/peas/core/src/playn/sample/peas/PeasFlash.gwt.xml b/sample/peas/core/src/playn/sample/peas/PeasFlash.gwt.xml
new file mode 100644
index 0000000..a9dd6a4
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/PeasFlash.gwt.xml
@@ -0,0 +1,26 @@
+<!--
+ * Copyright 2011 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<module rename-to='peasflash'>
+  <inherits name='playn.PlayNFlash'/>
+  <inherits name="org.jbox2d.GwtBox2D" />
+
+  <source path='core'/>
+  <source path='flash'/>
+
+  <public path="resources" />
+
+  <entry-point class='playn.sample.peas.flash.PeasFlash'/>
+</module>
diff --git a/sample/peas/core/src/playn/sample/peas/core/PeaLoader.java b/sample/peas/core/src/playn/sample/peas/core/PeaLoader.java
new file mode 100644
index 0000000..9c41749
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/PeaLoader.java
@@ -0,0 +1,127 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core;
+
+
+
+
+
+
+import playn.sample.peas.core.entities.Block;
+import playn.sample.peas.core.entities.BlockGel;
+import playn.sample.peas.core.entities.BlockLeftRamp;
+import playn.sample.peas.core.entities.BlockRightRamp;
+import playn.sample.peas.core.entities.BlockSpring;
+import playn.sample.peas.core.entities.Cloud1;
+import playn.sample.peas.core.entities.Cloud3;
+import playn.sample.peas.core.entities.Entity;
+import playn.sample.peas.core.entities.FakeBlock;
+import playn.sample.peas.core.entities.Pea;
+import playn.sample.peas.core.entities.Portal;
+
+import playn.core.AssetWatcher;
+import playn.core.PlayN;
+import playn.core.GroupLayer;
+import playn.core.Json;
+import playn.core.ResourceCallback;
+
+public class PeaLoader {
+
+  public static void CreateWorld(String level, final GroupLayer worldLayer, final ResourceCallback<PeaWorld> callback) {
+    final PeaWorld peaWorld = new PeaWorld(worldLayer);
+
+    // load the level
+    PlayN.assetManager().getText(level, new ResourceCallback<String>() {
+      @Override
+      public void done(String resource) {
+        // create an asset watcher that will call our callback when all assets
+        // are loaded
+        AssetWatcher assetWatcher = new AssetWatcher(new AssetWatcher.Listener() {
+          @Override
+          public void done() {
+            callback.done(peaWorld);
+          }
+
+          @Override
+          public void error(Throwable e) {
+            callback.error(e);
+          }
+        });
+
+        // parse the level
+        Json.Object document = PlayN.json().parse(resource);
+        
+        // previous Portal (used for linking portals)
+        Portal lastPortal = null;
+
+        // parse the entities, adding each asset to the asset watcher
+        Json.Array jsonEntities = document.getArray("Entities");
+        for (int i = 0; i < jsonEntities.length(); i++) {
+          Json.Object jsonEntity = jsonEntities.getObject(i);
+          String type = jsonEntity.getString("type");
+          float x = (float) jsonEntity.getNumber("x");
+          float y = (float) jsonEntity.getNumber("y");
+          float a = (float) jsonEntity.getNumber("a");
+
+          Entity entity = null;
+          if (Pea.TYPE.equalsIgnoreCase(type)) {
+            entity = new Pea(peaWorld, peaWorld.world, x, y, a);
+          } else if (Block.TYPE.equalsIgnoreCase(type)) {
+            entity = new Block(peaWorld, peaWorld.world, x, y, a);
+          } else if (BlockRightRamp.TYPE.equalsIgnoreCase(type)) {
+            entity = new BlockRightRamp(peaWorld, peaWorld.world, x, y, a);
+          } else if (BlockLeftRamp.TYPE.equalsIgnoreCase(type)) {
+            entity = new BlockLeftRamp(peaWorld, peaWorld.world, x, y, a);
+          } else if (BlockGel.TYPE.equalsIgnoreCase(type)) {
+            entity = new BlockGel(peaWorld, peaWorld.world, x, y, a);
+          } else if (BlockSpring.TYPE.equalsIgnoreCase(type)) {
+            entity = new BlockSpring(peaWorld, peaWorld.world, x, y, a);
+          } else if (Cloud1.TYPE.equalsIgnoreCase(type)) {
+            entity = new Cloud1(peaWorld);
+          } else if (Cloud3.TYPE.equalsIgnoreCase(type)) {
+            entity = new Cloud3(peaWorld);
+          } else if (FakeBlock.TYPE.equalsIgnoreCase(type)) {
+            entity = new FakeBlock(peaWorld, x, y, a);
+          } else if (Portal.TYPE.equalsIgnoreCase(type)) {
+            entity = new Portal(peaWorld, peaWorld.world, x, y, a);
+            if (lastPortal == null) {
+              lastPortal = (Portal) entity;
+            } else {
+              lastPortal.other = (Portal) entity;
+              ((Portal) entity).other = lastPortal;
+              lastPortal = null;
+            }
+          }
+
+          if (entity != null) {
+            assetWatcher.add(entity.getImage());
+            peaWorld.add(entity);
+          }
+        }
+
+        // start the watcher (it will call the callback when everything is
+        // loaded)
+        assetWatcher.start();
+      }
+
+      @Override
+      public void error(Throwable err) {
+        callback.error(err);
+      }
+    });
+  }
+
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/PeaWorld.java b/sample/peas/core/src/playn/sample/peas/core/PeaWorld.java
new file mode 100644
index 0000000..4119c5c
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/PeaWorld.java
@@ -0,0 +1,176 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core;
+
+import org.jbox2d.callbacks.ContactImpulse;
+import org.jbox2d.callbacks.ContactListener;
+import org.jbox2d.callbacks.DebugDraw;
+import org.jbox2d.collision.Manifold;
+import org.jbox2d.collision.shapes.PolygonShape;
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.BodyDef;
+import org.jbox2d.dynamics.World;
+import org.jbox2d.dynamics.contacts.Contact;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Stack;
+
+import static playn.core.PlayN.graphics;
+
+import playn.core.CanvasLayer;
+import playn.core.DebugDrawBox2D;
+import playn.core.GroupLayer;
+import playn.sample.peas.core.entities.Entity;
+import playn.sample.peas.core.entities.PhysicsEntity;
+
+public class PeaWorld implements ContactListener {
+  public GroupLayer staticLayerBack;
+  public GroupLayer dynamicLayer;
+  public GroupLayer staticLayerFront;
+
+  // size of world
+  private static int width = 24;
+  private static int height = 18;
+
+  // box2d object containing physics world
+  protected World world;
+
+  private List<Entity> entities = new ArrayList<Entity>(0);
+  private HashMap<Body, PhysicsEntity> bodyEntityLUT = new HashMap<Body, PhysicsEntity>();
+  private Stack<Contact> contacts = new Stack<Contact>();
+
+  private static boolean showDebugDraw = false;
+  private DebugDrawBox2D debugDraw;
+  
+  public PeaWorld(GroupLayer scaledLayer) {
+    staticLayerBack = graphics().createGroupLayer();
+    scaledLayer.add(staticLayerBack);
+    dynamicLayer = graphics().createGroupLayer();
+    scaledLayer.add(dynamicLayer);
+    staticLayerFront = graphics().createGroupLayer();
+    scaledLayer.add(staticLayerFront);
+    
+    // create the physics world
+    Vec2 gravity = new Vec2(0.0f, 10.0f);
+    world = new World(gravity, true);
+    world.setWarmStarting(true);
+    world.setAutoClearForces(true);
+    world.setContactListener(this);
+
+    // create the ground
+    Body ground = world.createBody(new BodyDef());
+    PolygonShape groundShape = new PolygonShape();
+    groundShape.setAsEdge(new Vec2(0, height), new Vec2(width, height));
+    ground.createFixture(groundShape, 0.0f);
+
+    // create the walls
+    Body wallLeft = world.createBody(new BodyDef());
+    PolygonShape wallLeftShape = new PolygonShape();
+    wallLeftShape.setAsEdge(new Vec2(0, 0), new Vec2(0, height));
+    wallLeft.createFixture(wallLeftShape, 0.0f);
+    Body wallRight = world.createBody(new BodyDef());
+    PolygonShape wallRightShape = new PolygonShape();
+    wallRightShape.setAsEdge(new Vec2(width, 0), new Vec2(width, height));
+    wallRight.createFixture(wallRightShape, 0.0f);
+
+    if (showDebugDraw) {
+      CanvasLayer canvasLayer =
+          graphics().createCanvasLayer((int) (width / Peas.physUnitPerScreenUnit),
+              (int) (height / Peas.physUnitPerScreenUnit));
+      graphics().rootLayer().add(canvasLayer);
+      debugDraw = new DebugDrawBox2D();
+      debugDraw.setCanvas(canvasLayer);
+      debugDraw.setFlipY(false);
+      debugDraw.setStrokeAlpha(150);
+      debugDraw.setFillAlpha(75);
+      debugDraw.setStrokeWidth(2.0f);
+      debugDraw.setFlags(DebugDraw.e_shapeBit | DebugDraw.e_jointBit | DebugDraw.e_aabbBit);
+      debugDraw.setCamera(0, 0, 1f / Peas.physUnitPerScreenUnit);
+      world.setDebugDraw(debugDraw);
+    }
+  }
+
+  public void update(float delta) {
+    for (Entity e : entities) {
+      e.update(delta);
+    }
+    // the step delta is fixed so box2d isn't affected by framerate
+    world.step(0.033f, 10, 10);
+    processContacts();
+  }
+
+  public void paint(float delta) {
+    if (showDebugDraw) {
+      debugDraw.getCanvas().canvas().clear();
+      world.drawDebugData();
+    }
+    for (Entity e : entities) {
+      e.paint(delta);
+    }
+  }
+
+  public void add(Entity entity) {
+    entities.add(entity);
+    if (entity instanceof PhysicsEntity) {
+      PhysicsEntity physicsEntity = (PhysicsEntity) entity;
+      bodyEntityLUT.put(physicsEntity.getBody(), physicsEntity);
+    }
+  }
+
+  // handle contacts out of physics loop
+  public void processContacts() {
+    while (!contacts.isEmpty()) {
+      Contact contact = contacts.pop();
+      
+      // handle collision
+      PhysicsEntity entityA = bodyEntityLUT.get(contact.m_fixtureA.m_body);
+      PhysicsEntity entityB = bodyEntityLUT.get(contact.m_fixtureB.m_body);
+      
+      if (entityA != null && entityB != null) {
+        if (entityA instanceof PhysicsEntity.HasContactListener) {
+          ((PhysicsEntity.HasContactListener) entityA).contact(entityB);
+        }
+        if (entityB instanceof PhysicsEntity.HasContactListener) {
+          ((PhysicsEntity.HasContactListener) entityB).contact(entityA);
+        }
+      }
+    }
+  }
+
+  // Box2d's begin contact
+  @Override
+  public void beginContact(Contact contact) {
+    contacts.push(contact);
+  }
+
+  // Box2d's end contact
+  @Override
+  public void endContact(Contact contact) {
+  }
+
+  // Box2d's pre solve
+  @Override
+  public void preSolve(Contact contact, Manifold oldManifold) {
+  }
+
+  // Box2d's post solve
+  @Override
+  public void postSolve(Contact contact, ContactImpulse impulse) {
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/Peas.java b/sample/peas/core/src/playn/sample/peas/core/Peas.java
new file mode 100644
index 0000000..3bad9b9
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/Peas.java
@@ -0,0 +1,101 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core;
+
+import static playn.core.PlayN.assetManager;
+import static playn.core.PlayN.graphics;
+import static playn.core.PlayN.pointer;
+
+import playn.core.PlayN;
+import playn.core.Game;
+import playn.core.GroupLayer;
+import playn.core.Image;
+import playn.core.ImageLayer;
+import playn.core.Pointer;
+import playn.core.ResourceCallback;
+import playn.sample.peas.core.entities.Pea;
+
+public class Peas implements Game {
+  
+  // scale difference between screen space (pixels) and world space (physics).
+  public static float physUnitPerScreenUnit = 1 / 26.666667f;
+
+  // main layer that holds the world. note: this gets scaled to world space
+  GroupLayer worldLayer;
+
+  // main world
+  PeaWorld world = null;
+  boolean worldLoaded = false;
+
+  @Override
+  public void init() {
+    // load and show our background image
+    Image bgImage = assetManager().getImage("images/bg.png");
+    ImageLayer bgLayer = graphics().createImageLayer(bgImage);
+    graphics().rootLayer().add(bgLayer);
+
+    // create our world layer (scaled to "world space")
+    worldLayer = graphics().createGroupLayer();
+    worldLayer.setScale(1f / physUnitPerScreenUnit);
+    graphics().rootLayer().add(worldLayer);
+
+    PeaLoader.CreateWorld("levels/level1.json", worldLayer, new ResourceCallback<PeaWorld>() {
+      @Override
+      public void done(PeaWorld resource) {
+        world = resource;
+        worldLoaded = true;
+      }
+
+      @Override
+      public void error(Throwable err) {
+        PlayN.log().error("Error loading pea world: " + err.getMessage());
+      }
+    });
+
+    // hook up our pointer listener
+    pointer().setListener(new Pointer.Adapter() {
+      @Override
+      public void onPointerStart(Pointer.Event event) {
+        if (worldLoaded) {
+          Pea pea = new Pea(world, world.world, physUnitPerScreenUnit * event.x(),
+                            physUnitPerScreenUnit * event.y(), 0);
+          world.add(pea);
+        }
+      }
+    });
+  }
+
+
+  @Override
+  public void paint(float alpha) {
+    if (worldLoaded) {
+      world.paint(alpha);
+    }
+  }
+
+  @Override
+  public void update(float delta) {
+    if (worldLoaded) {
+      world.update(delta);
+    }
+  }
+
+  @Override
+  public int updateRate() {
+    return 25;
+  }
+  
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/Block.java b/sample/peas/core/src/playn/sample/peas/core/entities/Block.java
new file mode 100644
index 0000000..2acdea1
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/Block.java
@@ -0,0 +1,80 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import org.jbox2d.collision.shapes.PolygonShape;
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.BodyDef;
+import org.jbox2d.dynamics.BodyType;
+import org.jbox2d.dynamics.FixtureDef;
+import org.jbox2d.dynamics.World;
+
+import playn.sample.peas.core.PeaWorld;
+
+public class Block extends StaticPhysicsEntity {
+  public static String TYPE = "Block";
+  
+  public Block(final PeaWorld peaWorld, World world, float x, float y, float angle) {
+    super(peaWorld, world, x, y, angle);
+  }
+
+  @Override
+  Body initPhysicsBody(World world, float x, float y, float angle) {
+    FixtureDef fixtureDef = new FixtureDef();
+    BodyDef bodyDef = new BodyDef();
+    bodyDef.type = BodyType.STATIC;
+    bodyDef.position = new Vec2(0, 0);
+    Body body = world.createBody(bodyDef);
+
+    PolygonShape polygonShape = new PolygonShape();
+    Vec2[] polygon = new Vec2[4];
+    polygon[0] = new Vec2(-getWidth()/2f, -getHeight()/2f + getTopOffset());
+    polygon[1] = new Vec2(getWidth()/2f, -getHeight()/2f + getTopOffset());
+    polygon[2] = new Vec2(getWidth()/2f, getHeight()/2f);
+    polygon[3] = new Vec2(-getWidth()/2f, getHeight()/2f);
+    polygonShape.set(polygon, polygon.length);
+    fixtureDef.shape = polygonShape;
+    fixtureDef.friction = 0.1f;
+    fixtureDef.restitution = 0.8f;
+    body.createFixture(fixtureDef);
+    body.setTransform(new Vec2(x, y), angle);
+    return body;
+  }
+
+  @Override
+  float getWidth() {
+    return 2.0f;
+  }
+
+  @Override
+  float getHeight() {
+    return 2.0f;
+  }
+
+  /**
+   * Return the size of the offset where the block is slightly lower than where
+   * the image is drawn for a depth effect
+   */
+  public float getTopOffset() {
+    return 2.0f / 8f;
+  }
+
+  @Override
+  public String getImagePath() {
+    return "images/Block-Normal.png";
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/BlockGel.java b/sample/peas/core/src/playn/sample/peas/core/entities/BlockGel.java
new file mode 100644
index 0000000..3b8fe66
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/BlockGel.java
@@ -0,0 +1,63 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import org.jbox2d.collision.shapes.PolygonShape;
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.BodyDef;
+import org.jbox2d.dynamics.BodyType;
+import org.jbox2d.dynamics.FixtureDef;
+import org.jbox2d.dynamics.World;
+
+import playn.sample.peas.core.PeaWorld;
+
+public class BlockGel extends Block {
+  @SuppressWarnings("hiding")
+  public static String TYPE = "BlockGel";
+  
+  public BlockGel(PeaWorld peaWorld, World world, float x, float y, float angle) {
+    super(peaWorld, world, x, y, angle);
+  }
+
+  @Override
+  Body initPhysicsBody(World world, float x, float y, float angle) {
+    FixtureDef fixtureDef = new FixtureDef();
+    BodyDef bodyDef = new BodyDef();
+    bodyDef.type = BodyType.STATIC;
+    bodyDef.position = new Vec2(0, 0);
+    Body body = world.createBody(bodyDef);
+
+    PolygonShape polygonShape = new PolygonShape();
+    Vec2[] polygon = new Vec2[4];
+    polygon[0] = new Vec2(-getWidth()/2f, -getHeight()/2f + getTopOffset());
+    polygon[1] = new Vec2(getWidth()/2f, -getHeight()/2f + getTopOffset());
+    polygon[2] = new Vec2(getWidth()/2f, getHeight()/2f);
+    polygon[3] = new Vec2(-getWidth()/2f, getHeight()/2f);
+    polygonShape.set(polygon, polygon.length);
+    fixtureDef.shape = polygonShape;
+    fixtureDef.friction = 1.0f;
+    fixtureDef.restitution = 0.3f;
+    body.createFixture(fixtureDef);
+    body.setTransform(new Vec2(x, y), angle);
+    return body;
+  }
+
+  @Override
+  public String getImagePath() {
+    return "images/Block-Gel.png";
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/BlockLeftRamp.java b/sample/peas/core/src/playn/sample/peas/core/entities/BlockLeftRamp.java
new file mode 100644
index 0000000..f1dfa29
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/BlockLeftRamp.java
@@ -0,0 +1,62 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import org.jbox2d.collision.shapes.PolygonShape;
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.BodyDef;
+import org.jbox2d.dynamics.BodyType;
+import org.jbox2d.dynamics.FixtureDef;
+import org.jbox2d.dynamics.World;
+
+import playn.sample.peas.core.PeaWorld;
+
+public class BlockLeftRamp extends Block {
+  @SuppressWarnings("hiding")
+  public static String TYPE = "BlockLeftRamp";
+  
+  public BlockLeftRamp(PeaWorld peaWorld, World world, float x, float y, float angle) {
+    super(peaWorld, world, x, y, angle);
+  }
+
+  @Override
+  Body initPhysicsBody(World world, float x, float y, float angle) {
+    FixtureDef fixtureDef = new FixtureDef();
+    BodyDef bodyDef = new BodyDef();
+    bodyDef.type = BodyType.STATIC;
+    bodyDef.position = new Vec2(0, 0);
+    Body body = world.createBody(bodyDef);
+
+    PolygonShape polygonShape = new PolygonShape();
+    Vec2[] polygon = new Vec2[3];
+    polygon[0] = new Vec2(getWidth()/2f, -getHeight()/2f + getTopOffset());
+    polygon[1] = new Vec2(getWidth()/2f, getHeight()/2f);
+    polygon[2] = new Vec2(-getWidth()/2f, getHeight()/2f);
+    polygonShape.set(polygon, polygon.length);
+    fixtureDef.shape = polygonShape;
+    fixtureDef.friction = 0.1f;
+    fixtureDef.restitution = 0.9f;
+    body.createFixture(fixtureDef);
+    body.setTransform(new Vec2(x, y), angle);
+    return body;
+  }
+
+  @Override
+  public String getImagePath() {
+    return "images/Block-LeftRamp.png";
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/BlockRightRamp.java b/sample/peas/core/src/playn/sample/peas/core/entities/BlockRightRamp.java
new file mode 100644
index 0000000..c5f4d2e
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/BlockRightRamp.java
@@ -0,0 +1,62 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import org.jbox2d.collision.shapes.PolygonShape;
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.BodyDef;
+import org.jbox2d.dynamics.BodyType;
+import org.jbox2d.dynamics.FixtureDef;
+import org.jbox2d.dynamics.World;
+
+import playn.sample.peas.core.PeaWorld;
+
+public class BlockRightRamp extends Block {
+  @SuppressWarnings("hiding")
+  public static String TYPE = "BlockRightRamp";
+  
+  public BlockRightRamp(PeaWorld peaWorld, World world, float x, float y, float angle) {
+    super(peaWorld, world, x, y, angle);
+  }
+
+  @Override
+  Body initPhysicsBody(World world, float x, float y, float angle) {
+    FixtureDef fixtureDef = new FixtureDef();
+    BodyDef bodyDef = new BodyDef();
+    bodyDef.type = BodyType.STATIC;
+    bodyDef.position = new Vec2(0, 0);
+    Body body = world.createBody(bodyDef);
+
+    PolygonShape polygonShape = new PolygonShape();
+    Vec2[] polygon = new Vec2[3];
+    polygon[0] = new Vec2(-getWidth()/2f, -getHeight()/2f + getTopOffset());
+    polygon[1] = new Vec2(getWidth()/2f, getHeight()/2f);
+    polygon[2] = new Vec2(-getWidth()/2f, getHeight()/2f);
+    polygonShape.set(polygon, polygon.length);
+    fixtureDef.shape = polygonShape;
+    fixtureDef.friction = 0.1f;
+    fixtureDef.restitution = 0.9f;
+    body.createFixture(fixtureDef);
+    body.setTransform(new Vec2(x, y), angle);
+    return body;
+  }
+
+  @Override
+  public String getImagePath() {
+    return "images/Block-RightRamp.png";
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/BlockSpring.java b/sample/peas/core/src/playn/sample/peas/core/entities/BlockSpring.java
new file mode 100644
index 0000000..05a2245
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/BlockSpring.java
@@ -0,0 +1,167 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import org.jbox2d.collision.shapes.PolygonShape;
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.BodyDef;
+import org.jbox2d.dynamics.BodyType;
+import org.jbox2d.dynamics.FixtureDef;
+import org.jbox2d.dynamics.World;
+import org.jbox2d.dynamics.joints.MouseJoint;
+import org.jbox2d.dynamics.joints.MouseJointDef;
+
+import static playn.core.PlayN.graphics;
+
+import playn.core.ImageLayer;
+import playn.sample.peas.core.PeaWorld;
+
+public class BlockSpring extends Entity implements PhysicsEntity {
+  public static String TYPE = "BlockSpring";
+
+  ImageLayer layerBase;
+  MouseJoint mj;
+  Body body;
+
+  public BlockSpring(PeaWorld peaWorld, World world, float x, float y, float angle) {
+    super(peaWorld, x, y, angle);
+    
+    // add the spring joint
+    MouseJointDef mjd = new MouseJointDef();
+    mjd.bodyA = world.getBodyList();
+    body = initPhysicsBody(world, x, y, angle);
+    mjd.bodyB = getBody();
+    mjd.target.set(new Vec2(x, y));
+    mjd.maxForce = 40f * getBody().getMass();
+    mjd.dampingRatio = 0.2f;
+    mj = (MouseJoint) world.createJoint(mjd);
+    
+    setPos(x, y);
+    setAngle(angle);
+  }
+
+  @Override
+  public void initPreLoad(final PeaWorld peaWorld) {
+  }
+
+  @Override
+  public void initPostLoad(final PeaWorld peaWorld) {
+    layerBase = graphics().createImageLayer(layer.image());
+    
+    // set our layer base settings/source
+    layerBase.setWidth(layer.image().width());
+    layerBase.setHeight(30);
+    layerBase.setSourceRect(0, 31, 71, 30);
+    layerBase.setOrigin(image.width() / 2f, -30 + image.height() / 2f);
+    layerBase.setScale(getWidth() / image.width(), getHeight() / image.height());
+
+    // set our top layer settings/source
+    layer.setWidth(layer.image().width());
+    layer.setHeight(31);
+    layer.setSourceRect(0, 0, 71, 31);
+    layer.setOrigin(image.width() / 2f, image.height() / 2f);
+    layer.setScale(getWidth() / image.width(), getHeight() / image.height());
+    
+    peaWorld.dynamicLayer.add(layerBase);
+    peaWorld.dynamicLayer.add(layer);
+    
+    setPos(x, y);
+    setAngle(angle);
+  }
+
+  Body initPhysicsBody(World world, float x, float y, float angle) {
+    FixtureDef fixtureDef = new FixtureDef();
+    BodyDef bodyDef = new BodyDef();
+    bodyDef.type = BodyType.DYNAMIC;
+    bodyDef.position = new Vec2(0, 0);
+    Body body = world.createBody(bodyDef);
+
+    PolygonShape polygonShape = new PolygonShape();
+    Vec2[] polygon = new Vec2[4];
+    polygon[0] = new Vec2(-getWidth() / 2f, -getHeight() / 2f + getTopOffset());
+    polygon[1] = new Vec2(getWidth() / 2f, -getHeight() / 2f + getTopOffset());
+    polygon[2] = new Vec2(getWidth() / 2f, polygon[0].y + getSpringBoxHeight());
+    polygon[3] = new Vec2(-getWidth() / 2f, polygon[1].y + getSpringBoxHeight());
+    polygonShape.set(polygon, polygon.length);
+    fixtureDef.shape = polygonShape;
+    fixtureDef.friction = 0.1f;
+    fixtureDef.restitution = 1.4f;
+    body.createFixture(fixtureDef);
+    body.setTransform(new Vec2(x, y), angle);
+    return body;
+  }
+
+  @Override
+  float getWidth() {
+    return 2.0f;
+  }
+
+  @Override
+  float getHeight() {
+    return 2.0f;
+  }
+
+  /**
+   * Return the height of the spring's top box.
+   */
+  public float getSpringBoxHeight() {
+    return getHeight() / 2.7f;
+  }
+
+  /**
+   * Return the size of the offset where the block is slightly lower than where
+   * the image is drawn for a depth effect
+   */
+  public float getTopOffset() {
+    return 2.0f / 8f;
+  }
+
+  @Override
+  public void setPos(float x, float y) {
+    if (getBody() != null && layerBase != null) {
+      getBody().setTransform(new Vec2(x, y), getBody().getAngle());
+      mj.setTarget(new Vec2(x, y - 0 * getSpringBoxHeight()));
+      layerBase.setTranslation(x, y);
+      layer.setTranslation(x, y);
+    }
+  }
+
+  @Override
+  public void setAngle(float a) {
+    if (getBody() != null && layerBase != null) {
+      getBody().setTransform(getBody().getPosition(), a);
+      layerBase.setRotation(a);
+      layer.setRotation(a);
+    }
+  }
+
+  @Override
+  public void update(float alpha) {
+    layer.setTranslation(body.getPosition().x, body.getPosition().y);
+    layer.setRotation(body.getAngle());
+  }
+
+  @Override
+  public String getImagePath() {
+    return "images/Block-Spring.png";
+  }
+
+  @Override
+  public Body getBody() {
+    return body;
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/Cloud1.java b/sample/peas/core/src/playn/sample/peas/core/entities/Cloud1.java
new file mode 100644
index 0000000..8791741
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/Cloud1.java
@@ -0,0 +1,82 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import playn.sample.peas.core.PeaWorld;
+
+public class Cloud1 extends Entity {
+  public static String TYPE = "Cloud1";
+
+  public Cloud1(PeaWorld peaWorld) {
+    super(peaWorld, 0, 0, 0);
+    y = (float) (Math.random() * getMaximumHeight());
+    x = (float) (Math.random() * getMaximumWidth());
+  }
+
+  @Override
+  public void update(float delta) {
+    x += delta * getVelocity();
+    layer.setTranslation(x, y);
+    
+    if (x > getWidth() + getMaximumWidth()) {
+      x = -getWidth();
+      y = (float) (Math.random() * getMaximumHeight());
+    }
+  }
+
+  @Override
+  float getWidth() {
+    return 0.3f * 26.0f;
+  }
+
+  @Override
+  float getHeight() {
+    return 0.3f * 18.0f;
+  }
+
+  float getMaximumWidth() {
+    return 24.0f;
+  }
+
+  float getMaximumHeight() {
+    return 3.0f;
+  }
+
+  float getVelocity() {
+    return 0.003f;
+  }
+
+  @Override
+  public void setPos(float x, float y) {
+    this.x = x;
+    this.y = y;
+    layer.setTranslation(x, y);
+  }
+
+  @Override
+  String getImagePath() {
+    return "images/Cloud1.png";
+  }
+
+  @Override
+  public void initPreLoad(PeaWorld peaWorld) {
+    peaWorld.dynamicLayer.add(layer);
+  }
+
+  @Override
+  public void initPostLoad(PeaWorld peaWorld) {
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/Cloud3.java b/sample/peas/core/src/playn/sample/peas/core/entities/Cloud3.java
new file mode 100644
index 0000000..2353f45
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/Cloud3.java
@@ -0,0 +1,22 @@
+package playn.sample.peas.core.entities;
+
+import playn.sample.peas.core.PeaWorld;
+
+public class Cloud3 extends Cloud1 {
+  @SuppressWarnings("hiding")
+  public static String TYPE = "Cloud3";
+
+  public Cloud3(PeaWorld peaWorld) {
+    super(peaWorld);
+  }
+
+  @Override
+  float getVelocity() {
+    return 0.002f;
+  }
+
+  @Override
+  String getImagePath() {
+    return "images/Cloud3.png";
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/DynamicPhysicsEntity.java b/sample/peas/core/src/playn/sample/peas/core/entities/DynamicPhysicsEntity.java
new file mode 100644
index 0000000..114fdfe
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/DynamicPhysicsEntity.java
@@ -0,0 +1,91 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.World;
+
+import playn.sample.peas.core.PeaWorld;
+
+public abstract class DynamicPhysicsEntity extends Entity implements PhysicsEntity {
+  // for calculating interpolation
+  private float prevX, prevY, prevA;
+  private Body body;
+
+  public DynamicPhysicsEntity(PeaWorld peaWorld, World world, float x, float y, float angle) {
+    super(peaWorld, x, y, angle);
+    body = initPhysicsBody(world, x, y, angle);
+    setPos(x, y);
+    setAngle(angle);
+  }
+
+  abstract Body initPhysicsBody(World world, float x, float y, float angle);
+
+  @Override
+  public void paint(float alpha) {
+    // interpolate based on previous state
+    float x = (body.getPosition().x * alpha) + (prevX * (1f - alpha));
+    float y = (body.getPosition().y * alpha) + (prevY * (1f - alpha));
+    float a = (body.getAngle() * alpha) + (prevA * (1f - alpha));
+    layer.setTranslation(x, y);
+    layer.setRotation(a);
+  }
+
+  @Override
+  public void update(float delta) {
+    // store state for interpolation in paint()
+    prevX = body.getPosition().x;
+    prevY = body.getPosition().y;
+    prevA = body.getAngle();
+  }
+
+  public void initPreLoad(final PeaWorld peaWorld) {
+    // attach our layer to the dynamic layer
+    peaWorld.dynamicLayer.add(layer);
+  }
+
+  public void initPostLoad(final PeaWorld peaWorld) {
+  }
+
+  public void setLinearVelocity(float x, float y) {
+    body.setLinearVelocity(new Vec2(x, y));
+  }
+
+  public void setAngularVelocity(float w) {
+    body.setAngularVelocity(w);
+  }
+
+  @Override
+  public void setPos(float x, float y) {
+    super.setPos(x, y);
+    getBody().setTransform(new Vec2(x, y), getBody().getAngle());
+    prevX = x;
+    prevY = y;
+  }
+
+  @Override
+  public void setAngle(float a) {
+    super.setAngle(a);
+    getBody().setTransform(getBody().getPosition(), a);
+    prevA = a;
+  }
+
+  @Override
+  public Body getBody() {
+    return body;
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/Entity.java b/sample/peas/core/src/playn/sample/peas/core/entities/Entity.java
new file mode 100644
index 0000000..65cfeff
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/Entity.java
@@ -0,0 +1,96 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import static playn.core.PlayN.assetManager;
+import static playn.core.PlayN.graphics;
+
+import playn.core.PlayN;
+import playn.core.Image;
+import playn.core.ImageLayer;
+import playn.core.ResourceCallback;
+import playn.sample.peas.core.PeaWorld;
+
+public abstract class Entity {
+  ImageLayer layer;
+  Image image;
+  float x, y, angle;
+
+  public Entity(final PeaWorld peaWorld, float px, float py, float pangle) {
+    this.x = px;
+    this.y = py;
+    this.angle = pangle;
+    image = assetManager().getImage(getImagePath());
+    layer = graphics().createImageLayer(image);
+    initPreLoad(peaWorld);
+    image.addCallback(new ResourceCallback<Image>() {
+      @Override
+      public void done(Image image) {
+        // since the image is loaded, we can use its width and height
+        layer.setWidth(image.width());
+        layer.setHeight(image.height());
+        layer.setOrigin(image.width() / 2f, image.height() / 2f);
+        layer.setScale(getWidth() / image.width(), getHeight() / image.height());
+        layer.setTranslation(x, y);
+        layer.setRotation(angle);
+        initPostLoad(peaWorld);
+      }
+
+      @Override
+      public void error(Throwable err) {
+        PlayN.log().error("Error loading image: " + err.getMessage());
+      }
+    });
+  }
+
+  /**
+   * Perform pre-image load initialization (e.g., attaching to PeaWorld layers).
+   * 
+   * @param peaWorld
+   */
+  public abstract void initPreLoad(final PeaWorld peaWorld);
+
+  /**
+   * Perform post-image load initialization (e.g., attaching to PeaWorld layers).
+   * 
+   * @param peaWorld
+   */
+  public abstract void initPostLoad(final PeaWorld peaWorld);
+
+  public void paint(float alpha) {
+  }
+
+  public void update(float delta) {
+  }
+
+  public void setPos(float x, float y) {
+    layer.setTranslation(x, y);
+  }
+
+  public void setAngle(float a) {
+    layer.setRotation(a);
+  }
+
+  abstract float getWidth();
+
+  abstract float getHeight();
+
+  abstract String getImagePath();
+  
+  public Image getImage() {
+    return image;
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/FakeBlock.java b/sample/peas/core/src/playn/sample/peas/core/entities/FakeBlock.java
new file mode 100644
index 0000000..b8f924b
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/FakeBlock.java
@@ -0,0 +1,64 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import playn.sample.peas.core.PeaWorld;
+
+public class FakeBlock extends Entity {
+  public static String TYPE = "FakeBlock";
+
+  public FakeBlock(PeaWorld peaWorld, float x, float y, float angle) {
+    super(peaWorld, x, y, angle);
+  }
+
+  public void paint(float alpha) {
+  }
+
+  public void update(float delta) {
+  }
+
+  public void setPos(float x, float y) {
+    layer.setTranslation(x, y);
+  }
+
+  public void setAngle(float a) {
+    layer.setRotation(a);
+  }
+
+  @Override
+  float getWidth() {
+    return 2.0f;
+  }
+
+  @Override
+  float getHeight() {
+    return 2.0f;
+  }
+
+  @Override
+  public String getImagePath() {
+    return "images/Block-Normal.png";
+  }
+
+  @Override
+  public void initPreLoad(PeaWorld peaWorld) {
+    peaWorld.staticLayerBack.add(layer);
+  }
+
+  @Override
+  public void initPostLoad(PeaWorld peaWorld) {
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/Pea.java b/sample/peas/core/src/playn/sample/peas/core/entities/Pea.java
new file mode 100644
index 0000000..1259da5
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/Pea.java
@@ -0,0 +1,76 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import org.jbox2d.collision.shapes.CircleShape;
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.BodyDef;
+import org.jbox2d.dynamics.BodyType;
+import org.jbox2d.dynamics.FixtureDef;
+import org.jbox2d.dynamics.World;
+
+import playn.sample.peas.core.PeaWorld;
+
+public class Pea extends DynamicPhysicsEntity {
+  public static String TYPE = "Pea";
+
+  public Pea(PeaWorld peaWorld, World world, float x, float y, float angle) {
+    super(peaWorld, world, x, y, angle);
+  }
+
+  @Override
+  Body initPhysicsBody(World world, float x, float y, float angle) {
+    FixtureDef fixtureDef = new FixtureDef();
+    BodyDef bodyDef = new BodyDef();
+    bodyDef.type = BodyType.DYNAMIC;
+    bodyDef.position = new Vec2(0, 0);
+    Body body = world.createBody(bodyDef);
+
+    CircleShape circleShape = new CircleShape();
+    circleShape.m_radius = getRadius();
+    fixtureDef.shape = circleShape;
+    fixtureDef.density = 0.4f;
+    fixtureDef.friction = 0.1f;
+    fixtureDef.restitution = 0.35f;
+    circleShape.m_p.set(0, 0);
+    body.createFixture(fixtureDef);
+    body.setLinearDamping(0.2f);
+    body.setTransform(new Vec2(x, y), angle);
+    return body;
+  }
+
+  @Override
+  float getWidth() {
+    return 2 * getRadius();
+  }
+
+  @Override
+  float getHeight() {
+    return 2 * getRadius();
+  }
+
+  float getRadius() {
+    //return 1.50f;
+    return 0.5f;
+  }
+
+  @Override
+  public String getImagePath() {
+    //return "images/chrome.png";
+    return "images/pea.png";
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/PhysicsEntity.java b/sample/peas/core/src/playn/sample/peas/core/entities/PhysicsEntity.java
new file mode 100644
index 0000000..0a470de
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/PhysicsEntity.java
@@ -0,0 +1,27 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import org.jbox2d.dynamics.Body;
+
+public interface PhysicsEntity {
+  
+  public Body getBody();
+  
+  public interface HasContactListener {
+    public void contact(PhysicsEntity other);
+  }
+}
\ No newline at end of file
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/Portal.java b/sample/peas/core/src/playn/sample/peas/core/entities/Portal.java
new file mode 100644
index 0000000..5cc8f00
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/Portal.java
@@ -0,0 +1,140 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import org.jbox2d.collision.shapes.PolygonShape;
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.BodyDef;
+import org.jbox2d.dynamics.BodyType;
+import org.jbox2d.dynamics.FixtureDef;
+import org.jbox2d.dynamics.World;
+
+import playn.sample.peas.core.PeaWorld;
+
+public class Portal extends StaticPhysicsEntity implements PhysicsEntity.HasContactListener {
+  public static String TYPE = "Portal";
+
+  public Portal other = null;
+  
+  private static int maxHysteresis = 10;
+  private static int hysteresis = 0;
+
+  public Portal(PeaWorld peaWorld, World world, float x, float y, float angle) {
+    super(peaWorld, world, x, y, angle);
+  }
+
+  @Override
+  Body initPhysicsBody(World world, float x, float y, float angle) {
+    FixtureDef fixtureDef = new FixtureDef();
+    BodyDef bodyDef = new BodyDef();
+    bodyDef.type = BodyType.STATIC;
+    bodyDef.position = new Vec2(0, 0);
+    Body body = world.createBody(bodyDef);
+
+    // height of the portal contact box
+    float boxHeight = getHeight() / 12f;
+    float boxWidth = getWidth() * 0.75f;
+    PolygonShape polygonShape = new PolygonShape();
+    Vec2[] polygon = new Vec2[4];
+    polygon[0] = new Vec2(-boxWidth/2f, getHeight()/2f - boxHeight);
+    polygon[1] = new Vec2(boxWidth/2f, getHeight()/2f - boxHeight);
+    polygon[2] = new Vec2(boxWidth/2f, getHeight()/2f);
+    polygon[3] = new Vec2(-boxWidth/2f, getHeight()/2f);
+    polygonShape.set(polygon, polygon.length);
+    fixtureDef.shape = polygonShape;
+    fixtureDef.friction = 0.1f;
+    fixtureDef.restitution = 0.8f;
+    body.createFixture(fixtureDef);
+    body.setTransform(new Vec2(x, y), angle);
+    return body;
+  }
+
+  @Override
+  public void initPostLoad(final PeaWorld peaWorld) {
+    layer.setRotation(0f); // total hack so we can portal horizontally but not rotate the image
+    peaWorld.staticLayerFront.add(layer);
+  }
+
+  @Override
+  float getWidth() {
+    return 2.0f;
+  }
+
+  @Override
+  float getHeight() {
+    return 2.0f;
+  }
+
+  /**
+   * Return the size of the offset where the block is slightly lower than where
+   * the image is drawn for a depth effect
+   */
+  public float getTopOffset() {
+    return 2.0f / 8f;
+  }
+
+  @Override
+  public String getImagePath() {
+    return "images/teleport.png";
+  }
+
+  @Override
+  public void update(float delta) {
+    super.update(delta);
+    if (hysteresis > 0) {
+      hysteresis--;
+    }
+  }
+
+  // Handle portal event
+  @Override
+  public void contact(PhysicsEntity contactEntity) {
+    // keep a counter to prevent another portal event until a timeout
+    if (hysteresis > 0) {
+      return; // do not perform another portal event until hysteresis frames have passed
+    } else {
+      hysteresis = maxHysteresis;
+    }
+    Vec2 pos = contactEntity.getBody().getPosition();
+    float ang = contactEntity.getBody().getAngle();
+    Vec2 vel = contactEntity.getBody().getLinearVelocity();
+    
+    Vec2 posDiff = pos.sub(getBody().getPosition());
+    float angDiff = other.getBody().getAngle() - getBody().getAngle();
+    
+    Vec2 newPos = rotate(posDiff, angDiff).add(other.getBody().getPosition());
+    float newAng = ang + angDiff;
+    if (contactEntity instanceof DynamicPhysicsEntity) {
+      DynamicPhysicsEntity dynamic = (DynamicPhysicsEntity) contactEntity;
+      dynamic.setPos(newPos.x, newPos.y);
+      dynamic.setAngle(newAng);
+    } else {
+      contactEntity.getBody().setTransform(newPos, newAng);
+    }
+    Vec2 newVel = rotate(vel, angDiff);
+    contactEntity.getBody().setLinearVelocity(newVel);
+  }
+
+  private Vec2 rotate(Vec2 vec, float theta) {
+    Vec2 ret = new Vec2();
+    float cTheta = (float)Math.cos(theta);
+    float sTheta = (float)Math.sin(theta);
+    ret.x = vec.x * cTheta - vec.y * sTheta;
+    ret.y = vec.x * sTheta + vec.y * cTheta;
+    return ret;
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/core/entities/StaticPhysicsEntity.java b/sample/peas/core/src/playn/sample/peas/core/entities/StaticPhysicsEntity.java
new file mode 100644
index 0000000..06cc41d
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/core/entities/StaticPhysicsEntity.java
@@ -0,0 +1,62 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.core.entities;
+
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.World;
+
+import playn.sample.peas.core.PeaWorld;
+
+public abstract class StaticPhysicsEntity extends Entity implements PhysicsEntity {
+  private Body body;
+  
+  public StaticPhysicsEntity(final PeaWorld peaWorld, World world, float x, float y, float angle) {
+    super(peaWorld, x, y, angle);
+    body = initPhysicsBody(world, x, y, angle);
+  }
+
+  abstract Body initPhysicsBody(World world, float x, float y, float angle);
+
+  @Override
+  public void paint(float alpha) {
+  }
+
+  @Override
+  public void update(float delta) {
+  }
+
+  public void initPreLoad(final PeaWorld peaWorld) {
+  }
+
+  public void initPostLoad(final PeaWorld peaWorld) {
+    peaWorld.staticLayerBack.add(layer);
+  }
+
+  @Override
+  public void setPos(float x, float y) {
+    throw new RuntimeException("Error setting position on static entity");
+  }
+
+  @Override
+  public void setAngle(float a) {
+    throw new RuntimeException("Error setting angle on static entity");
+  }
+
+  @Override
+  public Body getBody() {
+    return body;
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/flash/PeasFlash.java b/sample/peas/core/src/playn/sample/peas/flash/PeasFlash.java
new file mode 100644
index 0000000..cb08c65
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/flash/PeasFlash.java
@@ -0,0 +1,33 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.flash;
+
+import playn.flash.FlashAssetManager;
+
+import playn.core.PlayN;
+import playn.flash.FlashGame;
+import playn.flash.FlashPlatform;
+import playn.sample.peas.core.Peas;
+
+public class PeasFlash extends FlashGame {
+
+  @Override
+  public void start() {
+    FlashAssetManager assets = FlashPlatform.register().assetManager();
+    assets.setPathPrefix("peasflash/");
+    PlayN.run(new Peas());
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/html/PeasHtml.java b/sample/peas/core/src/playn/sample/peas/html/PeasHtml.java
new file mode 100644
index 0000000..38579c5
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/html/PeasHtml.java
@@ -0,0 +1,33 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.html;
+
+import playn.html.HtmlAssetManager;
+
+import playn.core.PlayN;
+import playn.html.HtmlGame;
+import playn.html.HtmlPlatform;
+import playn.sample.peas.core.Peas;
+
+public class PeasHtml extends HtmlGame {
+
+  @Override
+  public void start() {
+    HtmlAssetManager assets = HtmlPlatform.register().assetManager();
+    assets.setPathPrefix("peas/");
+    PlayN.run(new Peas());
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/java/PeasJava.java b/sample/peas/core/src/playn/sample/peas/java/PeasJava.java
new file mode 100644
index 0000000..7b088fd
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/java/PeasJava.java
@@ -0,0 +1,30 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.peas.java;
+
+import playn.core.PlayN;
+import playn.java.JavaAssetManager;
+import playn.java.JavaPlatform;
+import playn.sample.peas.core.Peas;
+
+public class PeasJava {
+
+  public static void main(String[] args) {
+    JavaAssetManager assets = JavaPlatform.register().assetManager();
+    assets.setPathPrefix("src/playn/sample/peas/resources");
+    PlayN.run(new Peas());
+  }
+}
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/Block-Gel.png b/sample/peas/core/src/playn/sample/peas/resources/images/Block-Gel.png
new file mode 100644
index 0000000..1a79adf
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/Block-Gel.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/Block-LeftRamp.png b/sample/peas/core/src/playn/sample/peas/resources/images/Block-LeftRamp.png
new file mode 100644
index 0000000..4c6d699
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/Block-LeftRamp.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/Block-Normal.png b/sample/peas/core/src/playn/sample/peas/resources/images/Block-Normal.png
new file mode 100644
index 0000000..0795b95
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/Block-Normal.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/Block-RightRamp.png b/sample/peas/core/src/playn/sample/peas/resources/images/Block-RightRamp.png
new file mode 100644
index 0000000..4386754
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/Block-RightRamp.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/Block-Spring.png b/sample/peas/core/src/playn/sample/peas/resources/images/Block-Spring.png
new file mode 100644
index 0000000..a4f7a9c
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/Block-Spring.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/Cloud1.png b/sample/peas/core/src/playn/sample/peas/resources/images/Cloud1.png
new file mode 100644
index 0000000..ab4146e
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/Cloud1.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/Cloud3.png b/sample/peas/core/src/playn/sample/peas/resources/images/Cloud3.png
new file mode 100644
index 0000000..f87816a
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/Cloud3.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/bg.png b/sample/peas/core/src/playn/sample/peas/resources/images/bg.png
new file mode 100644
index 0000000..919c57b
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/bg.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/chrome.png b/sample/peas/core/src/playn/sample/peas/resources/images/chrome.png
new file mode 100644
index 0000000..a3cf26c
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/chrome.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/pea.png b/sample/peas/core/src/playn/sample/peas/resources/images/pea.png
new file mode 100644
index 0000000..dae99e4
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/pea.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/peaglow.png b/sample/peas/core/src/playn/sample/peas/resources/images/peaglow.png
new file mode 100644
index 0000000..a97d294
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/peaglow.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/images/teleport.png b/sample/peas/core/src/playn/sample/peas/resources/images/teleport.png
new file mode 100644
index 0000000..5949c21
Binary files /dev/null and b/sample/peas/core/src/playn/sample/peas/resources/images/teleport.png differ
diff --git a/sample/peas/core/src/playn/sample/peas/resources/levels/level1.json b/sample/peas/core/src/playn/sample/peas/resources/levels/level1.json
new file mode 100644
index 0000000..fcf3efe
--- /dev/null
+++ b/sample/peas/core/src/playn/sample/peas/resources/levels/level1.json
@@ -0,0 +1,57 @@
+{
+  "id": "level1",
+  "Entities": [
+    {"type": "Cloud1", "x": 1.0, "y": 1.00, "a": 0.0},
+    {"type": "Cloud3", "x": 14.0, "y": 2.00, "a": 0.0},
+
+    {"type": "Block", "x": 1.0, "y": 17.00, "a": 0.0},
+    {"type": "Block", "x": 1.0, "y": 15.25, "a": 0.0},
+    {"type": "Block", "x": 1.0, "y": 13.50, "a": 0.0},
+    {"type": "Block", "x": 1.0, "y": 11.75, "a": 0.0},
+    {"type": "Block", "x": 1.0, "y": 10.00, "a": 0.0},
+    {"type": "Block", "x": 1.0, "y":  8.25, "a": 0.0},
+    {"type": "Block", "x": 1.0, "y":  6.50, "a": 0.0},
+    
+    {"type": "FakeBlock", "x": 3.0, "y": 17.00, "a": 0.0},
+    {"type": "Portal", "x": 3.0, "y": 17.00, "a": 0.0},
+    
+    {"type": "Block", "x": 5.0, "y": 17.00, "a": 0.0},
+    {"type": "Block", "x": 5.0, "y": 15.25, "a": 0.0},
+    {"type": "BlockLeftRamp", "x": 5.0, "y": 13.50, "a": 0.0},
+    
+    {"type": "Block", "x": 7.0, "y": 17.00, "a": 0.0},
+    {"type": "Block", "x": 7.0, "y": 15.25, "a": 0.0},
+    {"type": "Block", "x": 7.0, "y": 13.50, "a": 0.0},
+    {"type": "Block", "x": 7.0, "y":  6.50, "a": 0.0},
+    {"type": "Block", "x": 7.0, "y":  4.75, "a": 0.0},
+    
+    {"type": "Block", "x": 9.0, "y": 17.00, "a": 0.0},
+    {"type": "Block", "x": 9.0, "y": 15.25, "a": 0.0},
+    {"type": "BlockRightRamp", "x": 9.0, "y": 13.50, "a": 0.0},
+    {"type": "FakeBlock", "x": 9.0, "y":  6.50, "a": 0.0},
+    {"type": "Portal", "x": 9.0, "y":  6.50, "a": 1.5},
+    {"type": "Block", "x": 9.0, "y":  4.75, "a": 0.0},
+    
+    {"type": "Block", "x": 11.0, "y": 17.00, "a": 0.0},
+    {"type": "BlockSpring", "x": 11.0, "y": 15.25, "a": 0.0},
+    
+    {"type": "BlockGel", "x": 13.0, "y": 17.00, "a": 0.0},
+    
+    {"type": "BlockGel", "x": 15.0, "y": 17.00, "a": 0.0},
+    {"type": "Block", "x": 15.0, "y": 10.00, "a": 0.0},
+    
+    {"type": "Block", "x": 17.0, "y": 17.00, "a": 0.0},
+    {"type": "BlockGel", "x": 17.0, "y": 10.00, "a": 0.0},
+    
+    {"type": "Block", "x": 19.0, "y": 17.00, "a": 0.0}, 
+    
+    {"type": "Block", "x": 21.0, "y": 17.00, "a": 0.0},
+    
+    {"type": "Block", "x": 23.0, "y": 17.00, "a": 0.0},
+    {"type": "Block", "x": 23.0, "y": 15.25, "a": 0.0},
+    {"type": "Block", "x": 23.0, "y": 13.50, "a": 0.0},
+    {"type": "Block", "x": 23.0, "y": 11.75, "a": 0.0},
+    {"type": "BlockRightRamp", "x": 23.0, "y": 10.0, "a": 0.0},
+    {"type": "Pea", "x": 23.0, "y": 9.5, "a": 0.5}
+  ]
+}
diff --git a/sample/peas/core/war/.gitignore b/sample/peas/core/war/.gitignore
new file mode 100644
index 0000000..d60a0dd
--- /dev/null
+++ b/sample/peas/core/war/.gitignore
@@ -0,0 +1,2 @@
+peas
+peasflash
diff --git a/sample/peas/core/war/Peas.html b/sample/peas/core/war/Peas.html
new file mode 100644
index 0000000..92fd72c
--- /dev/null
+++ b/sample/peas/core/war/Peas.html
@@ -0,0 +1,24 @@
+<!--
+ * Copyright 2011 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<!DOCTYPE html>
+<html>
+  <head>
+    <title>Peas</title>
+  </head>
+  <body bgcolor='black'>
+    <script src="peas/peas.nocache.js"></script>
+  </body>
+</html>
diff --git a/sample/peas/core/war/PeasFlash.html b/sample/peas/core/war/PeasFlash.html
new file mode 100644
index 0000000..534ab84
--- /dev/null
+++ b/sample/peas/core/war/PeasFlash.html
@@ -0,0 +1,25 @@
+<!--
+ * Copyright 2011 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<!DOCTYPE html>
+<html>
+  <head>
+    <title>Peas</title>
+  </head>
+  <body bgcolor='black'>
+    <div id='flash_player'></div>
+    <script src="peasflash/peasflash.nocache.js"></script>
+  </body>
+</html>
diff --git a/sample/peas/core/war/WEB-INF/.gitignore b/sample/peas/core/war/WEB-INF/.gitignore
new file mode 100644
index 0000000..f3b3621
--- /dev/null
+++ b/sample/peas/core/war/WEB-INF/.gitignore
@@ -0,0 +1,3 @@
+classes
+deploy
+lib
diff --git a/sample/peas/core/war/WEB-INF/appengine-web.xml b/sample/peas/core/war/WEB-INF/appengine-web.xml
new file mode 100644
index 0000000..4b1abb6
--- /dev/null
+++ b/sample/peas/core/war/WEB-INF/appengine-web.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<appengine-web-app xmlns="http://appengine.google.com/ns/1.0">
+  <application>playn-peas-sample</application>
+  <version>1</version>
+
+  <!-- Configure serving/caching of GWT files -->
+  <static-files>
+    <include path="**" />
+
+    <!-- The following line requires App Engine 1.3.2 SDK -->
+    <include path="**.nocache.*" expiration="0s" />
+
+    <include path="**.cache.*" expiration="365d" />
+    <exclude path="**.gwt.rpc" />
+  </static-files>
+
+  <!-- Configure java.util.logging -->
+  <system-properties>
+    <property name="java.util.logging.config.file" value="WEB-INF/logging.properties"/>
+  </system-properties>
+
+</appengine-web-app>
\ No newline at end of file
diff --git a/sample/peas/core/war/WEB-INF/web.xml b/sample/peas/core/war/WEB-INF/web.xml
new file mode 100644
index 0000000..d6b8582
--- /dev/null
+++ b/sample/peas/core/war/WEB-INF/web.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+xmlns="http://java.sun.com/xml/ns/javaee"
+xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
+xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
+http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
+	<!-- TODO: Add <servlet> tags for each servlet here. -->
+	<!-- TODO: Add <servlet-mapping> tags for each <servlet> here. -->
+	<!-- TODO: Optionally add a <welcome-file-list> tag to display a welcome file. -->
+	<welcome-file-list>
+	  <welcome-file>Peas.html</welcome-file>
+	</welcome-file-list>
+</web-app>
diff --git a/sample/peas/flash/pom.xml b/sample/peas/flash/pom.xml
new file mode 100755
index 0000000..38255b1
--- /dev/null
+++ b/sample/peas/flash/pom.xml
@@ -0,0 +1,118 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>com.googlecode.playn</groupId>
+    <artifactId>playn-demos</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <relativePath>../../pom.xml</relativePath>
+  </parent>
+
+  <artifactId>playn-peaphysics-flash</artifactId>
+  <name>PlayN Peas Flash Sample</name>
+  <packaging>war</packaging>
+
+  <properties>
+    <gwt.module>playn.sample.peas.PeasFlash</gwt.module>
+    <gwt.name>peasflash</gwt.name>
+  </properties>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.google.gwt</groupId>
+      <artifactId>gwt-dev</artifactId>
+      <version>${gwtversion}</version>
+      <scope>test</scope>
+    </dependency>
+
+    <dependency>
+      <groupId>com.googlecode.playn</groupId>
+      <artifactId>core</artifactId>
+      <version>${coreversion}</version>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <sourceDirectory>../core/src</sourceDirectory>
+
+    <plugins>
+    <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-war-plugin</artifactId>
+        <version>2.1.1</version>
+        <configuration>
+	  <warSourceDirectory>../core/war</warSourceDirectory>
+        </configuration>
+      </plugin>
+
+      <!-- download and unpack flex4sdk -->
+      <plugin>
+         <groupId>org.apache.maven.plugins</groupId>
+         <artifactId>maven-dependency-plugin</artifactId>
+         <version>2.2</version>
+         <executions>
+           <execution>
+             <id>unpack</id>
+             <phase>validate</phase>
+             <goals>
+               <goal>unpack</goal>
+             </goals>
+             <configuration>
+               <artifactItems>
+                 <artifactItem>
+                   <groupId>com.adobe.flex</groupId>
+                   <artifactId>flex-sdk</artifactId>
+                   <version>4.1.0.16076_mpl</version>
+                   <type>zip</type>
+                   <overWrite>false</overWrite>
+                   <outputDirectory>${project.build.directory}/flex4sdk</outputDirectory>
+                 </artifactItem>
+               </artifactItems>
+             </configuration>
+           </execution>
+         </executions>
+       </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-antrun-plugin</artifactId>
+        <executions>
+          <execution>
+            <phase>validate</phase>
+            <goals>
+              <goal>run</goal>
+            </goals>
+            <configuration>
+              <tasks>
+                <!-- Dependency plugin discards file permissions so we need to set them back manually -->
+                <chmod file="${project.build.directory}/flex4sdk/bin/mxmlc" perm="ugo+rx"/>
+	     </tasks>
+            </configuration>
+          </execution>
+        </executions>
+      </plugin>
+
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>gwt-maven-plugin</artifactId>
+	<configuration>
+	  <extraJvmArgs>-Dflexsdk.home=${project.build.directory}/flex4sdk</extraJvmArgs>
+	</configuration>
+      </plugin>
+
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-source-plugin</artifactId>
+      </plugin>
+    </plugins>
+    <resources>
+      <resource>
+        <directory>../core/src</directory>
+      </resource>
+      <resource>
+        <directory>../core/war/WEB-INF/classes</directory>
+      </resource>
+    </resources>
+  </build>
+</project>
diff --git a/sample/playn-demos.iml b/sample/playn-demos.iml
deleted file mode 100644
index a22c133..0000000
--- a/sample/playn-demos.iml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="gwt" name="GWT">
-      <configuration />
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_6" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/target/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/target" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.8.1" level="project" />
-  </component>
-</module>
-
diff --git a/sample/pom.xml b/sample/pom.xml
index c74a049..19f0001 100644
--- a/sample/pom.xml
+++ b/sample/pom.xml
@@ -15,13 +15,10 @@
 
   <modules>
     <module>hello</module>
-    <module>showcase</module>
     <module>cute</module>
     <module>peas/core</module>
-    <module>peas/flash</module>
 <!-- disabled until we can fix the m2eclipse errors caused by this pom
-
+    <module>peas/flash</module>
 -->
-
   </modules>
 </project>
diff --git a/sample/showcase/android/.gitignore b/sample/showcase/android/.gitignore
deleted file mode 100644
index ddb0a2d..0000000
--- a/sample/showcase/android/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-bin
-.settings
diff --git a/sample/showcase/android/AndroidManifest.xml b/sample/showcase/android/AndroidManifest.xml
deleted file mode 100644
index 62ec903..0000000
--- a/sample/showcase/android/AndroidManifest.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="playn.showcase.android"
-      android:screenOrientation="landscape"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="6" android:targetSdkVersion="11" />
-    <uses-permission android:name="android.permission.WAKE_LOCK" />
-    <application android:icon="@drawable/icon" android:label="@string/app_name" android:debuggable="true">
-        <activity android:name="ShowcaseActivity"
-                  android:label="@string/app_name"
-                  android:theme="@android:style/Theme.NoTitleBar.Fullscreen"
-                  android:configChanges="keyboardHidden|orientation">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-
-    </application>
-
-
-</manifest> 
diff --git a/sample/showcase/android/default.properties b/sample/showcase/android/default.properties
deleted file mode 100644
index 370331f..0000000
--- a/sample/showcase/android/default.properties
+++ /dev/null
@@ -1,12 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system use,
-# "build.properties", and override values to adapt the script to your
-# project structure.
-
-# Project target.
-target=android-11
-android.library.reference.1=../../../android
diff --git a/sample/showcase/android/pom.xml b/sample/showcase/android/pom.xml
deleted file mode 100644
index c35e1f4..0000000
--- a/sample/showcase/android/pom.xml
+++ /dev/null
@@ -1,59 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.googlecode.playn</groupId>
-    <artifactId>playn-showcase</artifactId>
-    <version>1.0-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>playn-showcase-android</artifactId>
-  <name>PlayN Showcase Android</name>
-  <packaging>apk</packaging>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-showcase-core</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-android</artifactId>
-      <version>${coreversion}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <version>2.3.3</version>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <sourceDirectory>src</sourceDirectory>
-
-    <plugins>
-      <plugin>
-        <groupId>com.jayway.maven.plugins.android.generation2</groupId>
-        <artifactId>maven-android-plugin</artifactId>
-        <version>3.0.0-alpha-2</version>
-        <configuration>
-          <androidManifestFile>${project.basedir}/AndroidManifest.xml</androidManifestFile>
-          <assetsDirectory>${project.basedir}/assets</assetsDirectory>
-          <resourceDirectory>${project.basedir}/res</resourceDirectory>
-          <sdk>
-            <platform>11</platform>
-          </sdk>
-          <deleteConflictingFiles>true</deleteConflictingFiles>
-          <undeployBeforeDeploy>true</undeployBeforeDeploy>
-        </configuration>
-        <extensions>true</extensions>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/sample/showcase/android/proguard.cfg b/sample/showcase/android/proguard.cfg
deleted file mode 100644
index 8ad7d33..0000000
--- a/sample/showcase/android/proguard.cfg
+++ /dev/null
@@ -1,34 +0,0 @@
--optimizationpasses 5
--dontusemixedcaseclassnames
--dontskipnonpubliclibraryclasses
--dontpreverify
--verbose
--optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
-
--keep public class * extends android.app.Activity
--keep public class * extends android.app.Application
--keep public class * extends android.app.Service
--keep public class * extends android.content.BroadcastReceiver
--keep public class * extends android.content.ContentProvider
--keep public class com.android.vending.licensing.ILicensingService
-
--keepclasseswithmembernames class * {
-    native <methods>;
-}
-
--keepclasseswithmembernames class * {
-    public <init>(android.content.Context, android.util.AttributeSet);
-}
-
--keepclasseswithmembernames class * {
-    public <init>(android.content.Context, android.util.AttributeSet, int);
-}
-
--keepclassmembers enum * {
-    public static **[] values();
-    public static ** valueOf(java.lang.String);
-}
-
--keep class * implements android.os.Parcelable {
-  public static final android.os.Parcelable$Creator *;
-}
diff --git a/sample/showcase/android/res/drawable-hdpi/icon.png b/sample/showcase/android/res/drawable-hdpi/icon.png
deleted file mode 100644
index 5801ed0..0000000
Binary files a/sample/showcase/android/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/sample/showcase/android/res/drawable-ldpi/icon.png b/sample/showcase/android/res/drawable-ldpi/icon.png
deleted file mode 100644
index bd0e62f..0000000
Binary files a/sample/showcase/android/res/drawable-ldpi/icon.png and /dev/null differ
diff --git a/sample/showcase/android/res/drawable-mdpi/icon.png b/sample/showcase/android/res/drawable-mdpi/icon.png
deleted file mode 100644
index dbf9396..0000000
Binary files a/sample/showcase/android/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/sample/showcase/android/res/values/strings.xml b/sample/showcase/android/res/values/strings.xml
deleted file mode 100644
index 8fa2cea..0000000
--- a/sample/showcase/android/res/values/strings.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <string name="app_name">Showcase</string>
-</resources>
diff --git a/sample/showcase/android/showcase-android.launch b/sample/showcase/android/showcase-android.launch
deleted file mode 100644
index a4dad36..0000000
--- a/sample/showcase/android/showcase-android.launch
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<launchConfiguration type="com.android.ide.eclipse.adt.debug.LaunchConfigType">
-<intAttribute key="com.android.ide.eclipse.adt.action" value="0"/>
-<stringAttribute key="com.android.ide.eclipse.adt.commandline" value=""/>
-<intAttribute key="com.android.ide.eclipse.adt.delay" value="0"/>
-<booleanAttribute key="com.android.ide.eclipse.adt.nobootanim" value="false"/>
-<intAttribute key="com.android.ide.eclipse.adt.speed" value="0"/>
-<booleanAttribute key="com.android.ide.eclipse.adt.target" value="false"/>
-<booleanAttribute key="com.android.ide.eclipse.adt.wipedata" value="false"/>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
-<listEntry value="/showcase-android"/>
-<listEntry value="/showcase-android/AndroidManifest.xml"/>
-</listAttribute>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
-<listEntry value="4"/>
-<listEntry value="1"/>
-</listAttribute>
-<booleanAttribute key="org.eclipse.jdt.launching.ALLOW_TERMINATE" value="true"/>
-<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="showcase-android"/>
-</launchConfiguration>
diff --git a/sample/showcase/android/src/playn/showcase/android/ShowcaseActivity.java b/sample/showcase/android/src/playn/showcase/android/ShowcaseActivity.java
deleted file mode 100644
index 99542b6..0000000
--- a/sample/showcase/android/src/playn/showcase/android/ShowcaseActivity.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/**
- * Copyright 2010 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.android;
-
-import playn.android.GameActivity;
-import playn.core.PlayN;
-import playn.showcase.core.Showcase;
-
-public class ShowcaseActivity extends GameActivity {
-
-  @Override
-  public void main(){
-    platform().assetManager().setPathPrefix("playn/showcase/resources");
-    PlayN.run(new Showcase());
-  }
-}
diff --git a/sample/showcase/build.xml b/sample/showcase/build.xml
deleted file mode 100644
index 715ae4b..0000000
--- a/sample/showcase/build.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<project name="showcase" default="compile">
-  <property name="java.classname" value="playn.showcase.java.ShowcaseJava"/>
-  <property name="html.classname" value="playn.showcase.Showcase"/>
-  <property name="html.index" value="Showcase.html"/>
-  <import file="../build-common.xml"/>
-</project>
diff --git a/sample/showcase/core/.gitignore b/sample/showcase/core/.gitignore
deleted file mode 100644
index 1ca7a5b..0000000
--- a/sample/showcase/core/.gitignore
+++ /dev/null
@@ -1,4 +0,0 @@
-bin
-.settings
-war/showcase
-war/showcaseflash
diff --git a/sample/showcase/core/build.xml b/sample/showcase/core/build.xml
deleted file mode 100644
index 02e966a..0000000
--- a/sample/showcase/core/build.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<project name="showcase" default="compile">
-  <property name="java.classname" value="playn.showcase.java.ShowcaseJava"/>
-  <property name="html.classname" value="playn.showcase.Showcase"/>
-  <property name="html.index" value="Showcase.html"/>
-  <import file="../../build-common.xml"/>
-</project>
diff --git a/sample/showcase/core/pom.xml b/sample/showcase/core/pom.xml
deleted file mode 100644
index 09c489a..0000000
--- a/sample/showcase/core/pom.xml
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.googlecode.playn</groupId>
-    <artifactId>playn-showcase</artifactId>
-    <version>1.0-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>playn-showcase-core</artifactId>
-  <name>PlayN Showcase Core</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-jbox2d</artifactId>
-      <version>${coreversion}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-java</artifactId>
-      <version>${coreversion}</version>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <sourceDirectory>src</sourceDirectory>
-
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-source-plugin</artifactId>
-      </plugin>
-    </plugins>
-
-    <resources>
-      <resource>
-        <directory>${basedir}/src</directory>
-      </resource>
-    </resources>
-  </build>
-</project>
diff --git a/sample/showcase/core/src/playn/showcase/core/Demo.java b/sample/showcase/core/src/playn/showcase/core/Demo.java
deleted file mode 100644
index 1b42d92..0000000
--- a/sample/showcase/core/src/playn/showcase/core/Demo.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core;
-
-import playn.core.Game;
-import playn.core.Keyboard;
-
-/**
- * Demonstrates a particular PlayN feature or set of features. This interface is kind of like
- * {@link Game} except that it has lifecycle methods for cleaning up as well as initializing. Demos
- * also all share a predefined update rate (25 fps).
- */
-public abstract class Demo
-{
-  /**
-   * Returns the name of this demo.
-   */
-  public abstract String name();
-
-  /**
-   * Initializes this demo. Here is where listeners should be wired up and resources loaded.
-   */
-  public abstract void init();
-
-  /**
-   * Shuts down this demo. Listeners should be cleared and resources destroyed.
-   */
-  public abstract void shutdown();
-
-  /**
-   * Called every update tick while this demo is active.
-   * @param delta the amount of time that has elapsed since the last update call.
-   */
-  public void update(float delta) {
-  }
-
-  /**
-   * Called while this demo is active, to paint the demo.
-   * @param alpha a value in the range [0,1) that represents the fraction of the update tick that
-   * has elapsed since the last call to update.
-   */
-  public void paint(float alpha) {
-  }
-
-  /**
-   * Because the showcase uses a few keys to move between demos, a demo must not register a
-   * keyboard listener directly, but instead return its listener from this method. This allows the
-   * showcase to intercept the keys it needs and to pass on other key events to the demo.
-   */
-  public Keyboard.Listener keyboardListener() {
-    return null;
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/Menu.java b/sample/showcase/core/src/playn/showcase/core/Menu.java
deleted file mode 100644
index 1d9342b..0000000
--- a/sample/showcase/core/src/playn/showcase/core/Menu.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/**
- * Copyright 2011 The ForPlay Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core;
-
-import playn.core.CanvasLayer;
-import playn.core.GroupLayer;
-import playn.core.Keyboard;
-
-import static playn.core.PlayN.*;
-
-/**
- * A demo that displays a menu of the available demos.
- */
-public class Menu extends Demo
-{
-  private final Keyboard.Listener keyListener = new Keyboard.Adapter() {
-    public void onKeyDown(Keyboard.Event event) {
-      // TODO: use proper key codes
-      int keyCode = event.keyCode();
-      int demoIndex = keyCode - '1';
-      if (demoIndex >= 0 && demoIndex < showcase.demos.size()) {
-        showcase.activateDemo(showcase.demos.get(demoIndex));
-      }
-    }
-  };
-
-  private final Showcase showcase;
-
-  private GroupLayer layer;
-
-  public Menu (Showcase showcase) {
-    this.showcase = showcase;
-  }
-
-  @Override
-  public String name() {
-    return "Menu";
-  }
-
-  @Override
-  public void init() {
-    layer = graphics().createGroupLayer();
-    graphics().rootLayer().add(layer);
-
-    int width = graphics().width(), height = graphics().height();
-    CanvasLayer bg = graphics().createCanvasLayer(width, height);
-    bg.canvas().setFillColor(0xFF99CCFF);
-    bg.canvas().fillRect(0, 0, width, height);
-
-    // draw a primitive menu
-    bg.canvas().setFillColor(0xFF000000);
-    float ypos = 25;
-    bg.canvas().drawText("PlayN Demos:", 25, ypos);
-    ypos += 25;
-
-    int key = 1;
-    for (Demo demo : showcase.demos) {
-      bg.canvas().drawText(key++ + " - " + demo.name(), 25, ypos);
-      ypos += 25;
-    }
-    ypos += 25;
-    bg.canvas().drawText("Press # key to run demo, ESC key to return to menu from demo", 25, ypos);
-
-    layer.add(bg);
-  }
-
-  @Override
-  public void shutdown() {
-    layer.destroy();
-    layer = null;
-  }
-
-  @Override
-  public void update(float delta) {
-  }
-
-  @Override
-  public void paint(float alpha) {
-  }
-
-  @Override
-  public Keyboard.Listener keyboardListener() {
-    return keyListener;
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/Showcase.java b/sample/showcase/core/src/playn/showcase/core/Showcase.java
deleted file mode 100644
index f603b6c..0000000
--- a/sample/showcase/core/src/playn/showcase/core/Showcase.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import playn.core.Game;
-import playn.core.Keyboard;
-import playn.core.PlayN;
-
-import playn.showcase.core.peas.PeasDemo;
-import playn.showcase.core.snake.SnakeDemo;
-import playn.showcase.core.sprites.SpritesDemo;
-import playn.showcase.core.swirl.SwirlDemo;
-
-/**
- * The main entry point for the showcase "game".
- */
-public class Showcase implements Game
-{
-  private Demo activeDemo;
-  private Demo menuDemo = new Menu(this);
-
-  public List<Demo> demos = new ArrayList<Demo>(); {
-    // add your demo here to enable it in the showcase
-    demos.add(new SpritesDemo());
-    demos.add(new PeasDemo());
-    demos.add(new SwirlDemo());
-    demos.add(new SnakeDemo());
-  }
-
-  public void activateDemo(Demo demo) {
-    if (activeDemo != null) {
-      activeDemo.shutdown();
-    }
-    activeDemo = demo;
-    activeDemo.init();
-  }
-
-  @Override
-  public void init() {
-    PlayN.keyboard().setListener(new Keyboard.Adapter() {
-      public void onKeyDown(Keyboard.Event event) {
-        if (event.keyCode() == Keyboard.KEY_ESC) {
-          activateDemo(menuDemo);
-        } else {
-          Keyboard.Listener delegate = activeDemo.keyboardListener();
-          if (delegate != null) {
-            delegate.onKeyDown(event);
-          }
-        }
-      }
-
-      public void onKeyUp(Keyboard.Event event) {
-        Keyboard.Listener delegate = activeDemo.keyboardListener();
-        if (delegate != null) {
-          delegate.onKeyUp(event);
-        }
-      }
-    });
-
-    activateDemo(menuDemo);
-  }
-
-  @Override
-  public void update(float delta) {
-    activeDemo.update(delta);
-  }
-
-  @Override
-  public void paint(float alpha) {
-    activeDemo.paint(alpha);
-  }
-
-  @Override
-  public int updateRate() {
-    return 25;
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/PeaLoader.java b/sample/showcase/core/src/playn/showcase/core/peas/PeaLoader.java
deleted file mode 100644
index 26c57fd..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/PeaLoader.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas;
-
-import playn.core.AssetWatcher;
-import playn.core.PlayN;
-import playn.core.GroupLayer;
-import playn.core.Json;
-import playn.core.ResourceCallback;
-
-import playn.showcase.core.peas.entities.Block;
-import playn.showcase.core.peas.entities.BlockGel;
-import playn.showcase.core.peas.entities.BlockLeftRamp;
-import playn.showcase.core.peas.entities.BlockRightRamp;
-import playn.showcase.core.peas.entities.BlockSpring;
-import playn.showcase.core.peas.entities.Cloud1;
-import playn.showcase.core.peas.entities.Cloud3;
-import playn.showcase.core.peas.entities.Entity;
-import playn.showcase.core.peas.entities.FakeBlock;
-import playn.showcase.core.peas.entities.Pea;
-import playn.showcase.core.peas.entities.Portal;
-
-public class PeaLoader {
-
-  public static void CreateWorld(String level, final GroupLayer worldLayer,
-      final ResourceCallback<PeaWorld> callback) {
-    final PeaWorld peaWorld = new PeaWorld(worldLayer);
-
-    // load the level
-    PlayN.assetManager().getText(level, new ResourceCallback<String>() {
-      @Override
-      public void done(String resource) {
-        // create an asset watcher that will call our callback when all assets
-        // are loaded
-        AssetWatcher assetWatcher = new AssetWatcher(new AssetWatcher.Listener() {
-          @Override
-          public void done() {
-            callback.done(peaWorld);
-          }
-
-          @Override
-          public void error(Throwable e) {
-            callback.error(e);
-          }
-        });
-
-        // parse the level
-        Json.Object document = PlayN.json().parse(resource);
-        
-        // previous Portal (used for linking portals)
-        Portal lastPortal = null;
-
-        // parse the entities, adding each asset to the asset watcher
-        Json.Array jsonEntities = document.getArray("Entities");
-        for (int i = 0; i < jsonEntities.length(); i++) {
-          Json.Object jsonEntity = jsonEntities.getObject(i);
-          String type = jsonEntity.getString("type");
-          float x = (float) jsonEntity.getNumber("x");
-          float y = (float) jsonEntity.getNumber("y");
-          float a = (float) jsonEntity.getNumber("a");
-
-          Entity entity = null;
-          if (Pea.TYPE.equalsIgnoreCase(type)) {
-            entity = new Pea(peaWorld, peaWorld.world, x, y, a);
-          } else if (Block.TYPE.equalsIgnoreCase(type)) {
-            entity = new Block(peaWorld, peaWorld.world, x, y, a);
-          } else if (BlockRightRamp.TYPE.equalsIgnoreCase(type)) {
-            entity = new BlockRightRamp(peaWorld, peaWorld.world, x, y, a);
-          } else if (BlockLeftRamp.TYPE.equalsIgnoreCase(type)) {
-            entity = new BlockLeftRamp(peaWorld, peaWorld.world, x, y, a);
-          } else if (BlockGel.TYPE.equalsIgnoreCase(type)) {
-            entity = new BlockGel(peaWorld, peaWorld.world, x, y, a);
-          } else if (BlockSpring.TYPE.equalsIgnoreCase(type)) {
-            entity = new BlockSpring(peaWorld, peaWorld.world, x, y, a);
-          } else if (Cloud1.TYPE.equalsIgnoreCase(type)) {
-            entity = new Cloud1(peaWorld);
-          } else if (Cloud3.TYPE.equalsIgnoreCase(type)) {
-            entity = new Cloud3(peaWorld);
-          } else if (FakeBlock.TYPE.equalsIgnoreCase(type)) {
-            entity = new FakeBlock(peaWorld, x, y, a);
-          } else if (Portal.TYPE.equalsIgnoreCase(type)) {
-            entity = new Portal(peaWorld, peaWorld.world, x, y, a);
-            if (lastPortal == null) {
-              lastPortal = (Portal) entity;
-            } else {
-              lastPortal.other = (Portal) entity;
-              ((Portal) entity).other = lastPortal;
-              lastPortal = null;
-            }
-          }
-
-          if (entity != null) {
-            assetWatcher.add(entity.getImage());
-            peaWorld.add(entity);
-          }
-        }
-
-        // start the watcher (it will call the callback when everything is
-        // loaded)
-        assetWatcher.start();
-      }
-
-      @Override
-      public void error(Throwable err) {
-        callback.error(err);
-      }
-    });
-  }
-
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/PeaWorld.java b/sample/showcase/core/src/playn/showcase/core/peas/PeaWorld.java
deleted file mode 100644
index 902dd8b..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/PeaWorld.java
+++ /dev/null
@@ -1,177 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas;
-
-import org.jbox2d.callbacks.ContactImpulse;
-import org.jbox2d.callbacks.ContactListener;
-import org.jbox2d.callbacks.DebugDraw;
-import org.jbox2d.collision.Manifold;
-import org.jbox2d.collision.shapes.PolygonShape;
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.BodyDef;
-import org.jbox2d.dynamics.World;
-import org.jbox2d.dynamics.contacts.Contact;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Stack;
-
-import static playn.core.PlayN.graphics;
-
-import playn.core.CanvasLayer;
-import playn.core.DebugDrawBox2D;
-import playn.core.GroupLayer;
-
-import playn.showcase.core.peas.entities.Entity;
-import playn.showcase.core.peas.entities.PhysicsEntity;
-
-public class PeaWorld implements ContactListener {
-  public GroupLayer staticLayerBack;
-  public GroupLayer dynamicLayer;
-  public GroupLayer staticLayerFront;
-
-  // size of world
-  private static int width = 24;
-  private static int height = 18;
-
-  // box2d object containing physics world
-  protected World world;
-
-  private List<Entity> entities = new ArrayList<Entity>(0);
-  private HashMap<Body, PhysicsEntity> bodyEntityLUT = new HashMap<Body, PhysicsEntity>();
-  private Stack<Contact> contacts = new Stack<Contact>();
-
-  private static boolean showDebugDraw = false;
-  private DebugDrawBox2D debugDraw;
-  
-  public PeaWorld(GroupLayer scaledLayer) {
-    staticLayerBack = graphics().createGroupLayer();
-    scaledLayer.add(staticLayerBack);
-    dynamicLayer = graphics().createGroupLayer();
-    scaledLayer.add(dynamicLayer);
-    staticLayerFront = graphics().createGroupLayer();
-    scaledLayer.add(staticLayerFront);
-    
-    // create the physics world
-    Vec2 gravity = new Vec2(0.0f, 10.0f);
-    world = new World(gravity, true);
-    world.setWarmStarting(true);
-    world.setAutoClearForces(true);
-    world.setContactListener(this);
-
-    // create the ground
-    Body ground = world.createBody(new BodyDef());
-    PolygonShape groundShape = new PolygonShape();
-    groundShape.setAsEdge(new Vec2(0, height), new Vec2(width, height));
-    ground.createFixture(groundShape, 0.0f);
-
-    // create the walls
-    Body wallLeft = world.createBody(new BodyDef());
-    PolygonShape wallLeftShape = new PolygonShape();
-    wallLeftShape.setAsEdge(new Vec2(0, 0), new Vec2(0, height));
-    wallLeft.createFixture(wallLeftShape, 0.0f);
-    Body wallRight = world.createBody(new BodyDef());
-    PolygonShape wallRightShape = new PolygonShape();
-    wallRightShape.setAsEdge(new Vec2(width, 0), new Vec2(width, height));
-    wallRight.createFixture(wallRightShape, 0.0f);
-
-    if (showDebugDraw) {
-      CanvasLayer canvasLayer =
-          graphics().createCanvasLayer((int) (width / PeasDemo.physUnitPerScreenUnit),
-              (int) (height / PeasDemo.physUnitPerScreenUnit));
-      graphics().rootLayer().add(canvasLayer);
-      debugDraw = new DebugDrawBox2D();
-      debugDraw.setCanvas(canvasLayer);
-      debugDraw.setFlipY(false);
-      debugDraw.setStrokeAlpha(150);
-      debugDraw.setFillAlpha(75);
-      debugDraw.setStrokeWidth(2.0f);
-      debugDraw.setFlags(DebugDraw.e_shapeBit | DebugDraw.e_jointBit | DebugDraw.e_aabbBit);
-      debugDraw.setCamera(0, 0, 1f / PeasDemo.physUnitPerScreenUnit);
-      world.setDebugDraw(debugDraw);
-    }
-  }
-
-  public void update(float delta) {
-    for (Entity e : entities) {
-      e.update(delta);
-    }
-    // the step delta is fixed so box2d isn't affected by framerate
-    world.step(0.033f, 10, 10);
-    processContacts();
-  }
-
-  public void paint(float delta) {
-    if (showDebugDraw) {
-      debugDraw.getCanvas().canvas().clear();
-      world.drawDebugData();
-    }
-    for (Entity e : entities) {
-      e.paint(delta);
-    }
-  }
-
-  public void add(Entity entity) {
-    entities.add(entity);
-    if (entity instanceof PhysicsEntity) {
-      PhysicsEntity physicsEntity = (PhysicsEntity) entity;
-      bodyEntityLUT.put(physicsEntity.getBody(), physicsEntity);
-    }
-  }
-
-  // handle contacts out of physics loop
-  public void processContacts() {
-    while (!contacts.isEmpty()) {
-      Contact contact = contacts.pop();
-      
-      // handle collision
-      PhysicsEntity entityA = bodyEntityLUT.get(contact.m_fixtureA.m_body);
-      PhysicsEntity entityB = bodyEntityLUT.get(contact.m_fixtureB.m_body);
-      
-      if (entityA != null && entityB != null) {
-        if (entityA instanceof PhysicsEntity.HasContactListener) {
-          ((PhysicsEntity.HasContactListener) entityA).contact(entityB);
-        }
-        if (entityB instanceof PhysicsEntity.HasContactListener) {
-          ((PhysicsEntity.HasContactListener) entityB).contact(entityA);
-        }
-      }
-    }
-  }
-
-  // Box2d's begin contact
-  @Override
-  public void beginContact(Contact contact) {
-    contacts.push(contact);
-  }
-
-  // Box2d's end contact
-  @Override
-  public void endContact(Contact contact) {
-  }
-
-  // Box2d's pre solve
-  @Override
-  public void preSolve(Contact contact, Manifold oldManifold) {
-  }
-
-  // Box2d's post solve
-  @Override
-  public void postSolve(Contact contact, ContactImpulse impulse) {
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/PeasDemo.java b/sample/showcase/core/src/playn/showcase/core/peas/PeasDemo.java
deleted file mode 100644
index 1ac3a9d..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/PeasDemo.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas;
-
-import static playn.core.PlayN.assetManager;
-import static playn.core.PlayN.graphics;
-import static playn.core.PlayN.pointer;
-
-import playn.core.PlayN;
-import playn.core.Game;
-import playn.core.GroupLayer;
-import playn.core.Image;
-import playn.core.ImageLayer;
-import playn.core.Pointer;
-import playn.core.ResourceCallback;
-
-import playn.showcase.core.Demo;
-import playn.showcase.core.peas.entities.Pea;
-
-public class PeasDemo extends Demo {
-
-  // scale difference between screen space (pixels) and world space (physics).
-  public static float physUnitPerScreenUnit = 1 / 26.666667f;
-
-  ImageLayer bgLayer;
-
-  // main layer that holds the world. note: this gets scaled to world space
-  GroupLayer worldLayer;
-
-  // main world
-  PeaWorld world = null;
-  boolean worldLoaded = false;
-
-  @Override
-  public String name() {
-    return "Pea Physics";
-  }
-
-  @Override
-  public void init() {
-    // load and show our background image
-    Image bgImage = assetManager().getImage("peas/images/bg.png");
-    bgLayer = graphics().createImageLayer(bgImage);
-    graphics().rootLayer().add(bgLayer);
-
-    // create our world layer (scaled to "world space")
-    worldLayer = graphics().createGroupLayer();
-    worldLayer.setScale(1f / physUnitPerScreenUnit);
-    graphics().rootLayer().add(worldLayer);
-
-    PeaLoader.CreateWorld("peas/levels/level1.json", worldLayer, new ResourceCallback<PeaWorld>() {
-      @Override
-      public void done(PeaWorld resource) {
-        world = resource;
-        worldLoaded = true;
-      }
-
-      @Override
-      public void error(Throwable err) {
-        PlayN.log().error("Error loading pea world: " + err.getMessage());
-      }
-    });
-
-    // hook up our pointer listener
-    pointer().setListener(new Pointer.Adapter() {
-      @Override
-      public void onPointerStart(Pointer.Event event) {
-        if (worldLoaded) {
-          Pea pea = new Pea(world, world.world, physUnitPerScreenUnit * event.x(),
-                            physUnitPerScreenUnit * event.y(), 0);
-          world.add(pea);
-        }
-      }
-    });
-  }
-
-  @Override
-  public void shutdown() {
-    bgLayer.destroy();
-    bgLayer = null;
-    worldLayer.destroy();
-    worldLayer = null;
-    world = null;
-    worldLoaded = false;
-  }
-
-  @Override
-  public void paint(float alpha) {
-    if (worldLoaded) {
-      world.paint(alpha);
-    }
-  }
-
-  @Override
-  public void update(float delta) {
-    if (worldLoaded) {
-      world.update(delta);
-    }
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/Block.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/Block.java
deleted file mode 100644
index 5b5f73f..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/Block.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import org.jbox2d.collision.shapes.PolygonShape;
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.BodyDef;
-import org.jbox2d.dynamics.BodyType;
-import org.jbox2d.dynamics.FixtureDef;
-import org.jbox2d.dynamics.World;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public class Block extends StaticPhysicsEntity {
-  public static String TYPE = "Block";
-
-  public Block(final PeaWorld peaWorld, World world, float x, float y, float angle) {
-    super(peaWorld, world, x, y, angle);
-  }
-
-  @Override
-  Body initPhysicsBody(World world, float x, float y, float angle) {
-    FixtureDef fixtureDef = new FixtureDef();
-    BodyDef bodyDef = new BodyDef();
-    bodyDef.type = BodyType.STATIC;
-    bodyDef.position = new Vec2(0, 0);
-    Body body = world.createBody(bodyDef);
-
-    PolygonShape polygonShape = new PolygonShape();
-    Vec2[] polygon = new Vec2[4];
-    polygon[0] = new Vec2(-getWidth()/2f, -getHeight()/2f + getTopOffset());
-    polygon[1] = new Vec2(getWidth()/2f, -getHeight()/2f + getTopOffset());
-    polygon[2] = new Vec2(getWidth()/2f, getHeight()/2f);
-    polygon[3] = new Vec2(-getWidth()/2f, getHeight()/2f);
-    polygonShape.set(polygon, polygon.length);
-    fixtureDef.shape = polygonShape;
-    fixtureDef.friction = 0.1f;
-    fixtureDef.restitution = 0.8f;
-    body.createFixture(fixtureDef);
-    body.setTransform(new Vec2(x, y), angle);
-    return body;
-  }
-
-  @Override
-  float getWidth() {
-    return 2.0f;
-  }
-
-  @Override
-  float getHeight() {
-    return 2.0f;
-  }
-
-  /**
-   * Return the size of the offset where the block is slightly lower than where
-   * the image is drawn for a depth effect
-   */
-  public float getTopOffset() {
-    return 2.0f / 8f;
-  }
-
-  @Override
-  public String getImageName() {
-    return "Block-Normal.png";
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockGel.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockGel.java
deleted file mode 100644
index 46e166f..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockGel.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import org.jbox2d.collision.shapes.PolygonShape;
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.BodyDef;
-import org.jbox2d.dynamics.BodyType;
-import org.jbox2d.dynamics.FixtureDef;
-import org.jbox2d.dynamics.World;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public class BlockGel extends Block {
-  @SuppressWarnings("hiding")
-  public static String TYPE = "BlockGel";
-
-  public BlockGel(PeaWorld peaWorld, World world, float x, float y, float angle) {
-    super(peaWorld, world, x, y, angle);
-  }
-
-  @Override
-  Body initPhysicsBody(World world, float x, float y, float angle) {
-    FixtureDef fixtureDef = new FixtureDef();
-    BodyDef bodyDef = new BodyDef();
-    bodyDef.type = BodyType.STATIC;
-    bodyDef.position = new Vec2(0, 0);
-    Body body = world.createBody(bodyDef);
-
-    PolygonShape polygonShape = new PolygonShape();
-    Vec2[] polygon = new Vec2[4];
-    polygon[0] = new Vec2(-getWidth()/2f, -getHeight()/2f + getTopOffset());
-    polygon[1] = new Vec2(getWidth()/2f, -getHeight()/2f + getTopOffset());
-    polygon[2] = new Vec2(getWidth()/2f, getHeight()/2f);
-    polygon[3] = new Vec2(-getWidth()/2f, getHeight()/2f);
-    polygonShape.set(polygon, polygon.length);
-    fixtureDef.shape = polygonShape;
-    fixtureDef.friction = 1.0f;
-    fixtureDef.restitution = 0.3f;
-    body.createFixture(fixtureDef);
-    body.setTransform(new Vec2(x, y), angle);
-    return body;
-  }
-
-  @Override
-  public String getImageName() {
-    return "Block-Gel.png";
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockLeftRamp.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockLeftRamp.java
deleted file mode 100644
index 1e29aa8..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockLeftRamp.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import org.jbox2d.collision.shapes.PolygonShape;
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.BodyDef;
-import org.jbox2d.dynamics.BodyType;
-import org.jbox2d.dynamics.FixtureDef;
-import org.jbox2d.dynamics.World;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public class BlockLeftRamp extends Block {
-  @SuppressWarnings("hiding")
-  public static String TYPE = "BlockLeftRamp";
-
-  public BlockLeftRamp(PeaWorld peaWorld, World world, float x, float y, float angle) {
-    super(peaWorld, world, x, y, angle);
-  }
-
-  @Override
-  Body initPhysicsBody(World world, float x, float y, float angle) {
-    FixtureDef fixtureDef = new FixtureDef();
-    BodyDef bodyDef = new BodyDef();
-    bodyDef.type = BodyType.STATIC;
-    bodyDef.position = new Vec2(0, 0);
-    Body body = world.createBody(bodyDef);
-
-    PolygonShape polygonShape = new PolygonShape();
-    Vec2[] polygon = new Vec2[3];
-    polygon[0] = new Vec2(getWidth()/2f, -getHeight()/2f + getTopOffset());
-    polygon[1] = new Vec2(getWidth()/2f, getHeight()/2f);
-    polygon[2] = new Vec2(-getWidth()/2f, getHeight()/2f);
-    polygonShape.set(polygon, polygon.length);
-    fixtureDef.shape = polygonShape;
-    fixtureDef.friction = 0.1f;
-    fixtureDef.restitution = 0.9f;
-    body.createFixture(fixtureDef);
-    body.setTransform(new Vec2(x, y), angle);
-    return body;
-  }
-
-  @Override
-  public String getImageName() {
-    return "Block-LeftRamp.png";
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockRightRamp.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockRightRamp.java
deleted file mode 100644
index 8e0457a..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockRightRamp.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import org.jbox2d.collision.shapes.PolygonShape;
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.BodyDef;
-import org.jbox2d.dynamics.BodyType;
-import org.jbox2d.dynamics.FixtureDef;
-import org.jbox2d.dynamics.World;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public class BlockRightRamp extends Block {
-  @SuppressWarnings("hiding")
-  public static String TYPE = "BlockRightRamp";
-
-  public BlockRightRamp(PeaWorld peaWorld, World world, float x, float y, float angle) {
-    super(peaWorld, world, x, y, angle);
-  }
-
-  @Override
-  Body initPhysicsBody(World world, float x, float y, float angle) {
-    FixtureDef fixtureDef = new FixtureDef();
-    BodyDef bodyDef = new BodyDef();
-    bodyDef.type = BodyType.STATIC;
-    bodyDef.position = new Vec2(0, 0);
-    Body body = world.createBody(bodyDef);
-
-    PolygonShape polygonShape = new PolygonShape();
-    Vec2[] polygon = new Vec2[3];
-    polygon[0] = new Vec2(-getWidth()/2f, -getHeight()/2f + getTopOffset());
-    polygon[1] = new Vec2(getWidth()/2f, getHeight()/2f);
-    polygon[2] = new Vec2(-getWidth()/2f, getHeight()/2f);
-    polygonShape.set(polygon, polygon.length);
-    fixtureDef.shape = polygonShape;
-    fixtureDef.friction = 0.1f;
-    fixtureDef.restitution = 0.9f;
-    body.createFixture(fixtureDef);
-    body.setTransform(new Vec2(x, y), angle);
-    return body;
-  }
-
-  @Override
-  public String getImageName() {
-    return "Block-RightRamp.png";
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockSpring.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockSpring.java
deleted file mode 100644
index 13e0824..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/BlockSpring.java
+++ /dev/null
@@ -1,167 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import org.jbox2d.collision.shapes.PolygonShape;
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.BodyDef;
-import org.jbox2d.dynamics.BodyType;
-import org.jbox2d.dynamics.FixtureDef;
-import org.jbox2d.dynamics.World;
-import org.jbox2d.dynamics.joints.MouseJoint;
-import org.jbox2d.dynamics.joints.MouseJointDef;
-
-import static playn.core.PlayN.graphics;
-
-import playn.core.ImageLayer;
-import playn.showcase.core.peas.PeaWorld;
-
-public class BlockSpring extends Entity implements PhysicsEntity {
-  public static String TYPE = "BlockSpring";
-
-  ImageLayer layerBase;
-  MouseJoint mj;
-  Body body;
-
-  public BlockSpring(PeaWorld peaWorld, World world, float x, float y, float angle) {
-    super(peaWorld, x, y, angle);
-
-    // add the spring joint
-    MouseJointDef mjd = new MouseJointDef();
-    mjd.bodyA = world.getBodyList();
-    body = initPhysicsBody(world, x, y, angle);
-    mjd.bodyB = getBody();
-    mjd.target.set(new Vec2(x, y));
-    mjd.maxForce = 40f * getBody().getMass();
-    mjd.dampingRatio = 0.2f;
-    mj = (MouseJoint) world.createJoint(mjd);
-
-    setPos(x, y);
-    setAngle(angle);
-  }
-
-  @Override
-  public void initPreLoad(final PeaWorld peaWorld) {
-  }
-
-  @Override
-  public void initPostLoad(final PeaWorld peaWorld) {
-    layerBase = graphics().createImageLayer(layer.image());
-
-    // set our layer base settings/source
-    layerBase.setWidth(layer.image().width());
-    layerBase.setHeight(30);
-    layerBase.setSourceRect(0, 31, 71, 30);
-    layerBase.setOrigin(image.width() / 2f, -30 + image.height() / 2f);
-    layerBase.setScale(getWidth() / image.width(), getHeight() / image.height());
-
-    // set our top layer settings/source
-    layer.setWidth(layer.image().width());
-    layer.setHeight(31);
-    layer.setSourceRect(0, 0, 71, 31);
-    layer.setOrigin(image.width() / 2f, image.height() / 2f);
-    layer.setScale(getWidth() / image.width(), getHeight() / image.height());
-
-    peaWorld.dynamicLayer.add(layerBase);
-    peaWorld.dynamicLayer.add(layer);
-
-    setPos(x, y);
-    setAngle(angle);
-  }
-
-  Body initPhysicsBody(World world, float x, float y, float angle) {
-    FixtureDef fixtureDef = new FixtureDef();
-    BodyDef bodyDef = new BodyDef();
-    bodyDef.type = BodyType.DYNAMIC;
-    bodyDef.position = new Vec2(0, 0);
-    Body body = world.createBody(bodyDef);
-
-    PolygonShape polygonShape = new PolygonShape();
-    Vec2[] polygon = new Vec2[4];
-    polygon[0] = new Vec2(-getWidth() / 2f, -getHeight() / 2f + getTopOffset());
-    polygon[1] = new Vec2(getWidth() / 2f, -getHeight() / 2f + getTopOffset());
-    polygon[2] = new Vec2(getWidth() / 2f, polygon[0].y + getSpringBoxHeight());
-    polygon[3] = new Vec2(-getWidth() / 2f, polygon[1].y + getSpringBoxHeight());
-    polygonShape.set(polygon, polygon.length);
-    fixtureDef.shape = polygonShape;
-    fixtureDef.friction = 0.1f;
-    fixtureDef.restitution = 1.4f;
-    body.createFixture(fixtureDef);
-    body.setTransform(new Vec2(x, y), angle);
-    return body;
-  }
-
-  @Override
-  float getWidth() {
-    return 2.0f;
-  }
-
-  @Override
-  float getHeight() {
-    return 2.0f;
-  }
-
-  /**
-   * Return the height of the spring's top box.
-   */
-  public float getSpringBoxHeight() {
-    return getHeight() / 2.7f;
-  }
-
-  /**
-   * Return the size of the offset where the block is slightly lower than where
-   * the image is drawn for a depth effect
-   */
-  public float getTopOffset() {
-    return 2.0f / 8f;
-  }
-
-  @Override
-  public void setPos(float x, float y) {
-    if (getBody() != null && layerBase != null) {
-      getBody().setTransform(new Vec2(x, y), getBody().getAngle());
-      mj.setTarget(new Vec2(x, y - 0 * getSpringBoxHeight()));
-      layerBase.setTranslation(x, y);
-      layer.setTranslation(x, y);
-    }
-  }
-
-  @Override
-  public void setAngle(float a) {
-    if (getBody() != null && layerBase != null) {
-      getBody().setTransform(getBody().getPosition(), a);
-      layerBase.setRotation(a);
-      layer.setRotation(a);
-    }
-  }
-
-  @Override
-  public void update(float alpha) {
-    layer.setTranslation(body.getPosition().x, body.getPosition().y);
-    layer.setRotation(body.getAngle());
-  }
-
-  @Override
-  public String getImageName() {
-    return "Block-Spring.png";
-  }
-
-  @Override
-  public Body getBody() {
-    return body;
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/Cloud1.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/Cloud1.java
deleted file mode 100644
index 6fe31fb..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/Cloud1.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public class Cloud1 extends Entity {
-  public static String TYPE = "Cloud1";
-
-  public Cloud1(PeaWorld peaWorld) {
-    super(peaWorld, 0, 0, 0);
-    y = (float) (Math.random() * getMaximumHeight());
-    x = (float) (Math.random() * getMaximumWidth());
-  }
-
-  @Override
-  public void update(float delta) {
-    x += delta * getVelocity();
-    layer.setTranslation(x, y);
-
-    if (x > getWidth() + getMaximumWidth()) {
-      x = -getWidth();
-      y = (float) (Math.random() * getMaximumHeight());
-    }
-  }
-
-  @Override
-  float getWidth() {
-    return 0.3f * 26.0f;
-  }
-
-  @Override
-  float getHeight() {
-    return 0.3f * 18.0f;
-  }
-
-  float getMaximumWidth() {
-    return 24.0f;
-  }
-
-  float getMaximumHeight() {
-    return 3.0f;
-  }
-
-  float getVelocity() {
-    return 0.003f;
-  }
-
-  @Override
-  public void setPos(float x, float y) {
-    this.x = x;
-    this.y = y;
-    layer.setTranslation(x, y);
-  }
-
-  @Override
-  String getImageName() {
-    return "Cloud1.png";
-  }
-
-  @Override
-  public void initPreLoad(PeaWorld peaWorld) {
-    peaWorld.dynamicLayer.add(layer);
-  }
-
-  @Override
-  public void initPostLoad(PeaWorld peaWorld) {
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/Cloud3.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/Cloud3.java
deleted file mode 100644
index 53effc0..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/Cloud3.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public class Cloud3 extends Cloud1 {
-  @SuppressWarnings("hiding")
-  public static String TYPE = "Cloud3";
-
-  public Cloud3(PeaWorld peaWorld) {
-    super(peaWorld);
-  }
-
-  @Override
-  float getVelocity() {
-    return 0.002f;
-  }
-
-  @Override
-  String getImageName() {
-    return "Cloud3.png";
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/DynamicPhysicsEntity.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/DynamicPhysicsEntity.java
deleted file mode 100644
index 50b28a4..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/DynamicPhysicsEntity.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.World;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public abstract class DynamicPhysicsEntity extends Entity implements PhysicsEntity {
-  // for calculating interpolation
-  private float prevX, prevY, prevA;
-  private Body body;
-
-  public DynamicPhysicsEntity(PeaWorld peaWorld, World world, float x, float y, float angle) {
-    super(peaWorld, x, y, angle);
-    body = initPhysicsBody(world, x, y, angle);
-    setPos(x, y);
-    setAngle(angle);
-  }
-
-  abstract Body initPhysicsBody(World world, float x, float y, float angle);
-
-  @Override
-  public void paint(float alpha) {
-    // interpolate based on previous state
-    float x = (body.getPosition().x * alpha) + (prevX * (1f - alpha));
-    float y = (body.getPosition().y * alpha) + (prevY * (1f - alpha));
-    float a = (body.getAngle() * alpha) + (prevA * (1f - alpha));
-    layer.setTranslation(x, y);
-    layer.setRotation(a);
-  }
-
-  @Override
-  public void update(float delta) {
-    // store state for interpolation in paint()
-    prevX = body.getPosition().x;
-    prevY = body.getPosition().y;
-    prevA = body.getAngle();
-  }
-
-  public void initPreLoad(final PeaWorld peaWorld) {
-    // attach our layer to the dynamic layer
-    peaWorld.dynamicLayer.add(layer);
-  }
-
-  public void initPostLoad(final PeaWorld peaWorld) {
-  }
-
-  public void setLinearVelocity(float x, float y) {
-    body.setLinearVelocity(new Vec2(x, y));
-  }
-
-  public void setAngularVelocity(float w) {
-    body.setAngularVelocity(w);
-  }
-
-  @Override
-  public void setPos(float x, float y) {
-    super.setPos(x, y);
-    getBody().setTransform(new Vec2(x, y), getBody().getAngle());
-    prevX = x;
-    prevY = y;
-  }
-
-  @Override
-  public void setAngle(float a) {
-    super.setAngle(a);
-    getBody().setTransform(getBody().getPosition(), a);
-    prevA = a;
-  }
-
-  @Override
-  public Body getBody() {
-    return body;
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/Entity.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/Entity.java
deleted file mode 100644
index b50d281..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/Entity.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import static playn.core.PlayN.assetManager;
-import static playn.core.PlayN.graphics;
-
-import playn.core.PlayN;
-import playn.core.Image;
-import playn.core.ImageLayer;
-import playn.core.ResourceCallback;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public abstract class Entity {
-  ImageLayer layer;
-  Image image;
-  float x, y, angle;
-
-  public Entity(final PeaWorld peaWorld, float px, float py, float pangle) {
-    this.x = px;
-    this.y = py;
-    this.angle = pangle;
-    image = assetManager().getImage("peas/images/" + getImageName());
-    layer = graphics().createImageLayer(image);
-    initPreLoad(peaWorld);
-    image.addCallback(new ResourceCallback<Image>() {
-      @Override
-      public void done(Image image) {
-        // since the image is loaded, we can use its width and height
-        layer.setWidth(image.width());
-        layer.setHeight(image.height());
-        layer.setOrigin(image.width() / 2f, image.height() / 2f);
-        layer.setScale(getWidth() / image.width(), getHeight() / image.height());
-        layer.setTranslation(x, y);
-        layer.setRotation(angle);
-        initPostLoad(peaWorld);
-      }
-
-      @Override
-      public void error(Throwable err) {
-        PlayN.log().error("Error loading image: " + err.getMessage());
-      }
-    });
-  }
-
-  /**
-   * Perform pre-image load initialization (e.g., attaching to PeaWorld layers).
-   *
-   * @param peaWorld
-   */
-  public abstract void initPreLoad(final PeaWorld peaWorld);
-
-  /**
-   * Perform post-image load initialization (e.g., attaching to PeaWorld layers).
-   *
-   * @param peaWorld
-   */
-  public abstract void initPostLoad(final PeaWorld peaWorld);
-
-  public void paint(float alpha) {
-  }
-
-  public void update(float delta) {
-  }
-
-  public void setPos(float x, float y) {
-    layer.setTranslation(x, y);
-  }
-
-  public void setAngle(float a) {
-    layer.setRotation(a);
-  }
-
-  abstract float getWidth();
-
-  abstract float getHeight();
-
-  abstract String getImageName();
-
-  public Image getImage() {
-    return image;
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/FakeBlock.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/FakeBlock.java
deleted file mode 100644
index 6d62661..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/FakeBlock.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public class FakeBlock extends Entity {
-  public static String TYPE = "FakeBlock";
-
-  public FakeBlock(PeaWorld peaWorld, float x, float y, float angle) {
-    super(peaWorld, x, y, angle);
-  }
-
-  public void paint(float alpha) {
-  }
-
-  public void update(float delta) {
-  }
-
-  public void setPos(float x, float y) {
-    layer.setTranslation(x, y);
-  }
-
-  public void setAngle(float a) {
-    layer.setRotation(a);
-  }
-
-  @Override
-  float getWidth() {
-    return 2.0f;
-  }
-
-  @Override
-  float getHeight() {
-    return 2.0f;
-  }
-
-  @Override
-  public String getImageName() {
-    return "Block-Normal.png";
-  }
-
-  @Override
-  public void initPreLoad(PeaWorld peaWorld) {
-    peaWorld.staticLayerBack.add(layer);
-  }
-
-  @Override
-  public void initPostLoad(PeaWorld peaWorld) {
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/Pea.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/Pea.java
deleted file mode 100644
index 1385518..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/Pea.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import org.jbox2d.collision.shapes.CircleShape;
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.BodyDef;
-import org.jbox2d.dynamics.BodyType;
-import org.jbox2d.dynamics.FixtureDef;
-import org.jbox2d.dynamics.World;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public class Pea extends DynamicPhysicsEntity {
-  public static String TYPE = "Pea";
-
-  public Pea(PeaWorld peaWorld, World world, float x, float y, float angle) {
-    super(peaWorld, world, x, y, angle);
-  }
-
-  @Override
-  Body initPhysicsBody(World world, float x, float y, float angle) {
-    FixtureDef fixtureDef = new FixtureDef();
-    BodyDef bodyDef = new BodyDef();
-    bodyDef.type = BodyType.DYNAMIC;
-    bodyDef.position = new Vec2(0, 0);
-    Body body = world.createBody(bodyDef);
-
-    CircleShape circleShape = new CircleShape();
-    circleShape.m_radius = getRadius();
-    fixtureDef.shape = circleShape;
-    fixtureDef.density = 0.4f;
-    fixtureDef.friction = 0.1f;
-    fixtureDef.restitution = 0.35f;
-    circleShape.m_p.set(0, 0);
-    body.createFixture(fixtureDef);
-    body.setLinearDamping(0.2f);
-    body.setTransform(new Vec2(x, y), angle);
-    return body;
-  }
-
-  @Override
-  float getWidth() {
-    return 2 * getRadius();
-  }
-
-  @Override
-  float getHeight() {
-    return 2 * getRadius();
-  }
-
-  float getRadius() {
-    //return 1.50f;
-    return 0.5f;
-  }
-
-  @Override
-  public String getImageName() {
-    //return "chrome.png";
-    return "pea.png";
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/PhysicsEntity.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/PhysicsEntity.java
deleted file mode 100644
index df381eb..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/PhysicsEntity.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import org.jbox2d.dynamics.Body;
-
-public interface PhysicsEntity {
-
-  public Body getBody();
-
-  public interface HasContactListener {
-    public void contact(PhysicsEntity other);
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/Portal.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/Portal.java
deleted file mode 100644
index 71d35d2..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/Portal.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import org.jbox2d.collision.shapes.PolygonShape;
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.BodyDef;
-import org.jbox2d.dynamics.BodyType;
-import org.jbox2d.dynamics.FixtureDef;
-import org.jbox2d.dynamics.World;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public class Portal extends StaticPhysicsEntity implements PhysicsEntity.HasContactListener {
-  public static String TYPE = "Portal";
-
-  public Portal other = null;
-
-  private static int maxHysteresis = 10;
-  private static int hysteresis = 0;
-
-  public Portal(PeaWorld peaWorld, World world, float x, float y, float angle) {
-    super(peaWorld, world, x, y, angle);
-  }
-
-  @Override
-  Body initPhysicsBody(World world, float x, float y, float angle) {
-    FixtureDef fixtureDef = new FixtureDef();
-    BodyDef bodyDef = new BodyDef();
-    bodyDef.type = BodyType.STATIC;
-    bodyDef.position = new Vec2(0, 0);
-    Body body = world.createBody(bodyDef);
-
-    // height of the portal contact box
-    float boxHeight = getHeight() / 12f;
-    float boxWidth = getWidth() * 0.75f;
-    PolygonShape polygonShape = new PolygonShape();
-    Vec2[] polygon = new Vec2[4];
-    polygon[0] = new Vec2(-boxWidth/2f, getHeight()/2f - boxHeight);
-    polygon[1] = new Vec2(boxWidth/2f, getHeight()/2f - boxHeight);
-    polygon[2] = new Vec2(boxWidth/2f, getHeight()/2f);
-    polygon[3] = new Vec2(-boxWidth/2f, getHeight()/2f);
-    polygonShape.set(polygon, polygon.length);
-    fixtureDef.shape = polygonShape;
-    fixtureDef.friction = 0.1f;
-    fixtureDef.restitution = 0.8f;
-    body.createFixture(fixtureDef);
-    body.setTransform(new Vec2(x, y), angle);
-    return body;
-  }
-
-  @Override
-  public void initPostLoad(final PeaWorld peaWorld) {
-    layer.setRotation(0f); // total hack so we can portal horizontally but not rotate the image
-    peaWorld.staticLayerFront.add(layer);
-  }
-
-  @Override
-  float getWidth() {
-    return 2.0f;
-  }
-
-  @Override
-  float getHeight() {
-    return 2.0f;
-  }
-
-  /**
-   * Return the size of the offset where the block is slightly lower than where
-   * the image is drawn for a depth effect
-   */
-  public float getTopOffset() {
-    return 2.0f / 8f;
-  }
-
-  @Override
-  public String getImageName() {
-    return "teleport.png";
-  }
-
-  @Override
-  public void update(float delta) {
-    super.update(delta);
-    if (hysteresis > 0) {
-      hysteresis--;
-    }
-  }
-
-  // Handle portal event
-  @Override
-  public void contact(PhysicsEntity contactEntity) {
-    // keep a counter to prevent another portal event until a timeout
-    if (hysteresis > 0) {
-      return; // do not perform another portal event until hysteresis frames have passed
-    } else {
-      hysteresis = maxHysteresis;
-    }
-    Vec2 pos = contactEntity.getBody().getPosition();
-    float ang = contactEntity.getBody().getAngle();
-    Vec2 vel = contactEntity.getBody().getLinearVelocity();
-
-    Vec2 posDiff = pos.sub(getBody().getPosition());
-    float angDiff = other.getBody().getAngle() - getBody().getAngle();
-
-    Vec2 newPos = rotate(posDiff, angDiff).add(other.getBody().getPosition());
-    float newAng = ang + angDiff;
-    if (contactEntity instanceof DynamicPhysicsEntity) {
-      DynamicPhysicsEntity dynamic = (DynamicPhysicsEntity) contactEntity;
-      dynamic.setPos(newPos.x, newPos.y);
-      dynamic.setAngle(newAng);
-    } else {
-      contactEntity.getBody().setTransform(newPos, newAng);
-    }
-    Vec2 newVel = rotate(vel, angDiff);
-    contactEntity.getBody().setLinearVelocity(newVel);
-  }
-
-  private Vec2 rotate(Vec2 vec, float theta) {
-    Vec2 ret = new Vec2();
-    float cTheta = (float)Math.cos(theta);
-    float sTheta = (float)Math.sin(theta);
-    ret.x = vec.x * cTheta - vec.y * sTheta;
-    ret.y = vec.x * sTheta + vec.y * cTheta;
-    return ret;
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/peas/entities/StaticPhysicsEntity.java b/sample/showcase/core/src/playn/showcase/core/peas/entities/StaticPhysicsEntity.java
deleted file mode 100644
index 228c041..0000000
--- a/sample/showcase/core/src/playn/showcase/core/peas/entities/StaticPhysicsEntity.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.peas.entities;
-
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.World;
-
-import playn.showcase.core.peas.PeaWorld;
-
-public abstract class StaticPhysicsEntity extends Entity implements PhysicsEntity {
-  private Body body;
-
-  public StaticPhysicsEntity(final PeaWorld peaWorld, World world, float x, float y, float angle) {
-    super(peaWorld, x, y, angle);
-    body = initPhysicsBody(world, x, y, angle);
-  }
-
-  abstract Body initPhysicsBody(World world, float x, float y, float angle);
-
-  @Override
-  public void paint(float alpha) {
-  }
-
-  @Override
-  public void update(float delta) {
-  }
-
-  public void initPreLoad(final PeaWorld peaWorld) {
-  }
-
-  public void initPostLoad(final PeaWorld peaWorld) {
-    peaWorld.staticLayerBack.add(layer);
-  }
-
-  @Override
-  public void setPos(float x, float y) {
-    throw new RuntimeException("Error setting position on static entity");
-  }
-
-  @Override
-  public void setAngle(float a) {
-    throw new RuntimeException("Error setting angle on static entity");
-  }
-
-  @Override
-  public Body getBody() {
-    return body;
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/snake/SnakeDemo.java b/sample/showcase/core/src/playn/showcase/core/snake/SnakeDemo.java
deleted file mode 100644
index f91ddd0..0000000
--- a/sample/showcase/core/src/playn/showcase/core/snake/SnakeDemo.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/**
- * Copyright 2011 The ForPlay Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.snake;
-
-import pythagoras.f.Transform;
-
-import playn.core.GroupLayer;
-import playn.core.Image;
-import playn.core.ImageLayer;
-import static playn.core.PlayN.*;
-
-import playn.showcase.core.Demo;
-
-/**
- * Animates a chain of images undulating around the screen, using depth and scale to make them
- * appear to move in and out in the z-dimension.
- */
-public class SnakeDemo extends Demo
-{
-  private GroupLayer layer;
-  private ImageLayer[] segments;
-  private float dx = 10, dy = 5, dd = 1;
-
-  @Override
-  public String name() {
-    return "Snake";
-  }
-
-  @Override
-  public void init() {
-    // create a group layer to hold everything
-    layer = graphics().createGroupLayer();
-    graphics().rootLayer().add(layer);
-
-    // create and add background image layer
-    Image bgImage = assetManager().getImage("sprites/bg.png");
-    ImageLayer bgLayer = graphics().createImageLayer(bgImage);
-    bgLayer.setDepth(-1);
-    layer.add(bgLayer);
-
-    // create our snake segments
-    Image segImage = assetManager().getImage("sprites/pea.png");
-    segments = new ImageLayer[25];
-    for (int ii = 0; ii < segments.length; ii++) {
-      segments[ii] = graphics().createImageLayer(segImage);
-      segments[ii].setDepth(50);
-      layer.add(segments[ii]);
-    }
-  }
-
-  @Override
-  public void shutdown() {
-    segments = null;
-    layer.destroy();
-    layer = null;
-  }
-
-  @Override
-  public void update(float delta) {
-    // the tail segments play follow the leader
-    for (int ii = segments.length-1; ii > 0; ii--) {
-      ImageLayer cur = segments[ii], prev = segments[ii-1];
-      Transform t1 = cur.transform(), t2 = prev.transform();
-      t1.setTx(t2.tx());
-      t1.setTy(t2.ty());
-      t1.setUniformScale(t2.uniformScale());
-      cur.setDepth(prev.depth());
-    }
-
-    // and the head segment leads the way
-    ImageLayer first = segments[0];
-    Transform t = first.transform();
-    float nx = t.tx() + dx, ny = t.ty() + dy, nd = first.depth() + dd;
-    if (nx < 0 || nx > graphics().width()) {
-      dx *= -1;
-      nx += dx;
-    }
-    if (ny < 0 || ny > graphics().height()) {
-      dy *= -1;
-      ny += dy;
-    }
-    if (nd < 25 || nd > 125) {
-      dd *= -1;
-      nd += dd;
-    }
-    t.setTx(nx);
-    t.setTy(ny);
-    t.setUniformScale(nd/50f);
-    first.setDepth(nd);
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/sprites/Pea.java b/sample/showcase/core/src/playn/showcase/core/sprites/Pea.java
deleted file mode 100644
index 3b76904..0000000
--- a/sample/showcase/core/src/playn/showcase/core/sprites/Pea.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.sprites;
-
-import static playn.core.PlayN.log;
-
-import playn.core.GroupLayer;
-import playn.core.ResourceCallback;
-
-public class Pea {
-  public static String IMAGE = "sprites/peasprites.png";
-  public static String JSON = "sprites/peasprite.json";
-  public static String JSON_WITH_IMAGE = "sprites/peasprite2.json";
-  private Sprite sprite;
-  private int spriteIndex = 0;
-  private float angle;
-  private boolean hasLoaded = false; // set to true when resources have loaded and we can update
-
-  public Pea(final GroupLayer peaLayer, final float x, final float y) {
-    // Sprite method #1: use a sprite image and json data describing the sprites
-    sprite = SpriteLoader.getSprite(IMAGE, JSON);
-
-    // Sprite method #2: use json data describing the sprites and containing the image urls
-    // sprite = SpriteLoader.getSprite(JSON_WITH_IMAGE);
-
-    // Add a callback for when the image loads.
-    // This is necessary because we can't use the width/height (to center the
-    // image) until after the image has been loaded
-    sprite.addCallback(new ResourceCallback<Sprite>() {
-      @Override
-      public void done(Sprite sprite) {
-        sprite.setSprite(spriteIndex);
-        sprite.layer().setOrigin(sprite.width() / 2f, sprite.height() / 2f);
-        sprite.layer().setTranslation(x, y);
-        peaLayer.add(sprite.layer());
-        hasLoaded = true;
-      }
-
-      @Override
-      public void error(Throwable err) {
-        log().error("Error loading image!", err);
-      }
-    });
-  }
-
-  public void update(float delta) {
-    if (hasLoaded) {
-      if (Math.random() > 0.95) {
-        spriteIndex = (spriteIndex + 1) % sprite.numSprites();
-        sprite.setSprite(spriteIndex);
-      }
-      angle += delta;
-      sprite.layer().setRotation(angle);
-    }
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/sprites/Sprite.java b/sample/showcase/core/src/playn/showcase/core/sprites/Sprite.java
deleted file mode 100644
index e130311..0000000
--- a/sample/showcase/core/src/playn/showcase/core/sprites/Sprite.java
+++ /dev/null
@@ -1,203 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.sprites;
-
-import static playn.core.PlayN.log;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-
-import playn.core.Asserts;
-import playn.core.ImageLayer;
-import playn.core.ResourceCallback;
-
-/**
- * A Sprite is a collection of {@link SpriteImage}s.
- * <p>
- * Create a Sprite from an image and json data using
- * {@link SpriteLoader#getSprite(String imageUrl, String jsonUrl)}.
- * <p>
- * Create a Sprite from json data using {@link SpriteLoader#getSprite(String json)}.
- * <p>
- * To use, add {@link #layer()} to a {@link Layer} in your game. To change sprites, call
- * {@link #setSprite(int)}.
- */
-public class Sprite {
-  private ImageLayer layer;
-  private List<SpriteImage> spriteImages;
-  private HashMap<String, Integer> spriteIdMap;
-  private ResourceCallback<Sprite> callback;
-  private SpriteImage current;
-  private int currentId = -1;
-  private boolean imagesDone = false; // true when images have finished loading
-  private boolean dataDone = false; // true when sprite data has finished loading
-
-  /**
-   * Do not call directly. Create using {@link SpriteLoader#getSprite(String, String)}
-   */
-  Sprite(ImageLayer imageLayer) {
-    this.layer = imageLayer;
-    spriteImages = new ArrayList<SpriteImage>(0);
-    spriteIdMap = new HashMap<String, Integer>();
-  }
-
-  /**
-   * Set callback that will be called when both the sprite data and sprite image have been loaded.
-   */
-  public void addCallback(ResourceCallback<Sprite> callback) {
-    this.callback = callback;
-    if (isReady()) {
-      callback.done(this);
-    }
-  }
-
-  /**
-   * Return the sprite {@link ImageLayer}.
-   */
-  public ImageLayer layer() {
-    return layer;
-  }
-
-  /**
-   * Return the number of sprites.
-   */
-  public int numSprites() {
-    return (spriteImages == null ? 0 : spriteImages.size());
-  }
-
-  /**
-   * Return the height of the current sprite.
-   */
-  public float height() {
-    if (current != null) {
-      return current.height();
-    } else {
-      return 1;
-    }
-  }
-
-  /**
-   * Return true when both the sprite data and the sprite image have been loaded.
-   * <p>
-   * @see #addCallback(ResourceCallback)
-   */
-  public boolean isReady() {
-    return imagesDone && dataDone;
-  }
-
-  /**
-   * Set the current sprite via the index.
-   * <p>
-   * The index is an integer between 0 and the number of sprites (@see {@link #numSprites()})
-   */
-  public void setSprite(int index) {
-    Asserts.checkElementIndex(index, spriteImages.size(), "Invalid sprite index");
-    if (index != currentId) {
-      current = spriteImages.get(index);
-      currentId = index;
-      updateLayer();
-    }
-  }
-
-  /**
-   * Set the current sprite via the sprite's id.
-   */
-  public void setSprite(String id) {
-    setSprite(Asserts.checkNotNull(spriteIdMap.get(id), "Invalid sprite id"));
-  }
-
-  /**
-   * Return the width of the current sprite.
-   */
-  public float width() {
-    if (current != null) {
-      return current.width();
-    } else {
-      return 1;
-    }
-  }
-
-  /**
-   * Add a {@link SpriteImage} to the sprites.
-   */
-  void addSpriteImage(String key, SpriteImage spriteImage) {
-    spriteIdMap.put(key, spriteImages.size());
-    spriteImages.add(spriteImage);
-  }
-
-  /**
-   * Should be called when the sprite data and sprite image have been loaded. Will handle calling
-   * the {@link ResourceCallback} of the {@link Sprite}.
-   */
-  void done() {
-    if (callback != null) {
-      callback.done(this);
-    }
-  }
-
-  /**
-   * Should be called when the sprite image(s) is done loading.
-   */
-  void doneLoadingImages() {
-    imagesDone = true;
-    if (isReady()) {
-      done();
-    }
-  }
-
-  /**
-   * Should be called when the sprite data is done loading.
-   */
-  void doneLoadingData() {
-    dataDone = true;
-    if (isReady()) {
-      done();
-    }
-  }
-
-  /**
-   * Should be called if an error occurs when loading the sprite image or data. Will handle calling
-   * the {@link ResourceCallback} of the {@link Sprite}.
-   */
-  void error(Throwable err) {
-    if (callback != null) {
-      callback.error(err);
-    } else {
-      // don't let the error fall on deaf ears
-      log().error("Error loading sprite", err);
-    }
-  }
-
-  /**
-   * Returns the {@link SpriteImage}s associated with this Sprite.
-   */
-  List<SpriteImage> spriteImages() {
-    return spriteImages;
-  }
-
-  /**
-   * Update the Sprite layer.
-   */
-  private void updateLayer() {
-    if (current != null) {
-      layer.setImage(current.image());
-      layer.setWidth(current.width());
-      layer.setHeight(current.height());
-      layer.setSourceRect(current.x(), current.y(), current.width(), current.height());
-    }
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/sprites/SpriteImage.java b/sample/showcase/core/src/playn/showcase/core/sprites/SpriteImage.java
deleted file mode 100644
index 77de78c..0000000
--- a/sample/showcase/core/src/playn/showcase/core/sprites/SpriteImage.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.sprites;
-
-import playn.core.Image;
-
-/**
- * Represents the data associated with a single sprite.
- */
-class SpriteImage {
-  private final Image image;
-  private final int x;
-  private final int y;
-  private final int width;
-  private final int height;
-
-  public SpriteImage(final Image image, int x, int y, int width, int height) {
-    this.image = image;
-    this.x = x;
-    this.y = y;
-    this.width = width;
-    this.height = height;
-  }
-
-  public Image image() {
-    return image;
-  }
-
-  public int height() {
-    return height;
-  }
-
-  public int width() {
-    return width;
-  }
-
-  public int x() {
-    return x;
-  }
-
-  public int y() {
-    return y;
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/sprites/SpriteLoader.java b/sample/showcase/core/src/playn/showcase/core/sprites/SpriteLoader.java
deleted file mode 100644
index c8e8138..0000000
--- a/sample/showcase/core/src/playn/showcase/core/sprites/SpriteLoader.java
+++ /dev/null
@@ -1,199 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.sprites;
-
-import static playn.core.PlayN.assetManager;
-import static playn.core.PlayN.graphics;
-import static playn.core.PlayN.json;
-
-import playn.core.Asserts;
-import playn.core.AssetWatcher;
-import playn.core.Image;
-import playn.core.Json;
-import playn.core.ResourceCallback;
-
-/**
- * Class for loading and parsing sprite sheets.
- * <p>
- * To use, call {@link #getSprite(String imageUrl, String jsonUrl)} with an image path and json
- * data, or {@link #getSprite(String jsonUrl)} with json data containing image urls.
- */
-// TODO(pdr): the two getSprite() methods are messy, clean them up.
-public class SpriteLoader {
-
-  // prevent instantiation
-  private SpriteLoader() {
-  }
-
-  /**
-   * Return a {@link Sprite}, given a path to the image and a path to the json sprite description.
-   * <p>
-   * json data should be in the following format:
-   * 
-   * <pre>
-   * {@code {
-   *   "sprites": [
-   *     {"id": "sprite_0", "x": 30, "y": 30, "w": 37, "h": 37},
-   *     {"id": "sprite_1", "x": 67, "y": 30, "w": 37, "h": 37},
-   *     {"id": "sprite_2", "x": 104, "y": 30, "w": 37, "h": 37},
-   *     {"id": "sprite_3", "x": 141, "y": 30, "w": 37, "h": 37}
-   *   ]}
-   * }
-   * </pre>
-   */
-  public static Sprite getSprite(String imagePath, String jsonPath) {
-    Image image = assetManager().getImage(imagePath);
-    final Image[] images = new Image[]{image};
-    // temp image to prevent NPE if using the Sprite's Layer (Sprite.getLayer()) before the image
-    // has loaded or before a sprite has been set (Sprite.setSprite()).
-    final Image tempImage = graphics().createImage(1, 1);
-    final Sprite sprite = new Sprite(graphics().createImageLayer(tempImage));
-
-    // load and parse json
-    assetManager().getText(jsonPath, new ResourceCallback<String>() {
-      @Override
-      public void done(String json) {
-        try {
-          parseJson(images, sprite, json);
-        } catch (Throwable err) {
-          sprite.error(err);
-          return;
-        }
-        sprite.doneLoadingData();
-      }
-
-      @Override
-      public void error(Throwable err) {
-        sprite.error(err);
-      }
-    });
-
-    // set callback for image
-    image.addCallback(new ResourceCallback<Image>() {
-      @Override
-      public void done(Image resource) {
-        sprite.doneLoadingImages();
-      }
-
-      @Override
-      public void error(Throwable err) {
-        sprite.error(err);
-      }
-    });
-
-    return sprite;
-  }
-
-  /**
-   * Return a {@link Sprite}, given a path to the json sprite description.
-   * <p>
-   * json data should be in the following format:
-   * 
-   * <pre>
-   * {@code {
-   *   "urls": ["images/peasprites2.png", "images/peasprites3.png"],
-   *   "sprites": [
-   *     {"id": "sprite_0", "url": 0, "x": 30, "y": 30, "w": 37, "h": 37},
-   *     {"id": "sprite_1", "url": 0, "x": 67, "y": 30, "w": 37, "h": 37},
-   *     {"id": "sprite_2", "url": 1, "x": 104, "y": 30, "w": 37, "h": 37},
-   *     {"id": "sprite_3", "url": 1, "x": 141, "y": 30, "w": 37, "h": 37}
-   *   ]}
-   * }
-   * </pre>
-   */
-  public static Sprite getSprite(String jsonPath) {
-    // temp image to prevent NPE if using the Sprite's Layer (Sprite.getLayer()) before the image
-    // has loaded or before a sprite has been set (Sprite.setSprite()).
-    final Image tempImage = graphics().createImage(1, 1);
-    final Sprite sprite = new Sprite(graphics().createImageLayer(tempImage));
-
-    // create asset watcher for the image assets
-    final AssetWatcher watcher = new AssetWatcher(new AssetWatcher.Listener() {
-      @Override
-      public void done() {
-        sprite.doneLoadingImages();
-      }
-
-      @Override
-      public void error(Throwable e) {
-        sprite.error(e);
-      }
-    });
-
-    // load and parse json, then add each image parsed from the json to the asset watcher to load
-    assetManager().getText(jsonPath, new ResourceCallback<String>() {
-      @Override
-      public void done(String json) {
-        try {
-          parseJson(null, sprite, json);
-          for (SpriteImage spriteImage : sprite.spriteImages()) {
-            watcher.add(spriteImage.image());
-          }
-          watcher.start();
-        } catch (Throwable err) {
-          sprite.error(err);
-          return;
-        }
-        sprite.doneLoadingData();
-      }
-
-      @Override
-      public void error(Throwable err) {
-        sprite.error(err);
-      }
-    });
-
-    return sprite;
-  }
-
-  /**
-   * Parse a json sprite sheet and add the sprite images to the sheet.
-   * <p>
-   * If images is null, the images urls are parsed from the json.
-   * 
-   * @param image Image to associate with each {@link SpriteImage}, or null to parse from the json
-   * @param sheet Sprite to store the {@link SpritesImage}s
-   * @param json json to parse
-   */
-  private static void parseJson(Image[] images, Sprite sprite, String json) {
-    Json.Object document = json().parse(json);
-
-    // parse image urls, if necessary
-    if (images == null || images.length == 0) {
-      Json.Array urls = document.getArray("urls");
-      Asserts.checkNotNull(urls, "No urls provided for sprite images");
-      images = new Image[urls.length()];
-      for (int i = 0; i < urls.length(); i++) {
-        images[i] = assetManager().getImage(urls.getString(i));
-      }
-    }
-
-    // parse the sprite images
-    Json.Array spriteImages = document.getArray("sprites");
-    for (int i = 0; i < spriteImages.length(); i++) {
-      Json.Object jsonSpriteImage = spriteImages.getObject(i);
-      String id = jsonSpriteImage.getString("id");
-      int imageId = jsonSpriteImage.getInt("url"); // will return 0 if not specified
-      Asserts.checkElementIndex(imageId, images.length, "URL must be an index into the URLs array");
-      int x = jsonSpriteImage.getInt("x");
-      int y = jsonSpriteImage.getInt("y");
-      int width = jsonSpriteImage.getInt("w");
-      int height = jsonSpriteImage.getInt("h");
-      SpriteImage spriteImage = new SpriteImage(images[imageId], x, y, width, height);
-      sprite.addSpriteImage(id, spriteImage);
-    }
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/sprites/SpritesDemo.java b/sample/showcase/core/src/playn/showcase/core/sprites/SpritesDemo.java
deleted file mode 100644
index 264b7fd..0000000
--- a/sample/showcase/core/src/playn/showcase/core/sprites/SpritesDemo.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/**
- * Copyright 2011 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.sprites;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static playn.core.PlayN.*;
-
-import playn.core.GroupLayer;
-import playn.core.Image;
-import playn.core.ImageLayer;
-import playn.core.Pointer;
-
-import playn.showcase.core.Demo;
-
-public class SpritesDemo extends Demo {
-  GroupLayer layer;
-  List<Pea> peas = new ArrayList<Pea>(0);
-
-  @Override
-  public String name() {
-    return "Sprites";
-  }
-
-  @Override
-  public void init() {
-    // create a group layer to hold everything
-    layer = graphics().createGroupLayer();
-    graphics().rootLayer().add(layer);
-
-    // create and add background image layer
-    Image bgImage = assetManager().getImage("sprites/bg.png");
-    ImageLayer bgLayer = graphics().createImageLayer(bgImage);
-    layer.add(bgLayer);
-
-    // add a listener for pointer (mouse, touch) input
-    pointer().setListener(new Pointer.Adapter() {
-      @Override
-      public void onPointerEnd(Pointer.Event event) {
-        Pea pea = new Pea(layer, event.x(), event.y());
-        peas.add(pea);
-      }
-    });
-  }
-
-  @Override
-  public void shutdown() {
-    pointer().setListener(null);
-
-    layer.destroy();
-    layer = null;
-  }
-
-  @Override
-  public void paint(float alpha) {
-    // layers automatically paint themselves (and their children). The rootlayer
-    // will paint itself, the background, and the pea group layer automatically
-    // so no need to do anything here!
-  }
-
-  @Override
-  public void update(float delta) {
-    for (Pea pea : peas) {
-      pea.update(delta);
-    }
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/core/swirl/SwirlDemo.java b/sample/showcase/core/src/playn/showcase/core/swirl/SwirlDemo.java
deleted file mode 100644
index e8bf4ce..0000000
--- a/sample/showcase/core/src/playn/showcase/core/swirl/SwirlDemo.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/**
- * Copyright 2010 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.core.swirl;
-
-import static playn.core.PlayN.assetManager;
-import static playn.core.PlayN.graphics;
-import static playn.core.PlayN.pointer;
-import playn.core.Game;
-import playn.core.GroupLayer;
-import playn.core.Image;
-import playn.core.ImageLayer;
-import playn.core.Pointer;
-import playn.showcase.core.Demo;
-
-public class SwirlDemo extends Demo {
-
-  GroupLayer groupLayer;
-  ImageLayer bgLayer;
-  ImageLayer layer0, layer1, layer2, layer3;
-
-  @Override
-  public String name() {
-    return "Swirl";
-  }
-
-  @Override
-  public void init() {
-    pointer().setListener(new Pointer.Adapter() {
-      @Override
-      public void onPointerStart(Pointer.Event event) {
-        doStuff();
-      }
-    });
-
-    Image background = assetManager().getImage("swirl/background.png");
-    Image catgirl = assetManager().getImage("swirl/girlcat.png");
-
-    groupLayer = graphics().createGroupLayer();
-    groupLayer.setOrigin(128, 128);
-    groupLayer.transform().translate(256, 256);
-    graphics().rootLayer().add(groupLayer);
-
-    bgLayer = graphics().createImageLayer(background);
-    bgLayer.setWidth(256);
-    bgLayer.setHeight(256);
-    bgLayer.setDepth(-1);
-    graphics().rootLayer().add(bgLayer);
-
-    layer0 = graphics().createImageLayer(catgirl);
-    layer1 = graphics().createImageLayer(catgirl);
-    layer2 = graphics().createImageLayer(catgirl);
-    layer3 = graphics().createImageLayer(catgirl);
-
-    groupLayer.add(layer0);
-    groupLayer.add(layer1);
-    groupLayer.add(layer2);
-    groupLayer.add(layer3);
-
-    layer0.setOrigin(50, 100);
-    layer1.setOrigin(50, 100);
-    layer2.setOrigin(50, 100);
-    layer3.setOrigin(50, 100);
-
-    layer0.transform().translate(0, 0);
-    layer1.transform().translate(256, 0);
-    layer2.transform().translate(256, 256);
-    layer3.transform().translate(0, 256);
-  }
-
-  @Override
-  public void shutdown() {
-    groupLayer.destroy();
-    groupLayer = null;
-    bgLayer.destroy();
-    bgLayer = null;
-    layer0 = layer1 = layer2 = layer3 = null;
-  }
-
-  private void doStuff() {
-  }
-
-  float angle = 0;
-  float scale = 1;
-
-  @Override
-  public void update(float delta) {
-    angle += delta * (float) Math.PI / 5000;
-    scale = (float) Math.sin(angle) + 0.5f;
-
-    layer0.transform().setRotation(angle);
-    layer1.transform().setRotation(angle);
-    layer2.transform().setRotation(angle);
-    layer3.transform().setRotation(angle);
-
-    layer0.transform().setUniformScale(scale);
-    layer1.transform().setUniformScale(scale);
-    layer2.transform().setUniformScale(scale);
-    layer3.transform().setUniformScale(scale);
-
-    groupLayer.transform().setRotation(angle);
-    groupLayer.transform().setUniformScale(scale);
-  }
-
-  @Override
-  public void paint(float alpha) {
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/java/ShowcaseJava.java b/sample/showcase/core/src/playn/showcase/java/ShowcaseJava.java
deleted file mode 100644
index 1760515..0000000
--- a/sample/showcase/core/src/playn/showcase/java/ShowcaseJava.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/**
- * Copyright 2010 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.java;
-
-import playn.core.PlayN;
-import playn.java.JavaAssetManager;
-import playn.java.JavaPlatform;
-import playn.showcase.core.Showcase;
-
-public class ShowcaseJava {
-
-  public static void main(String[] args) {
-    JavaAssetManager assets = JavaPlatform.register().assetManager();
-    assets.setPathPrefix("src/playn/showcase/resources");
-    PlayN.run(new Showcase());
-  }
-}
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-Gel.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-Gel.png
deleted file mode 100644
index 1a79adf..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-Gel.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-LeftRamp.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-LeftRamp.png
deleted file mode 100644
index 4c6d699..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-LeftRamp.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-Normal.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-Normal.png
deleted file mode 100644
index 0795b95..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-Normal.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-RightRamp.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-RightRamp.png
deleted file mode 100644
index 4386754..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-RightRamp.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-Spring.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-Spring.png
deleted file mode 100644
index a4f7a9c..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/Block-Spring.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/Cloud1.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/Cloud1.png
deleted file mode 100644
index ab4146e..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/Cloud1.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/Cloud3.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/Cloud3.png
deleted file mode 100644
index f87816a..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/Cloud3.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/bg.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/bg.png
deleted file mode 100644
index 919c57b..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/bg.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/chrome.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/chrome.png
deleted file mode 100644
index a3cf26c..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/chrome.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/pea.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/pea.png
deleted file mode 100644
index dae99e4..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/pea.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/peaglow.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/peaglow.png
deleted file mode 100644
index a97d294..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/peaglow.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/images/teleport.png b/sample/showcase/core/src/playn/showcase/resources/peas/images/teleport.png
deleted file mode 100644
index 5949c21..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/peas/images/teleport.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/peas/levels/level1.json b/sample/showcase/core/src/playn/showcase/resources/peas/levels/level1.json
deleted file mode 100644
index fcf3efe..0000000
--- a/sample/showcase/core/src/playn/showcase/resources/peas/levels/level1.json
+++ /dev/null
@@ -1,57 +0,0 @@
-{
-  "id": "level1",
-  "Entities": [
-    {"type": "Cloud1", "x": 1.0, "y": 1.00, "a": 0.0},
-    {"type": "Cloud3", "x": 14.0, "y": 2.00, "a": 0.0},
-
-    {"type": "Block", "x": 1.0, "y": 17.00, "a": 0.0},
-    {"type": "Block", "x": 1.0, "y": 15.25, "a": 0.0},
-    {"type": "Block", "x": 1.0, "y": 13.50, "a": 0.0},
-    {"type": "Block", "x": 1.0, "y": 11.75, "a": 0.0},
-    {"type": "Block", "x": 1.0, "y": 10.00, "a": 0.0},
-    {"type": "Block", "x": 1.0, "y":  8.25, "a": 0.0},
-    {"type": "Block", "x": 1.0, "y":  6.50, "a": 0.0},
-    
-    {"type": "FakeBlock", "x": 3.0, "y": 17.00, "a": 0.0},
-    {"type": "Portal", "x": 3.0, "y": 17.00, "a": 0.0},
-    
-    {"type": "Block", "x": 5.0, "y": 17.00, "a": 0.0},
-    {"type": "Block", "x": 5.0, "y": 15.25, "a": 0.0},
-    {"type": "BlockLeftRamp", "x": 5.0, "y": 13.50, "a": 0.0},
-    
-    {"type": "Block", "x": 7.0, "y": 17.00, "a": 0.0},
-    {"type": "Block", "x": 7.0, "y": 15.25, "a": 0.0},
-    {"type": "Block", "x": 7.0, "y": 13.50, "a": 0.0},
-    {"type": "Block", "x": 7.0, "y":  6.50, "a": 0.0},
-    {"type": "Block", "x": 7.0, "y":  4.75, "a": 0.0},
-    
-    {"type": "Block", "x": 9.0, "y": 17.00, "a": 0.0},
-    {"type": "Block", "x": 9.0, "y": 15.25, "a": 0.0},
-    {"type": "BlockRightRamp", "x": 9.0, "y": 13.50, "a": 0.0},
-    {"type": "FakeBlock", "x": 9.0, "y":  6.50, "a": 0.0},
-    {"type": "Portal", "x": 9.0, "y":  6.50, "a": 1.5},
-    {"type": "Block", "x": 9.0, "y":  4.75, "a": 0.0},
-    
-    {"type": "Block", "x": 11.0, "y": 17.00, "a": 0.0},
-    {"type": "BlockSpring", "x": 11.0, "y": 15.25, "a": 0.0},
-    
-    {"type": "BlockGel", "x": 13.0, "y": 17.00, "a": 0.0},
-    
-    {"type": "BlockGel", "x": 15.0, "y": 17.00, "a": 0.0},
-    {"type": "Block", "x": 15.0, "y": 10.00, "a": 0.0},
-    
-    {"type": "Block", "x": 17.0, "y": 17.00, "a": 0.0},
-    {"type": "BlockGel", "x": 17.0, "y": 10.00, "a": 0.0},
-    
-    {"type": "Block", "x": 19.0, "y": 17.00, "a": 0.0}, 
-    
-    {"type": "Block", "x": 21.0, "y": 17.00, "a": 0.0},
-    
-    {"type": "Block", "x": 23.0, "y": 17.00, "a": 0.0},
-    {"type": "Block", "x": 23.0, "y": 15.25, "a": 0.0},
-    {"type": "Block", "x": 23.0, "y": 13.50, "a": 0.0},
-    {"type": "Block", "x": 23.0, "y": 11.75, "a": 0.0},
-    {"type": "BlockRightRamp", "x": 23.0, "y": 10.0, "a": 0.0},
-    {"type": "Pea", "x": 23.0, "y": 9.5, "a": 0.5}
-  ]
-}
diff --git a/sample/showcase/core/src/playn/showcase/resources/sprites/bg.png b/sample/showcase/core/src/playn/showcase/resources/sprites/bg.png
deleted file mode 100644
index 919c57b..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/sprites/bg.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/sprites/pea.png b/sample/showcase/core/src/playn/showcase/resources/sprites/pea.png
deleted file mode 100644
index dae99e4..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/sprites/pea.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/sprites/peasprite.json b/sample/showcase/core/src/playn/showcase/resources/sprites/peasprite.json
deleted file mode 100644
index ddbdeba..0000000
--- a/sample/showcase/core/src/playn/showcase/resources/sprites/peasprite.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "sprites": [
-    {"id": "sprite_0", "x": 30, "y": 30, "w": 37, "h": 37},
-    {"id": "sprite_1", "x": 67, "y": 30, "w": 37, "h": 37},
-    {"id": "sprite_2", "x": 104, "y": 30, "w": 37, "h": 37},
-    {"id": "sprite_3", "x": 141, "y": 30, "w": 37, "h": 37}
-  ]
-}
\ No newline at end of file
diff --git a/sample/showcase/core/src/playn/showcase/resources/sprites/peasprite2.json b/sample/showcase/core/src/playn/showcase/resources/sprites/peasprite2.json
deleted file mode 100644
index bd9a6db..0000000
--- a/sample/showcase/core/src/playn/showcase/resources/sprites/peasprite2.json
+++ /dev/null
@@ -1,21 +0,0 @@
-{
-  "urls": ["sprites/peasprites2.png", "sprites/peasprites3.png"],
-  "sprites": [
-    {"id": "pea1_normal", "url": 0, "x": 30, "y": 30, "w": 37, "h": 37},
-    {"id": "pea1_invert", "url": 0, "x": 30, "y": 130, "w": 37, "h": 37},
-    {"id": "pea1_normal_bright", "url": 1, "x": 30, "y": 30, "w": 37, "h": 37},
-    {"id": "pea1_invert_bright", "url": 1, "x": 30, "y": 130, "w": 37, "h": 37},
-    {"id": "pea2_normal", "url": 0, "x": 67, "y": 30, "w": 37, "h": 37},
-    {"id": "pea2_invert", "url": 0, "x": 67, "y": 130, "w": 37, "h": 37},
-    {"id": "pea2_normal_bright", "url": 1, "x": 67, "y": 30, "w": 37, "h": 37},
-    {"id": "pea2_invert_bright", "url": 1, "x": 67, "y": 130, "w": 37, "h": 37},
-    {"id": "pea3_normal", "url": 0, "x": 104, "y": 30, "w": 37, "h": 37},
-    {"id": "pea3_invert", "url": 0, "x": 104, "y": 130, "w": 37, "h": 37},
-    {"id": "pea3_normal_bright", "url": 1, "x": 104, "y": 30, "w": 37, "h": 37},
-    {"id": "pea3_invert_bright", "url": 1, "x": 104, "y": 130, "w": 37, "h": 37},
-    {"id": "pea4_normal", "url": 0, "x": 141, "y": 30, "w": 37, "h": 37},
-    {"id": "pea4_invert", "url": 0, "x": 141, "y": 130, "w": 37, "h": 37},
-    {"id": "pea4_normal_bright", "url": 1, "x": 141, "y": 30, "w": 37, "h": 37},
-    {"id": "pea4_invert_bright", "url": 1, "x": 141, "y": 130, "w": 37, "h": 37}
-  ]
-}
diff --git a/sample/showcase/core/src/playn/showcase/resources/sprites/peasprites.png b/sample/showcase/core/src/playn/showcase/resources/sprites/peasprites.png
deleted file mode 100644
index ea816c0..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/sprites/peasprites.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/sprites/peasprites2.png b/sample/showcase/core/src/playn/showcase/resources/sprites/peasprites2.png
deleted file mode 100644
index 0a2d422..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/sprites/peasprites2.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/sprites/peasprites3.png b/sample/showcase/core/src/playn/showcase/resources/sprites/peasprites3.png
deleted file mode 100644
index 6159d41..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/sprites/peasprites3.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/swirl/background.png b/sample/showcase/core/src/playn/showcase/resources/swirl/background.png
deleted file mode 100644
index 919c57b..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/swirl/background.png and /dev/null differ
diff --git a/sample/showcase/core/src/playn/showcase/resources/swirl/girlcat.png b/sample/showcase/core/src/playn/showcase/resources/swirl/girlcat.png
deleted file mode 100755
index dc0538b..0000000
Binary files a/sample/showcase/core/src/playn/showcase/resources/swirl/girlcat.png and /dev/null differ
diff --git a/sample/showcase/flash/pom.xml b/sample/showcase/flash/pom.xml
deleted file mode 100755
index 3656491..0000000
--- a/sample/showcase/flash/pom.xml
+++ /dev/null
@@ -1,141 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.googlecode.playn</groupId>
-    <artifactId>playn-showcase</artifactId>
-    <version>1.0-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>playn-showcase-flash</artifactId>
-  <name>PlayN Showcase Flash</name>
-  <packaging>war</packaging>
-
-  <properties>
-    <gwt.module>playn.showcase.ShowcaseFlash</gwt.module>
-    <gwt.name>showcaseflash</gwt.name>
-  </properties>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-peaphysics</artifactId>
-      <version>${coreversion}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.gwt</groupId>
-      <artifactId>gwt-dev</artifactId>
-      <version>${gwtversion}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.gwt</groupId>
-      <artifactId>gwt-user</artifactId>
-      <version>${gwtversion}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-core</artifactId>
-      <version>${coreversion}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-jbox2d</artifactId>
-      <version>${coreversion}</version>
-    </dependency>
-
-
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-flash</artifactId>
-      <version>${coreversion}</version>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <sourceDirectory>src</sourceDirectory>
-    <outputDirectory>war/WEB-INF/classes</outputDirectory>
-
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-source-plugin</artifactId>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-war-plugin</artifactId>
-        <version>2.1.1</version>
-        <configuration>
-          <webXml>war/WEB-INF/web.xml</webXml>
-        </configuration>
-      </plugin>
-
-      <!-- download and unpack flex4sdk -->
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-dependency-plugin</artifactId>
-        <version>2.2</version>
-        <executions>
-          <execution>
-            <id>unpack</id>
-            <phase>validate</phase>
-            <goals>
-              <goal>unpack</goal>
-            </goals>
-            <configuration>
-              <artifactItems>
-                <artifactItem>
-                  <groupId>com.adobe.flex</groupId>
-                  <artifactId>flex-sdk</artifactId>
-                  <version>4.1.0.16076_mpl</version>
-                  <type>zip</type>
-                  <overWrite>false</overWrite>
-                  <outputDirectory>${project.build.directory}/flex4sdk</outputDirectory>
-                </artifactItem>
-              </artifactItems>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-antrun-plugin</artifactId>
-        <executions>
-          <execution>
-            <phase>validate</phase>
-            <goals>
-              <goal>run</goal>
-            </goals>
-            <configuration>
-              <tasks>
-                <!-- Dependency plugin discards file permissions so we need to set them manually -->
-                <chmod file="${project.build.directory}/flex4sdk/bin/mxmlc" perm="ugo+rx"/>
-	     </tasks>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>gwt-maven-plugin</artifactId>
-	<configuration>
-	  <extraJvmArgs>-Dflexsdk.home=${project.build.directory}/flex4sdk</extraJvmArgs>
-	</configuration>
-      </plugin>
-    </plugins>
-
-    <resources>
-      <resource>
-        <directory>${basedir}/src</directory>
-      </resource>
-    </resources>
-  </build>
-</project>
diff --git a/sample/showcase/flash/src/playn/showcase/ShowcaseFlash.gwt.xml b/sample/showcase/flash/src/playn/showcase/ShowcaseFlash.gwt.xml
deleted file mode 100644
index cf199ce..0000000
--- a/sample/showcase/flash/src/playn/showcase/ShowcaseFlash.gwt.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<!--
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License. 
--->
-<module rename-to='showcaseflash'>
-  <inherits name='playn.PlayNFlash'/>
-  <!-- for the peas sample -->
-  <inherits name="org.jbox2d.GwtBox2D" />
-
-  <source path='core'/>
-  <source path='flash'/>
-
-  <public path="resources" />
-
-  <entry-point class='playn.showcase.flash.ShowcaseFlash'/>
-</module>
diff --git a/sample/showcase/flash/src/playn/showcase/flash/ShowcaseFlash.java b/sample/showcase/flash/src/playn/showcase/flash/ShowcaseFlash.java
deleted file mode 100644
index 5ec13c0..0000000
--- a/sample/showcase/flash/src/playn/showcase/flash/ShowcaseFlash.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * Copyright 2010 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.flash;
-
-import playn.core.PlayN;
-import playn.flash.FlashAssetManager;
-import playn.flash.FlashGame;
-import playn.flash.FlashPlatform;
-import playn.showcase.core.Showcase;
-
-public class ShowcaseFlash extends FlashGame {
-
-  @Override
-  public void start() {
-    FlashAssetManager assets = FlashPlatform.register().assetManager();
-    assets.setPathPrefix("showcase/");
-    PlayN.run(new Showcase());
-  }
-}
diff --git a/sample/showcase/flash/war/ShowcaseFlash.html b/sample/showcase/flash/war/ShowcaseFlash.html
deleted file mode 100644
index 943881c..0000000
--- a/sample/showcase/flash/war/ShowcaseFlash.html
+++ /dev/null
@@ -1,25 +0,0 @@
-<!--
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License. 
--->
-<!DOCTYPE html>
-<html>
-  <head>
-    <title>PlayN Showcase</title>
-  </head>
-  <body bgcolor="black">
-    <div id='flash_player'></div>
-    <script src="showcaseflash/showcaseflash.nocache.js"></script>
-  </body>
-</html>
diff --git a/sample/showcase/flash/war/WEB-INF/.gitignore b/sample/showcase/flash/war/WEB-INF/.gitignore
deleted file mode 100644
index 489267f..0000000
--- a/sample/showcase/flash/war/WEB-INF/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-deploy
-classes
-lib
diff --git a/sample/showcase/flash/war/WEB-INF/web.xml b/sample/showcase/flash/war/WEB-INF/web.xml
deleted file mode 100644
index e3e2350..0000000
--- a/sample/showcase/flash/war/WEB-INF/web.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xmlns="http://java.sun.com/xml/ns/javaee"
-  xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
-  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
-  <!-- TODO: Add <servlet> tags for each servlet here. -->
-  <!-- TODO: Add <servlet-mapping> tags for each <servlet> here. -->
-  <welcome-file-list>
-    <welcome-file>ShowcaseFlash.html</welcome-file>
-  </welcome-file-list>
-</web-app>
diff --git a/sample/showcase/html/pom.xml b/sample/showcase/html/pom.xml
deleted file mode 100644
index fe43644..0000000
--- a/sample/showcase/html/pom.xml
+++ /dev/null
@@ -1,72 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.googlecode.playn</groupId>
-    <artifactId>playn-showcase</artifactId>
-    <version>1.0-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>playn-showcase-html</artifactId>
-  <packaging>war</packaging>
-  <name>PlayN Showcase HTML</name>
-
-  <properties>
-    <gwt.module>playn.showcase.Showcase</gwt.module>
-    <gwt.name>showcase</gwt.name>
-  </properties>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-showcase-core</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-html</artifactId>
-      <version>${coreversion}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.gwt</groupId>
-      <artifactId>gwt-dev</artifactId>
-      <version>${gwtversion}</version>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <sourceDirectory>src</sourceDirectory>
-    <outputDirectory>war/WEB-INF/classes</outputDirectory>
-
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-source-plugin</artifactId>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-war-plugin</artifactId>
-        <version>2.1.1</version>
-        <configuration>
-          <webXml>war/WEB-INF/web.xml</webXml>
-	  <warSourceDirectory>war</warSourceDirectory>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>gwt-maven-plugin</artifactId>
-      </plugin>
-    </plugins>
-
-    <resources>
-      <resource>
-        <directory>${basedir}/src</directory>
-      </resource>
-    </resources>
-  </build>
-</project>
diff --git a/sample/showcase/html/src/playn/showcase/Showcase.gwt.xml b/sample/showcase/html/src/playn/showcase/Showcase.gwt.xml
deleted file mode 100644
index 37ef5d3..0000000
--- a/sample/showcase/html/src/playn/showcase/Showcase.gwt.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<!--
- * Copyright 2010 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License. 
--->
-<module rename-to='showcase'>
-  <inherits name='playn.PlayN'/>
-  <!-- for the peas sample -->
-  <inherits name="org.jbox2d.GwtBox2D" />
-
-  <!--
-    Optionally, enable gwt-log's advanced logging features:
-    
-      <inherits name="playn.logging.Enhanced" />
-  -->
-
-  <source path='core'/>
-  <source path='html'/>
-
-  <public path="resources" />
-
-  <entry-point class='playn.showcase.html.ShowcaseHtml'/>
-</module>
diff --git a/sample/showcase/html/src/playn/showcase/html/ShowcaseHtml.java b/sample/showcase/html/src/playn/showcase/html/ShowcaseHtml.java
deleted file mode 100644
index 449de72..0000000
--- a/sample/showcase/html/src/playn/showcase/html/ShowcaseHtml.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/**
- * Copyright 2010 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.showcase.html;
-
-import playn.html.HtmlAssetManager;
-
-import playn.core.PlayN;
-import playn.html.HtmlGame;
-import playn.html.HtmlPlatform;
-import playn.showcase.core.Showcase;
-
-public class ShowcaseHtml extends HtmlGame {
-
-  @Override
-  public void start() {
-    HtmlAssetManager assets = HtmlPlatform.register().assetManager();
-    assets.setPathPrefix("showcase/");
-    PlayN.run(new Showcase());
-  }
-}
diff --git a/sample/showcase/html/war/Showcase.html b/sample/showcase/html/war/Showcase.html
deleted file mode 100644
index 5885b7d..0000000
--- a/sample/showcase/html/war/Showcase.html
+++ /dev/null
@@ -1,24 +0,0 @@
-<!--
- * Copyright 2011 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License. 
--->
-<!DOCTYPE html>
-<html>
-  <head>
-    <title>PlayN Showcase</title>
-  </head>
-  <body bgcolor="black">
-    <script src="showcase/showcase.nocache.js"></script>
-  </body>
-</html>
diff --git a/sample/showcase/html/war/WEB-INF/.gitignore b/sample/showcase/html/war/WEB-INF/.gitignore
deleted file mode 100644
index 489267f..0000000
--- a/sample/showcase/html/war/WEB-INF/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-deploy
-classes
-lib
diff --git a/sample/showcase/html/war/WEB-INF/web.xml b/sample/showcase/html/war/WEB-INF/web.xml
deleted file mode 100644
index 34569d0..0000000
--- a/sample/showcase/html/war/WEB-INF/web.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xmlns="http://java.sun.com/xml/ns/javaee"
-  xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
-  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
-  <!-- TODO: Add <servlet> tags for each servlet here. -->
-  <!-- TODO: Add <servlet-mapping> tags for each <servlet> here. -->
-  <welcome-file-list>
-    <welcome-file>Showcase.html</welcome-file>
-  </welcome-file-list>
-</web-app>
diff --git a/sample/showcase/pom.xml b/sample/showcase/pom.xml
deleted file mode 100644
index c2f6e8c..0000000
--- a/sample/showcase/pom.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.googlecode.playn</groupId>
-    <artifactId>playn-demos</artifactId>
-    <version>1.0-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>playn-showcase</artifactId>
-  <name>PlayN Showcase Metaproject</name>
-  <packaging>pom</packaging>
-
-  <modules>
-    <module>core</module> 
-    <module>html</module>
-    <module>flash</module>
-    <module>android</module>
-  </modules>
-</project>
diff --git a/sample/sprites/android/.gitignore b/sample/sprites/android/.gitignore
new file mode 100644
index 0000000..ddb0a2d
--- /dev/null
+++ b/sample/sprites/android/.gitignore
@@ -0,0 +1,2 @@
+bin
+.settings
diff --git a/sample/sprites/android/AndroidManifest.xml b/sample/sprites/android/AndroidManifest.xml
new file mode 100644
index 0000000..e0dc998
--- /dev/null
+++ b/sample/sprites/android/AndroidManifest.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+      package="playn.sample.sprites.android"
+      android:screenOrientation="landscape"
+      android:versionCode="1"
+      android:versionName="1.0">
+    <uses-sdk android:minSdkVersion="6" android:targetSdkVersion="11" />
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
+    <application android:icon="@drawable/icon" android:label="@string/app_name" android:debuggable="true">
+        <activity android:name="SpritesGameActivity"
+                  android:label="@string/app_name"
+                  android:theme="@android:style/Theme.NoTitleBar.Fullscreen"
+                  android:configChanges="keyboardHidden|orientation">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+    </application>
+
+
+</manifest> 
diff --git a/sample/sprites/android/default.properties b/sample/sprites/android/default.properties
new file mode 100644
index 0000000..370331f
--- /dev/null
+++ b/sample/sprites/android/default.properties
@@ -0,0 +1,12 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system use,
+# "build.properties", and override values to adapt the script to your
+# project structure.
+
+# Project target.
+target=android-11
+android.library.reference.1=../../../android
diff --git a/sample/sprites/android/proguard.cfg b/sample/sprites/android/proguard.cfg
new file mode 100644
index 0000000..8ad7d33
--- /dev/null
+++ b/sample/sprites/android/proguard.cfg
@@ -0,0 +1,34 @@
+-optimizationpasses 5
+-dontusemixedcaseclassnames
+-dontskipnonpubliclibraryclasses
+-dontpreverify
+-verbose
+-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
+
+-keep public class * extends android.app.Activity
+-keep public class * extends android.app.Application
+-keep public class * extends android.app.Service
+-keep public class * extends android.content.BroadcastReceiver
+-keep public class * extends android.content.ContentProvider
+-keep public class com.android.vending.licensing.ILicensingService
+
+-keepclasseswithmembernames class * {
+    native <methods>;
+}
+
+-keepclasseswithmembernames class * {
+    public <init>(android.content.Context, android.util.AttributeSet);
+}
+
+-keepclasseswithmembernames class * {
+    public <init>(android.content.Context, android.util.AttributeSet, int);
+}
+
+-keepclassmembers enum * {
+    public static **[] values();
+    public static ** valueOf(java.lang.String);
+}
+
+-keep class * implements android.os.Parcelable {
+  public static final android.os.Parcelable$Creator *;
+}
diff --git a/sample/sprites/android/res/values/strings.xml b/sample/sprites/android/res/values/strings.xml
new file mode 100644
index 0000000..49a56e4
--- /dev/null
+++ b/sample/sprites/android/res/values/strings.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">Sprites</string>
+</resources>
diff --git a/sample/sprites/android/sprites-android.launch b/sample/sprites/android/sprites-android.launch
new file mode 100644
index 0000000..a3b793a
--- /dev/null
+++ b/sample/sprites/android/sprites-android.launch
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="com.android.ide.eclipse.adt.debug.LaunchConfigType">
+<intAttribute key="com.android.ide.eclipse.adt.action" value="0"/>
+<stringAttribute key="com.android.ide.eclipse.adt.commandline" value=""/>
+<intAttribute key="com.android.ide.eclipse.adt.delay" value="0"/>
+<booleanAttribute key="com.android.ide.eclipse.adt.nobootanim" value="false"/>
+<intAttribute key="com.android.ide.eclipse.adt.speed" value="0"/>
+<booleanAttribute key="com.android.ide.eclipse.adt.target" value="false"/>
+<booleanAttribute key="com.android.ide.eclipse.adt.wipedata" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/sprites-android"/>
+<listEntry value="/sprites-android/AndroidManifest.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="4"/>
+<listEntry value="1"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.jdt.launching.ALLOW_TERMINATE" value="true"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="sprites-android"/>
+</launchConfiguration>
diff --git a/sample/sprites/android/src/playn/sample/sprites/android/SpritesGameActivity.java b/sample/sprites/android/src/playn/sample/sprites/android/SpritesGameActivity.java
new file mode 100644
index 0000000..fa3cea3
--- /dev/null
+++ b/sample/sprites/android/src/playn/sample/sprites/android/SpritesGameActivity.java
@@ -0,0 +1,29 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.sprites.android;
+
+import playn.android.GameActivity;
+import playn.core.PlayN;
+import playn.sample.sprites.core.SpritesGame;
+
+public class SpritesGameActivity extends GameActivity {
+
+  @Override
+  public void main(){
+    platform().assetManager().setPathPrefix("playn/sample/sprites/resources");
+    PlayN.run(new SpritesGame());
+  }
+}
diff --git a/sample/sprites/core/.gitignore b/sample/sprites/core/.gitignore
new file mode 100644
index 0000000..ddb0a2d
--- /dev/null
+++ b/sample/sprites/core/.gitignore
@@ -0,0 +1,2 @@
+bin
+.settings
diff --git a/sample/sprites/core/build.xml b/sample/sprites/core/build.xml
new file mode 100644
index 0000000..9d2fcea
--- /dev/null
+++ b/sample/sprites/core/build.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0"?>
+<project name="sprites" default="compile">
+  <property name="java.classname" value="playn.sample.sprites.java.SpritesGameJava"/>
+  <property name="html.classname" value="playn.sample.sprites.SpritesGame"/>
+  <property name="html.index" value="SpritesGame.html"/>
+  <import file="../../build-common.xml"/>
+</project>
diff --git a/sample/sprites/core/pom.xml b/sample/sprites/core/pom.xml
new file mode 100644
index 0000000..838d592
--- /dev/null
+++ b/sample/sprites/core/pom.xml
@@ -0,0 +1,48 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  
+  <parent>
+    <groupId>com.googlecode.playn</groupId>
+    <artifactId>playn-sprites-project</artifactId>
+    <version>1.0-SNAPSHOT</version>
+  </parent>
+
+  <groupId>com.googlecode.playn</groupId>
+  <artifactId>playn-sprites-core</artifactId>
+  <name>PlayN Sprites Core</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.google.gwt</groupId>
+      <artifactId>gwt-dev</artifactId>
+      <version>${gwtversion}</version>
+      <scope>test</scope>
+    </dependency>
+
+    <dependency>
+      <groupId>com.googlecode.playn</groupId>
+      <artifactId>core</artifactId>
+      <version>${coreversion}</version>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <sourceDirectory>src</sourceDirectory>
+
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-source-plugin</artifactId>
+      </plugin>
+    </plugins>
+    <resources>
+      <resource>
+        <directory>${basedir}/src</directory>
+      </resource>
+      <resource>
+        <directory>${basedir}/war/WEB-INF/classes</directory>
+      </resource>
+    </resources>
+  </build>
+</project>
diff --git a/sample/sprites/core/sprites-html.launch b/sample/sprites/core/sprites-html.launch
new file mode 100644
index 0000000..0e1babc
--- /dev/null
+++ b/sample/sprites/core/sprites-html.launch
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="com.google.gdt.eclipse.suite.webapp">
+<stringAttribute key="com.google.gdt.eclipse.suiteMainTypeProcessor.PREVIOUSLY_SET_MAIN_TYPE_NAME" value="com.google.gwt.dev.DevMode"/>
+<booleanAttribute key="com.google.gdt.eclipse.suiteWarArgumentProcessor.IS_WAR_FROM_PROJECT_PROPERTIES" value="false"/>
+<listAttribute key="com.google.gwt.eclipse.core.ENTRY_POINT_MODULES">
+<listEntry value="playn.sample.sprites.SpritesGame"/>
+</listAttribute>
+<stringAttribute key="com.google.gwt.eclipse.core.URL" value="SpritesGame.html"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/sprites"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="4"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="com.google.gwt.eclipse.core.moduleClasspathProvider"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="com.google.gwt.dev.DevMode"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-startupUrl SpritesGame.html -war &quot;${project_loc:/sprites}/war&quot; -remoteUI &quot;${gwt_remote_ui_server_port}:${unique_id}&quot; -logLevel INFO -codeServerPort 9997 -port 8888 playn.sample.sprites.SpritesGame playn.sample.sprites.SpritesGame"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="sprites"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Xmx512m"/>
+</launchConfiguration>
diff --git a/sample/sprites/core/sprites-java.launch b/sample/sprites/core/sprites-java.launch
new file mode 100644
index 0000000..ae34b99
--- /dev/null
+++ b/sample/sprites/core/sprites-java.launch
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.jdt.launching.localJavaApplication">
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/sprites/src/playn/sample/sprites/java/SpritesGameJava.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="playn.sample.sprites.java.SpritesGameJava"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="sprites"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-ea"/>
+</launchConfiguration>
diff --git a/sample/sprites/core/src/playn/sample/sprites/SpritesGame.gwt.xml b/sample/sprites/core/src/playn/sample/sprites/SpritesGame.gwt.xml
new file mode 100644
index 0000000..0800f1b
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/SpritesGame.gwt.xml
@@ -0,0 +1,31 @@
+<!--
+ * Copyright 2010 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<module rename-to='spritesgame'>
+  <inherits name='playn.PlayN'/>
+
+  <!--
+    Optionally, enable gwt-log's advanced logging features:
+    
+      <inherits name="playn.logging.Enhanced" />
+  -->
+
+  <source path='core'/>
+  <source path='html'/>
+
+  <public path="resources" />
+
+  <entry-point class='playn.sample.sprites.html.SpritesGameHtml'/>
+</module>
diff --git a/sample/sprites/core/src/playn/sample/sprites/SpritesGameFlash.gwt.xml b/sample/sprites/core/src/playn/sample/sprites/SpritesGameFlash.gwt.xml
new file mode 100644
index 0000000..17050ac
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/SpritesGameFlash.gwt.xml
@@ -0,0 +1,25 @@
+<!--
+ * Copyright 2011 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<module rename-to='spritesgameflash'>
+  <inherits name='playn.PlayNFlash'/>
+
+  <source path='core'/>
+  <source path='flash'/>
+
+  <public path="resources" />
+
+  <entry-point class='playn.sample.sprites.flash.SpritesGameFlash'/>
+</module>
diff --git a/sample/sprites/core/src/playn/sample/sprites/core/Pea.java b/sample/sprites/core/src/playn/sample/sprites/core/Pea.java
new file mode 100644
index 0000000..8db3996
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/core/Pea.java
@@ -0,0 +1,71 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.sprites.core;
+
+import static playn.core.PlayN.log;
+
+import playn.core.GroupLayer;
+import playn.core.ResourceCallback;
+import playn.sample.sprites.core.sprite.Sprite;
+import playn.sample.sprites.core.sprite.SpriteLoader;
+
+public class Pea {
+  public static String IMAGE = "images/peasprites.png";
+  public static String JSON = "sprites/peasprite.json";
+  public static String JSON_WITH_IMAGE = "sprites/peasprite2.json";
+  private Sprite sprite;
+  private int spriteIndex = 0;
+  private float angle;
+  private boolean hasLoaded = false; // set to true when resources have loaded and we can update
+
+  public Pea(final GroupLayer peaLayer, final float x, final float y) {
+    // Sprite method #1: use a sprite image and json data describing the sprites
+    sprite = SpriteLoader.getSprite(IMAGE, JSON);
+
+    // Sprite method #2: use json data describing the sprites and containing the image urls
+    // sprite = SpriteLoader.getSprite(JSON_WITH_IMAGE);
+
+    // Add a callback for when the image loads.
+    // This is necessary because we can't use the width/height (to center the
+    // image) until after the image has been loaded
+    sprite.addCallback(new ResourceCallback<Sprite>() {
+      @Override
+      public void done(Sprite sprite) {
+        sprite.setSprite(spriteIndex);
+        sprite.layer().setOrigin(sprite.width() / 2f, sprite.height() / 2f);
+        sprite.layer().setTranslation(x, y);
+        peaLayer.add(sprite.layer());
+        hasLoaded = true;
+      }
+
+      @Override
+      public void error(Throwable err) {
+        log().error("Error loading image!", err);
+      }
+    });
+  }
+
+  public void update(float delta) {
+    if (hasLoaded) {
+      if (Math.random() > 0.95) {
+        spriteIndex = (spriteIndex + 1) % sprite.numSprites();
+        sprite.setSprite(spriteIndex);
+      }
+      angle += delta;
+      sprite.layer().setRotation(angle);
+    }
+  }
+}
diff --git a/sample/sprites/core/src/playn/sample/sprites/core/SpritesGame.java b/sample/sprites/core/src/playn/sample/sprites/core/SpritesGame.java
new file mode 100644
index 0000000..257f176
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/core/SpritesGame.java
@@ -0,0 +1,72 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.sprites.core;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static playn.core.PlayN.*;
+
+import playn.core.Game;
+import playn.core.GroupLayer;
+import playn.core.Image;
+import playn.core.ImageLayer;
+import playn.core.Pointer;
+
+public class SpritesGame implements Game {
+  GroupLayer peaLayer;
+  List<Pea> peas = new ArrayList<Pea>(0);
+
+  @Override
+  public void init() {
+    // create and add background image layer
+    Image bgImage = assetManager().getImage("images/bg.png");
+    ImageLayer bgLayer = graphics().createImageLayer(bgImage);
+    graphics().rootLayer().add(bgLayer);
+
+    // create a group layer to hold the peas
+    peaLayer = graphics().createGroupLayer();
+    graphics().rootLayer().add(peaLayer);
+
+    // add a listener for pointer (mouse, touch) input
+    pointer().setListener(new Pointer.Adapter() {
+      @Override
+      public void onPointerEnd(Pointer.Event event) {
+        Pea pea = new Pea(peaLayer, event.x(), event.y());
+        peas.add(pea);
+      }
+    });
+  }
+
+  @Override
+  public void paint(float alpha) {
+    // layers automatically paint themselves (and their children). The rootlayer
+    // will paint itself, the background, and the pea group layer automatically
+    // so no need to do anything here!
+  }
+
+  @Override
+  public void update(float delta) {
+    for (Pea pea : peas) {
+      pea.update(delta);
+    }
+  }
+
+  @Override
+  public int updateRate() {
+    return 25;
+  }
+}
diff --git a/sample/sprites/core/src/playn/sample/sprites/core/sprite/Sprite.java b/sample/sprites/core/src/playn/sample/sprites/core/sprite/Sprite.java
new file mode 100644
index 0000000..80dd081
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/core/sprite/Sprite.java
@@ -0,0 +1,203 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.sprites.core.sprite;
+
+import static playn.core.PlayN.log;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+
+import playn.core.Asserts;
+import playn.core.ImageLayer;
+import playn.core.ResourceCallback;
+
+/**
+ * A Sprite is a collection of {@link SpriteImage}s.
+ * <p>
+ * Create a Sprite from an image and json data using
+ * {@link SpriteLoader#getSprite(String imageUrl, String jsonUrl)}.
+ * <p>
+ * Create a Sprite from json data using {@link SpriteLoader#getSprite(String json)}.
+ * <p>
+ * To use, add {@link #layer()} to a {@link Layer} in your game. To change sprites, call
+ * {@link #setSprite(int)}.
+ */
+public class Sprite {
+  private ImageLayer layer;
+  private List<SpriteImage> spriteImages;
+  private HashMap<String, Integer> spriteIdMap;
+  private ResourceCallback<Sprite> callback;
+  private SpriteImage current;
+  private int currentId = -1;
+  private boolean imagesDone = false; // true when images have finished loading
+  private boolean dataDone = false; // true when sprite data has finished loading
+
+  /**
+   * Do not call directly. Create using {@link SpriteLoader#getSprite(String, String)}
+   */
+  Sprite(ImageLayer imageLayer) {
+    this.layer = imageLayer;
+    spriteImages = new ArrayList<SpriteImage>(0);
+    spriteIdMap = new HashMap<String, Integer>();
+  }
+
+  /**
+   * Set callback that will be called when both the sprite data and sprite image have been loaded.
+   */
+  public void addCallback(ResourceCallback<Sprite> callback) {
+    this.callback = callback;
+    if (isReady()) {
+      callback.done(this);
+    }
+  }
+
+  /**
+   * Return the sprite {@link ImageLayer}.
+   */
+  public ImageLayer layer() {
+    return layer;
+  }
+
+  /**
+   * Return the number of sprites.
+   */
+  public int numSprites() {
+    return (spriteImages == null ? 0 : spriteImages.size());
+  }
+
+  /**
+   * Return the height of the current sprite.
+   */
+  public float height() {
+    if (current != null) {
+      return current.height();
+    } else {
+      return 1;
+    }
+  }
+
+  /**
+   * Return true when both the sprite data and the sprite image have been loaded.
+   * <p>
+   * @see #addCallback(ResourceCallback)
+   */
+  public boolean isReady() {
+    return imagesDone && dataDone;
+  }
+
+  /**
+   * Set the current sprite via the index.
+   * <p>
+   * The index is an integer between 0 and the number of sprites (@see {@link #numSprites()})
+   */
+  public void setSprite(int index) {
+    Asserts.checkElementIndex(index, spriteImages.size(), "Invalid sprite index");
+    if (index != currentId) {
+      current = spriteImages.get(index);
+      currentId = index;
+      updateLayer();
+    }
+  }
+
+  /**
+   * Set the current sprite via the sprite's id.
+   */
+  public void setSprite(String id) {
+    setSprite(Asserts.checkNotNull(spriteIdMap.get(id), "Invalid sprite id"));
+  }
+
+  /**
+   * Return the width of the current sprite.
+   */
+  public float width() {
+    if (current != null) {
+      return current.width();
+    } else {
+      return 1;
+    }
+  }
+
+  /**
+   * Add a {@link SpriteImage} to the sprites.
+   */
+  void addSpriteImage(String key, SpriteImage spriteImage) {
+    spriteIdMap.put(key, spriteImages.size());
+    spriteImages.add(spriteImage);
+  }
+
+  /**
+   * Should be called when the sprite data and sprite image have been loaded. Will handle calling
+   * the {@link ResourceCallback} of the {@link Sprite}.
+   */
+  void done() {
+    if (callback != null) {
+      callback.done(this);
+    }
+  }
+
+  /**
+   * Should be called when the sprite image(s) is done loading.
+   */
+  void doneLoadingImages() {
+    imagesDone = true;
+    if (isReady()) {
+      done();
+    }
+  }
+
+  /**
+   * Should be called when the sprite data is done loading.
+   */
+  void doneLoadingData() {
+    dataDone = true;
+    if (isReady()) {
+      done();
+    }
+  }
+
+  /**
+   * Should be called if an error occurs when loading the sprite image or data. Will handle calling
+   * the {@link ResourceCallback} of the {@link Sprite}.
+   */
+  void error(Throwable err) {
+    if (callback != null) {
+      callback.error(err);
+    } else {
+      // don't let the error fall on deaf ears
+      log().error("Error loading sprite", err);
+    }
+  }
+
+  /**
+   * Returns the {@link SpriteImage}s associated with this Sprite.
+   */
+  List<SpriteImage> spriteImages() {
+    return spriteImages;
+  }
+
+  /**
+   * Update the Sprite layer.
+   */
+  private void updateLayer() {
+    if (current != null) {
+      layer.setImage(current.image());
+      layer.setWidth(current.width());
+      layer.setHeight(current.height());
+      layer.setSourceRect(current.x(), current.y(), current.width(), current.height());
+    }
+  }
+}
diff --git a/sample/sprites/core/src/playn/sample/sprites/core/sprite/SpriteImage.java b/sample/sprites/core/src/playn/sample/sprites/core/sprite/SpriteImage.java
new file mode 100644
index 0000000..ab20ac2
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/core/sprite/SpriteImage.java
@@ -0,0 +1,57 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.sprites.core.sprite;
+
+import playn.core.Image;
+
+/**
+ * Represents the data associated with a single sprite.
+ */
+class SpriteImage {
+  private final Image image;
+  private final int x;
+  private final int y;
+  private final int width;
+  private final int height;
+
+  public SpriteImage(final Image image, int x, int y, int width, int height) {
+    this.image = image;
+    this.x = x;
+    this.y = y;
+    this.width = width;
+    this.height = height;
+  }
+
+  public Image image() {
+    return image;
+  }
+
+  public int height() {
+    return height;
+  }
+
+  public int width() {
+    return width;
+  }
+
+  public int x() {
+    return x;
+  }
+
+  public int y() {
+    return y;
+  }
+}
diff --git a/sample/sprites/core/src/playn/sample/sprites/core/sprite/SpriteLoader.java b/sample/sprites/core/src/playn/sample/sprites/core/sprite/SpriteLoader.java
new file mode 100644
index 0000000..29a6cbe
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/core/sprite/SpriteLoader.java
@@ -0,0 +1,199 @@
+/**
+ * Copyright 2011 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.sprites.core.sprite;
+
+import static playn.core.PlayN.assetManager;
+import static playn.core.PlayN.graphics;
+import static playn.core.PlayN.json;
+
+import playn.core.Asserts;
+import playn.core.AssetWatcher;
+import playn.core.Image;
+import playn.core.Json;
+import playn.core.ResourceCallback;
+
+/**
+ * Class for loading and parsing sprite sheets.
+ * <p>
+ * To use, call {@link #getSprite(String imageUrl, String jsonUrl)} with an image path and json
+ * data, or {@link #getSprite(String jsonUrl)} with json data containing image urls.
+ */
+// TODO(pdr): the two getSprite() methods are messy, clean them up.
+public class SpriteLoader {
+
+  // prevent instantiation
+  private SpriteLoader() {
+  }
+
+  /**
+   * Return a {@link Sprite}, given a path to the image and a path to the json sprite description.
+   * <p>
+   * json data should be in the following format:
+   * 
+   * <pre>
+   * {@code {
+   *   "sprites": [
+   *     {"id": "sprite_0", "x": 30, "y": 30, "w": 37, "h": 37},
+   *     {"id": "sprite_1", "x": 67, "y": 30, "w": 37, "h": 37},
+   *     {"id": "sprite_2", "x": 104, "y": 30, "w": 37, "h": 37},
+   *     {"id": "sprite_3", "x": 141, "y": 30, "w": 37, "h": 37}
+   *   ]}
+   * }
+   * </pre>
+   */
+  public static Sprite getSprite(String imagePath, String jsonPath) {
+    Image image = assetManager().getImage(imagePath);
+    final Image[] images = new Image[]{image};
+    // temp image to prevent NPE if using the Sprite's Layer (Sprite.getLayer()) before the image
+    // has loaded or before a sprite has been set (Sprite.setSprite()).
+    final Image tempImage = graphics().createImage(1, 1);
+    final Sprite sprite = new Sprite(graphics().createImageLayer(tempImage));
+
+    // load and parse json
+    assetManager().getText(jsonPath, new ResourceCallback<String>() {
+      @Override
+      public void done(String json) {
+        try {
+          parseJson(images, sprite, json);
+        } catch (Throwable err) {
+          sprite.error(err);
+          return;
+        }
+        sprite.doneLoadingData();
+      }
+
+      @Override
+      public void error(Throwable err) {
+        sprite.error(err);
+      }
+    });
+
+    // set callback for image
+    image.addCallback(new ResourceCallback<Image>() {
+      @Override
+      public void done(Image resource) {
+        sprite.doneLoadingImages();
+      }
+
+      @Override
+      public void error(Throwable err) {
+        sprite.error(err);
+      }
+    });
+
+    return sprite;
+  }
+
+  /**
+   * Return a {@link Sprite}, given a path to the json sprite description.
+   * <p>
+   * json data should be in the following format:
+   * 
+   * <pre>
+   * {@code {
+   *   "urls": ["images/peasprites2.png", "images/peasprites3.png"],
+   *   "sprites": [
+   *     {"id": "sprite_0", "url": 0, "x": 30, "y": 30, "w": 37, "h": 37},
+   *     {"id": "sprite_1", "url": 0, "x": 67, "y": 30, "w": 37, "h": 37},
+   *     {"id": "sprite_2", "url": 1, "x": 104, "y": 30, "w": 37, "h": 37},
+   *     {"id": "sprite_3", "url": 1, "x": 141, "y": 30, "w": 37, "h": 37}
+   *   ]}
+   * }
+   * </pre>
+   */
+  public static Sprite getSprite(String jsonPath) {
+    // temp image to prevent NPE if using the Sprite's Layer (Sprite.getLayer()) before the image
+    // has loaded or before a sprite has been set (Sprite.setSprite()).
+    final Image tempImage = graphics().createImage(1, 1);
+    final Sprite sprite = new Sprite(graphics().createImageLayer(tempImage));
+
+    // create asset watcher for the image assets
+    final AssetWatcher watcher = new AssetWatcher(new AssetWatcher.Listener() {
+      @Override
+      public void done() {
+        sprite.doneLoadingImages();
+      }
+
+      @Override
+      public void error(Throwable e) {
+        sprite.error(e);
+      }
+    });
+
+    // load and parse json, then add each image parsed from the json to the asset watcher to load
+    assetManager().getText(jsonPath, new ResourceCallback<String>() {
+      @Override
+      public void done(String json) {
+        try {
+          parseJson(null, sprite, json);
+          for (SpriteImage spriteImage : sprite.spriteImages()) {
+            watcher.add(spriteImage.image());
+          }
+          watcher.start();
+        } catch (Throwable err) {
+          sprite.error(err);
+          return;
+        }
+        sprite.doneLoadingData();
+      }
+
+      @Override
+      public void error(Throwable err) {
+        sprite.error(err);
+      }
+    });
+
+    return sprite;
+  }
+
+  /**
+   * Parse a json sprite sheet and add the sprite images to the sheet.
+   * <p>
+   * If images is null, the images urls are parsed from the json.
+   * 
+   * @param image Image to associate with each {@link SpriteImage}, or null to parse from the json
+   * @param sheet Sprite to store the {@link SpritesImage}s
+   * @param json json to parse
+   */
+  private static void parseJson(Image[] images, Sprite sprite, String json) {
+    Json.Object document = json().parse(json);
+
+    // parse image urls, if necessary
+    if (images == null || images.length == 0) {
+      Json.Array urls = document.getArray("urls");
+      Asserts.checkNotNull(urls, "No urls provided for sprite images");
+      images = new Image[urls.length()];
+      for (int i = 0; i < urls.length(); i++) {
+        images[i] = assetManager().getImage(urls.getString(i));
+      }
+    }
+
+    // parse the sprite images
+    Json.Array spriteImages = document.getArray("sprites");
+    for (int i = 0; i < spriteImages.length(); i++) {
+      Json.Object jsonSpriteImage = spriteImages.getObject(i);
+      String id = jsonSpriteImage.getString("id");
+      int imageId = jsonSpriteImage.getInt("url"); // will return 0 if not specified
+      Asserts.checkElementIndex(imageId, images.length, "URL must be an index into the URLs array");
+      int x = jsonSpriteImage.getInt("x");
+      int y = jsonSpriteImage.getInt("y");
+      int width = jsonSpriteImage.getInt("w");
+      int height = jsonSpriteImage.getInt("h");
+      SpriteImage spriteImage = new SpriteImage(images[imageId], x, y, width, height);
+      sprite.addSpriteImage(id, spriteImage);
+    }
+  }
+}
diff --git a/sample/sprites/core/src/playn/sample/sprites/flash/SpritesGameFlash.java b/sample/sprites/core/src/playn/sample/sprites/flash/SpritesGameFlash.java
new file mode 100644
index 0000000..e007e2f
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/flash/SpritesGameFlash.java
@@ -0,0 +1,32 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.sprites.flash;
+
+import playn.core.PlayN;
+import playn.flash.FlashAssetManager;
+import playn.flash.FlashGame;
+import playn.flash.FlashPlatform;
+import playn.sample.sprites.core.SpritesGame;
+
+public class SpritesGameFlash extends FlashGame {
+
+  @Override
+  public void start() {
+    FlashAssetManager assets = FlashPlatform.register().assetManager();
+    assets.setPathPrefix("spritesgame/");
+    PlayN.run(new SpritesGame());
+  }
+}
diff --git a/sample/sprites/core/src/playn/sample/sprites/html/SpritesGameHtml.java b/sample/sprites/core/src/playn/sample/sprites/html/SpritesGameHtml.java
new file mode 100644
index 0000000..7800137
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/html/SpritesGameHtml.java
@@ -0,0 +1,33 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.sprites.html;
+
+import playn.html.HtmlAssetManager;
+
+import playn.core.PlayN;
+import playn.html.HtmlGame;
+import playn.html.HtmlPlatform;
+import playn.sample.sprites.core.SpritesGame;
+
+public class SpritesGameHtml extends HtmlGame {
+
+  @Override
+  public void start() {
+    HtmlAssetManager assets = HtmlPlatform.register().assetManager();
+    assets.setPathPrefix("spritesgame/");
+    PlayN.run(new SpritesGame());
+  }
+}
diff --git a/sample/sprites/core/src/playn/sample/sprites/java/SpritesGameJava.java b/sample/sprites/core/src/playn/sample/sprites/java/SpritesGameJava.java
new file mode 100644
index 0000000..fb84007
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/java/SpritesGameJava.java
@@ -0,0 +1,30 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.sample.sprites.java;
+
+import playn.core.PlayN;
+import playn.java.JavaAssetManager;
+import playn.java.JavaPlatform;
+import playn.sample.sprites.core.SpritesGame;
+
+public class SpritesGameJava {
+
+  public static void main(String[] args) {
+    JavaAssetManager assets = JavaPlatform.register().assetManager();
+    assets.setPathPrefix("src/playn/sample/sprites/resources");
+    PlayN.run(new SpritesGame());
+  }
+}
diff --git a/sample/sprites/core/src/playn/sample/sprites/resources/images/bg.png b/sample/sprites/core/src/playn/sample/sprites/resources/images/bg.png
new file mode 100644
index 0000000..919c57b
Binary files /dev/null and b/sample/sprites/core/src/playn/sample/sprites/resources/images/bg.png differ
diff --git a/sample/sprites/core/src/playn/sample/sprites/resources/images/pea.png b/sample/sprites/core/src/playn/sample/sprites/resources/images/pea.png
new file mode 100644
index 0000000..dae99e4
Binary files /dev/null and b/sample/sprites/core/src/playn/sample/sprites/resources/images/pea.png differ
diff --git a/sample/sprites/core/src/playn/sample/sprites/resources/images/peasprites.png b/sample/sprites/core/src/playn/sample/sprites/resources/images/peasprites.png
new file mode 100644
index 0000000..ea816c0
Binary files /dev/null and b/sample/sprites/core/src/playn/sample/sprites/resources/images/peasprites.png differ
diff --git a/sample/sprites/core/src/playn/sample/sprites/resources/images/peasprites2.png b/sample/sprites/core/src/playn/sample/sprites/resources/images/peasprites2.png
new file mode 100644
index 0000000..0a2d422
Binary files /dev/null and b/sample/sprites/core/src/playn/sample/sprites/resources/images/peasprites2.png differ
diff --git a/sample/sprites/core/src/playn/sample/sprites/resources/images/peasprites3.png b/sample/sprites/core/src/playn/sample/sprites/resources/images/peasprites3.png
new file mode 100644
index 0000000..6159d41
Binary files /dev/null and b/sample/sprites/core/src/playn/sample/sprites/resources/images/peasprites3.png differ
diff --git a/sample/sprites/core/src/playn/sample/sprites/resources/sprites/peasprite.json b/sample/sprites/core/src/playn/sample/sprites/resources/sprites/peasprite.json
new file mode 100644
index 0000000..ddbdeba
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/resources/sprites/peasprite.json
@@ -0,0 +1,8 @@
+{
+  "sprites": [
+    {"id": "sprite_0", "x": 30, "y": 30, "w": 37, "h": 37},
+    {"id": "sprite_1", "x": 67, "y": 30, "w": 37, "h": 37},
+    {"id": "sprite_2", "x": 104, "y": 30, "w": 37, "h": 37},
+    {"id": "sprite_3", "x": 141, "y": 30, "w": 37, "h": 37}
+  ]
+}
\ No newline at end of file
diff --git a/sample/sprites/core/src/playn/sample/sprites/resources/sprites/peasprite2.json b/sample/sprites/core/src/playn/sample/sprites/resources/sprites/peasprite2.json
new file mode 100644
index 0000000..4eabb28
--- /dev/null
+++ b/sample/sprites/core/src/playn/sample/sprites/resources/sprites/peasprite2.json
@@ -0,0 +1,21 @@
+{
+  "urls": ["images/peasprites2.png", "images/peasprites3.png"],
+  "sprites": [
+    {"id": "pea1_normal", "url": 0, "x": 30, "y": 30, "w": 37, "h": 37},
+    {"id": "pea1_invert", "url": 0, "x": 30, "y": 130, "w": 37, "h": 37},
+    {"id": "pea1_normal_bright", "url": 1, "x": 30, "y": 30, "w": 37, "h": 37},
+    {"id": "pea1_invert_bright", "url": 1, "x": 30, "y": 130, "w": 37, "h": 37},
+    {"id": "pea2_normal", "url": 0, "x": 67, "y": 30, "w": 37, "h": 37},
+    {"id": "pea2_invert", "url": 0, "x": 67, "y": 130, "w": 37, "h": 37},
+    {"id": "pea2_normal_bright", "url": 1, "x": 67, "y": 30, "w": 37, "h": 37},
+    {"id": "pea2_invert_bright", "url": 1, "x": 67, "y": 130, "w": 37, "h": 37},
+    {"id": "pea3_normal", "url": 0, "x": 104, "y": 30, "w": 37, "h": 37},
+    {"id": "pea3_invert", "url": 0, "x": 104, "y": 130, "w": 37, "h": 37},
+    {"id": "pea3_normal_bright", "url": 1, "x": 104, "y": 30, "w": 37, "h": 37},
+    {"id": "pea3_invert_bright", "url": 1, "x": 104, "y": 130, "w": 37, "h": 37},
+    {"id": "pea4_normal", "url": 0, "x": 141, "y": 30, "w": 37, "h": 37},
+    {"id": "pea4_invert", "url": 0, "x": 141, "y": 130, "w": 37, "h": 37},
+    {"id": "pea4_normal_bright", "url": 1, "x": 141, "y": 30, "w": 37, "h": 37},
+    {"id": "pea4_invert_bright", "url": 1, "x": 141, "y": 130, "w": 37, "h": 37}
+  ]
+}
\ No newline at end of file
diff --git a/sample/sprites/core/war/.gitignore b/sample/sprites/core/war/.gitignore
new file mode 100644
index 0000000..620ffcb
--- /dev/null
+++ b/sample/sprites/core/war/.gitignore
@@ -0,0 +1,2 @@
+spritesgame
+spritesgameflash
diff --git a/sample/sprites/core/war/SpritesGame.html b/sample/sprites/core/war/SpritesGame.html
new file mode 100644
index 0000000..9e6ca62
--- /dev/null
+++ b/sample/sprites/core/war/SpritesGame.html
@@ -0,0 +1,24 @@
+<!--
+ * Copyright 2011 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<!DOCTYPE html>
+<html>
+  <head>
+    <title>SpritesGame</title>
+  </head>
+  <body bgcolor="black">
+    <script src="spritesgame/spritesgame.nocache.js"></script>
+  </body>
+</html>
diff --git a/sample/sprites/core/war/SpritesGameFlash.html b/sample/sprites/core/war/SpritesGameFlash.html
new file mode 100644
index 0000000..1e63af2
--- /dev/null
+++ b/sample/sprites/core/war/SpritesGameFlash.html
@@ -0,0 +1,25 @@
+<!--
+ * Copyright 2011 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<!DOCTYPE html>
+<html>
+  <head>
+    <title>SpritesGame</title>
+  </head>
+  <body bgcolor="black">
+    <div id='flash_player'></div>
+    <script src="spritesgameflash/spritesgameflash.nocache.js"></script>
+  </body>
+</html>
diff --git a/sample/sprites/core/war/WEB-INF/.gitignore b/sample/sprites/core/war/WEB-INF/.gitignore
new file mode 100644
index 0000000..489267f
--- /dev/null
+++ b/sample/sprites/core/war/WEB-INF/.gitignore
@@ -0,0 +1,3 @@
+deploy
+classes
+lib
diff --git a/sample/sprites/core/war/WEB-INF/web.xml b/sample/sprites/core/war/WEB-INF/web.xml
new file mode 100644
index 0000000..855c74c
--- /dev/null
+++ b/sample/sprites/core/war/WEB-INF/web.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+xmlns="http://java.sun.com/xml/ns/javaee"
+xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
+xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
+http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
+	<!-- TODO: Add <servlet> tags for each servlet here. -->
+	<!-- TODO: Add <servlet-mapping> tags for each <servlet> here. -->
+	<!-- TODO: Optionally add a <welcome-file-list> tag to display a welcome file. -->
+	<welcome-file-list>
+	<welcome-file>SpritesGame.html</welcome-file>
+	<welcome-file>SpritesGameFlash.html</welcome-file>
+	</welcome-file-list>
+</web-app>
diff --git a/sample/sprites/html/pom.xml b/sample/sprites/html/pom.xml
new file mode 100644
index 0000000..c79cc0b
--- /dev/null
+++ b/sample/sprites/html/pom.xml
@@ -0,0 +1,68 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  
+  <parent>
+    <groupId>com.googlecode.playn</groupId>
+    <artifactId>playn-sprites-project</artifactId>
+    <version>1.0-SNAPSHOT</version>
+  </parent>
+
+  <groupId>com.googlecode.playn</groupId>
+  <artifactId>playn-sprites-html</artifactId>
+  <packaging>war</packaging>
+  <name>PlayN Sprites Html</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.google.gwt</groupId>
+      <artifactId>gwt-dev</artifactId>
+      <version>${gwtversion}</version>
+      <scope>test</scope>
+    </dependency>
+
+    <dependency>
+      <groupId>com.googlecode.playn</groupId>
+      <artifactId>core</artifactId>
+      <version>${coreversion}</version>
+    </dependency>
+  </dependencies>
+
+  <properties>
+    <gwt.module>playn.sample.sprites.SpritesGame</gwt.module>
+    <gwt.name>sprites</gwt.name>
+  </properties>
+
+  <build>
+    <sourceDirectory>../core/src</sourceDirectory>
+
+    <plugins>
+    <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-war-plugin</artifactId>
+        <version>2.1.1</version>
+        <configuration>
+	  <warSourceDirectory>../core/war</warSourceDirectory>
+        </configuration>
+      </plugin>
+
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>gwt-maven-plugin</artifactId>
+      </plugin>
+
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-source-plugin</artifactId>
+      </plugin>
+    </plugins>
+    <resources>
+      <resource>
+        <directory>../core/src</directory>
+      </resource>
+      <resource>
+        <directory>../core/war/WEB-INF/classes</directory>
+      </resource>
+    </resources>
+  </build>
+</project>
diff --git a/sample/sprites/pom.xml b/sample/sprites/pom.xml
new file mode 100644
index 0000000..dccb51a
--- /dev/null
+++ b/sample/sprites/pom.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>com.googlecode.playn</groupId>
+    <artifactId>playn-demos</artifactId>
+    <version>1.0-SNAPSHOT</version>
+  </parent>
+
+  <groupId>com.googlecode.playn</groupId>
+  <artifactId>playn-sprites-project</artifactId>
+  <packaging>pom</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>PlayN Sprites Project</name>
+  <description>PlayN Sprites Project</description>
+
+  <modules>
+    <module>core</module> 
+    <module>html</module>
+  </modules>
+</project>
diff --git a/test/benchmark/.gitignore b/test/benchmark/.gitignore
deleted file mode 100644
index f759ea0..0000000
--- a/test/benchmark/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-bin
-.settings
-*.launch
diff --git a/test/benchmark/build.xml b/test/benchmark/build.xml
deleted file mode 100644
index 7d7e32b..0000000
--- a/test/benchmark/build.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<project name="benchmark" default="compile">
-  <property name="java.classname" value="playn.bench.java.BenchJava"/>
-  <property name="html.classname" value="playn.bench.html.BenchHtml"/>
-  <property name="html.index" value="Bench.html"/>
-  <import file="../../sample/build-common.xml"/>
-</project>
diff --git a/test/benchmark/core/pom.xml b/test/benchmark/core/pom.xml
deleted file mode 100644
index 73c80ea..0000000
--- a/test/benchmark/core/pom.xml
+++ /dev/null
@@ -1,39 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.googlecode.playn</groupId>
-    <artifactId>playn-benchmark</artifactId>
-    <version>1.0-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>playn-benchmark-core</artifactId>
-  <name>PlayN Benchmarks Core</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-java</artifactId>
-      <version>${coreversion}</version>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <sourceDirectory>src</sourceDirectory>
-
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-source-plugin</artifactId>
-      </plugin>
-    </plugins>
-
-    <resources>
-      <resource>
-        <directory>${basedir}/src</directory>
-      </resource>
-    </resources>
-  </build>
-</project>
diff --git a/test/benchmark/core/src/playn/bench/core/Bench.java b/test/benchmark/core/src/playn/bench/core/Bench.java
deleted file mode 100644
index a948ff8..0000000
--- a/test/benchmark/core/src/playn/bench/core/Bench.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/**
- * Copyright 2010 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.bench.core;
-
-import static playn.core.PlayN.*;
-
-import playn.core.Game;
-import playn.core.GroupLayer;
-import playn.core.Keyboard;
-import playn.core.Pointer;
-
-public class Bench implements Game {
-
-  private static final TimeTest[] TESTS = new TimeTest[] {
-    new SurfaceTimeTest(),
-    new LayerTimeTest(),
-  };
-
-  private GroupLayer benchLayer;
-  private int curTextIndex = -1;
-  private TimeTest curTest;
-
-  @Override
-  public void init() {
-    graphics().setSize(800, 600);
-    nextTest();
-  }
-
-  @Override
-  public void update(float delta) {
-  }
-
-  @Override
-  public void paint(float alpha) {
-    if (curTest != null) {
-      curTest.paint();
-      if (curTest.done()) {
-        nextTest();
-      }
-    }
-  }
-
-  @Override
-  public int updateRate() {
-    return 33;
-  }
-
-  private void cleanup() {
-    if (curTest != null) {
-      curTest.cleanup();
-      graphics().rootLayer().remove(benchLayer);
-    }
-    benchLayer = graphics().createGroupLayer();
-    graphics().rootLayer().add(benchLayer);
-  }
-
-  private void nextTest() {
-    cleanup();
-
-    if (++curTextIndex == TESTS.length) {
-      for (TimeTest test : TESTS) {
-        log().info(test.getClass().getName() + " : " + test.score());
-      }
-      curTest = null;
-      return;
-    }
-
-    curTest = TESTS[curTextIndex];
-    curTest.init(benchLayer);
-  }
-}
diff --git a/test/benchmark/core/src/playn/bench/core/LayerTimeTest.java b/test/benchmark/core/src/playn/bench/core/LayerTimeTest.java
deleted file mode 100644
index 6d8fcee..0000000
--- a/test/benchmark/core/src/playn/bench/core/LayerTimeTest.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/**
- * Copyright 2010 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software distributed under the License
- * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
- * or implied. See the License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.bench.core;
-
-import static playn.core.PlayN.*;
-
-import playn.core.GroupLayer;
-import playn.core.Image;
-import playn.core.ImageLayer;
-
-import java.util.ArrayList;
-import java.util.List;
-
-class LayerTimeTest extends TimeTest {
-
-  static final String[] IMAGES = new String[] {
-    "boy", "bug", "gemblue", "gemgreen", "gemorange", "girlcat", "girlhorn", "girlpink",
-    "girlprincess", "heart", "rock", "star", "treeshort"
-  };
-
-  private ImageLayer bgLayer;
-  private List<ImageLayer> layers = new ArrayList<ImageLayer>();
-  private Image[] images;
-  private GroupLayer root;
-
-  @Override
-  protected void advance() {
-    int image = (int) (random() * images.length);
-    ImageLayer layer = graphics().createImageLayer(images[image]);
-    layers.add(layer);
-    root.add(layer);
-
-    int w = graphics().width(), h = graphics().height();
-    layer.transform().translate(random() * w, random() * h);
-    float scale = random() + 1.0f;
-    layer.transform().scale(scale, scale);
-    layer.transform().rotate(random() * (float) Math.PI * 2);
-  }
-
-  @Override
-  protected int count() {
-    return layers.size();
-  }
-
-  @Override
-  protected void retreat() {
-    if (layers.size() == 0) {
-      // TODO(jgw): What can we do about this case?
-      return;
-    }
-
-    ImageLayer layer = layers.get(layers.size() - 1);
-    layers.remove(layers.size() - 1);
-    root.remove(layer);
-  }
-
-  @Override
-  void init(GroupLayer root) {
-    this.root = root;
-
-    Image bg = assetManager().getImage("images/background.png");
-
-    images = new Image[IMAGES.length];
-    for (int i = 0; i < IMAGES.length; ++i) {
-      images[i] = assetManager().getImage("images/" + IMAGES[i] + ".png");
-    }
-
-    bgLayer = graphics().createImageLayer(bg);
-    root.add(bgLayer);
-  }
-
-  @Override
-  String name() {
-    return "Layers";
-  }
-
-  @Override
-  void cleanup() {
-  }
-
-  @Override
-  double score() {
-    return layers.size();
-  }
-
-  @Override
-  protected void doPaint() {
-    for (ImageLayer p : layers) {
-      p.transform().rotate(0.01f * (float) Math.PI);
-    }
-  }
-}
diff --git a/test/benchmark/core/src/playn/bench/core/SurfaceTimeTest.java b/test/benchmark/core/src/playn/bench/core/SurfaceTimeTest.java
deleted file mode 100644
index 655b220..0000000
--- a/test/benchmark/core/src/playn/bench/core/SurfaceTimeTest.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/**
- * Copyright 2010 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software distributed under the License
- * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
- * or implied. See the License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.bench.core;
-
-import static playn.core.PlayN.*;
-
-import playn.core.GroupLayer;
-import playn.core.Image;
-import playn.core.Surface;
-import playn.core.SurfaceLayer;
-
-import java.util.ArrayList;
-import java.util.List;
-
-class SurfaceTimeTest extends TimeTest {
-
-  static class Entity {
-    private final Image image;
-    private float x, y, scale, rotation;
-
-    public Entity(Image image) {
-      this.image = image;
-      this.scale = random() + 0.5f;
-    }
-  }
-
-  private SurfaceLayer surfLayer;
-  private Image background;
-  private List<Entity> ents = new ArrayList<Entity>();
-  private Image[] images;
-
-  @Override
-  protected void advance() {
-    int image = (int) (random() * images.length);
-    Entity ent = new Entity(images[image]);
-    ents.add(ent);
-
-    int w = graphics().width(), h = graphics().height();
-    ent.x = random() * w;
-    ent.y = random() * h;
-    ent.rotation = random() * (float) Math.PI * 2;
-  }
-
-  @Override
-  protected int count() {
-    return ents.size();
-  }
-
-  @Override
-  protected void retreat() {
-    if (ents.size() == 0) {
-      // TODO(jgw): What can we do about this case?
-      return;
-    }
-
-    ents.remove(ents.size() - 1);
-  }
-
-  @Override
-  void init(GroupLayer root) {
-    background = assetManager().getImage("images/background.png");
-
-    images = new Image[LayerTimeTest.IMAGES.length];
-    for (int i = 0; i < images.length; ++i) {
-      images[i] = assetManager().getImage("images/" + LayerTimeTest.IMAGES[i] + ".png");
-    }
-
-    surfLayer = graphics().createSurfaceLayer(graphics().width(), graphics().height());
-    root.add(surfLayer);
-  }
-
-  @Override
-  String name() {
-    return "Surface";
-  }
-
-  @Override
-  void cleanup() {
-  }
-
-  @Override
-  double score() {
-    return ents.size();
-  }
-
-  @Override
-  protected void doPaint() {
-    Surface surf = surfLayer.surface();
-    surf.drawImage(background, 0, 0);
-    for (Entity ent : ents) {
-      surf.save();
-      {
-        surf.translate(ent.x, ent.y);
-        surf.scale(ent.scale, ent.scale);
-        surf.rotate(ent.rotation);
-        surf.drawImage(ent.image, 0, 0);
-      }
-      surf.restore();
-
-      ent.rotation += (float) Math.PI * 0.01;
-    }
-  }
-}
diff --git a/test/benchmark/core/src/playn/bench/core/TimeTest.java b/test/benchmark/core/src/playn/bench/core/TimeTest.java
deleted file mode 100644
index 36d55e5..0000000
--- a/test/benchmark/core/src/playn/bench/core/TimeTest.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/**
- * Copyright 2010 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software distributed under the License
- * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
- * or implied. See the License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.bench.core;
-
-import static playn.core.PlayN.log;
-import static playn.core.PlayN.currentTime;
-import playn.core.GroupLayer;
-
-abstract class TimeTest {
-
-  private static final int FREQ_SAMPLES = 10;
-  private static final double TARGET_FREQ = 33;
-  private static final double EPSILON = 4;
-  private static final int SETTLE_FRAMES = 100;
-
-  private double[] freqs = new double[FREQ_SAMPLES];
-  private int freqOffset;
-  private double lastTime = currentTime();
-  private int doneFrames;
-  private boolean done;
-  private int logCountdown = 30;
-
-  final void paint() {
-    if (--logCountdown == 0) {
-      logCountdown = 30;
-      log().info("count: " + count());
-    }
-
-    double now = currentTime();
-    freqs[freqOffset++] = now - lastTime;
-    if (freqOffset == freqs.length) {
-      freqOffset = 0;
-    }
-    lastTime = now;
-
-    if (averageFreq() < TARGET_FREQ - EPSILON) {
-      doneFrames = 0;
-      advance();
-    } else if (averageFreq() > TARGET_FREQ + EPSILON) {
-      doneFrames = 0;
-      retreat();
-    } else {
-      ++doneFrames;
-      if (doneFrames >= SETTLE_FRAMES) {
-        done = true;
-      }
-    }
-
-    doPaint();
-  }
-
-  abstract String name();
-
-  abstract void init(GroupLayer root);
-
-  abstract void cleanup();
-
-  abstract double score();
-
-  boolean done() {
-    return done;
-  }
-
-  protected abstract void doPaint();
-
-  protected abstract void advance();
-
-  protected abstract void retreat();
-
-  private double averageFreq() {
-    double total = 0;
-    for (int i = 0; i < freqs.length; ++i) {
-      total += freqs[i];
-    }
-    return total / FREQ_SAMPLES;
-  }
-
-  protected int count() {
-    // TODO Auto-generated method stub
-    return 0;
-  }
-}
diff --git a/test/benchmark/core/src/playn/bench/java/BenchJava.java b/test/benchmark/core/src/playn/bench/java/BenchJava.java
deleted file mode 100644
index 50ed7c2..0000000
--- a/test/benchmark/core/src/playn/bench/java/BenchJava.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/**
- * Copyright 2010 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.bench.java;
-
-import playn.bench.core.Bench;
-import playn.core.PlayN;
-import playn.java.JavaPlatform;
-
-public class BenchJava {
-
-  public static void main(String[] args) {
-    JavaPlatform p = JavaPlatform.register();
-    p.assetManager().setPathPrefix("src/playn/bench/resources");
-    PlayN.run(new Bench());
-  }
-}
diff --git a/test/benchmark/core/src/playn/bench/resources/images/background.png b/test/benchmark/core/src/playn/bench/resources/images/background.png
deleted file mode 100644
index 919c57b..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/background.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/boy.png b/test/benchmark/core/src/playn/bench/resources/images/boy.png
deleted file mode 100755
index 3dc7c29..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/boy.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/bug.png b/test/benchmark/core/src/playn/bench/resources/images/bug.png
deleted file mode 100755
index 191587b..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/bug.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/gemblue.png b/test/benchmark/core/src/playn/bench/resources/images/gemblue.png
deleted file mode 100755
index 5808a7d..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/gemblue.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/gemgreen.png b/test/benchmark/core/src/playn/bench/resources/images/gemgreen.png
deleted file mode 100755
index e971d14..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/gemgreen.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/gemorange.png b/test/benchmark/core/src/playn/bench/resources/images/gemorange.png
deleted file mode 100755
index f8faf7b..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/gemorange.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/girlcat.png b/test/benchmark/core/src/playn/bench/resources/images/girlcat.png
deleted file mode 100755
index dc0538b..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/girlcat.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/girlhorn.png b/test/benchmark/core/src/playn/bench/resources/images/girlhorn.png
deleted file mode 100755
index 90f2278..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/girlhorn.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/girlpink.png b/test/benchmark/core/src/playn/bench/resources/images/girlpink.png
deleted file mode 100755
index baef177..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/girlpink.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/girlprincess.png b/test/benchmark/core/src/playn/bench/resources/images/girlprincess.png
deleted file mode 100755
index 9d9f958..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/girlprincess.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/heart.png b/test/benchmark/core/src/playn/bench/resources/images/heart.png
deleted file mode 100755
index aa49b5c..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/heart.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/pea.png b/test/benchmark/core/src/playn/bench/resources/images/pea.png
deleted file mode 100644
index dae99e4..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/pea.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/rock.png b/test/benchmark/core/src/playn/bench/resources/images/rock.png
deleted file mode 100755
index 29c4e20..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/rock.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/star.png b/test/benchmark/core/src/playn/bench/resources/images/star.png
deleted file mode 100755
index 17c0af5..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/star.png and /dev/null differ
diff --git a/test/benchmark/core/src/playn/bench/resources/images/treeshort.png b/test/benchmark/core/src/playn/bench/resources/images/treeshort.png
deleted file mode 100755
index 28a15d0..0000000
Binary files a/test/benchmark/core/src/playn/bench/resources/images/treeshort.png and /dev/null differ
diff --git a/test/benchmark/html/pom.xml b/test/benchmark/html/pom.xml
deleted file mode 100644
index 6a6e71e..0000000
--- a/test/benchmark/html/pom.xml
+++ /dev/null
@@ -1,67 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.googlecode.playn</groupId>
-    <artifactId>playn-benchmark</artifactId>
-    <version>1.0-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>playn-benchmark-html</artifactId>
-  <name>PlayN Benchmark HTML</name>
-  <packaging>war</packaging>
-
-  <properties>
-    <gwt.module>playn.bench.Bench</gwt.module>
-    <gwt.name>benchmark</gwt.name>
-  </properties>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-benchmark-core</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.googlecode.playn</groupId>
-      <artifactId>playn-html</artifactId>
-      <version>${coreversion}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.gwt</groupId>
-      <artifactId>gwt-dev</artifactId>
-      <version>${gwtversion}</version>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <sourceDirectory>src</sourceDirectory>
-    <outputDirectory>war/WEB-INF/classes</outputDirectory>
-
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-source-plugin</artifactId>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-war-plugin</artifactId>
-        <version>2.1.1</version>
-        <configuration>
-          <webXml>war/WEB-INF/web.xml</webXml>
-        </configuration>
-      </plugin>
-    </plugins>
-
-    <resources>
-      <resource>
-        <directory>${basedir}/src</directory>
-      </resource>
-    </resources>
-  </build>
-</project>
diff --git a/test/benchmark/html/src/playn/bench/Bench.gwt.xml b/test/benchmark/html/src/playn/bench/Bench.gwt.xml
deleted file mode 100644
index c8eab87..0000000
--- a/test/benchmark/html/src/playn/bench/Bench.gwt.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<!--
- * Copyright 2010 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License. 
--->
-<module rename-to='bench'>
-  <inherits name='playn.PlayN'/>
-
-  <source path='core'/>
-  <source path='html'/>
-
-  <public path="resources" />
-
-  <entry-point class='playn.bench.html.BenchHtml'/>
-</module>
diff --git a/test/benchmark/html/src/playn/bench/html/BenchHtml.java b/test/benchmark/html/src/playn/bench/html/BenchHtml.java
deleted file mode 100644
index 8240ca5..0000000
--- a/test/benchmark/html/src/playn/bench/html/BenchHtml.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/**
- * Copyright 2010 The PlayN Authors
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package playn.bench.html;
-
-import playn.bench.core.Bench;
-import playn.core.PlayN;
-import playn.html.HtmlGame;
-import playn.html.HtmlPlatform;
-
-public class BenchHtml extends HtmlGame {
-
-  @Override
-  public void start() {
-    HtmlPlatform.register();
-    PlayN.run(new Bench());
-  }
-}
diff --git a/test/benchmark/html/war/.gitignore b/test/benchmark/html/war/.gitignore
deleted file mode 100644
index 70572a6..0000000
--- a/test/benchmark/html/war/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-bench
-test
diff --git a/test/benchmark/html/war/Bench.html b/test/benchmark/html/war/Bench.html
deleted file mode 100644
index 77a36e6..0000000
--- a/test/benchmark/html/war/Bench.html
+++ /dev/null
@@ -1,24 +0,0 @@
-<!--
- * Copyright 2010 The PlayN Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License. 
--->
-<!DOCTYPE html>
-<html>
-  <head>
-    <title>PlayN Benchmarks</title>
-    <script src="bench/bench.nocache.js"></script>
-  </head>
-  <body bgcolor="black">
-  </body>
-</html>
diff --git a/test/benchmark/html/war/WEB-INF/.gitignore b/test/benchmark/html/war/WEB-INF/.gitignore
deleted file mode 100644
index 489267f..0000000
--- a/test/benchmark/html/war/WEB-INF/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-deploy
-classes
-lib
diff --git a/test/benchmark/html/war/WEB-INF/web.xml b/test/benchmark/html/war/WEB-INF/web.xml
deleted file mode 100644
index a0e8eb7..0000000
--- a/test/benchmark/html/war/WEB-INF/web.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-xmlns="http://java.sun.com/xml/ns/javaee"
-xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
-xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
-http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
-	<!-- TODO: Add <servlet> tags for each servlet here. -->
-	<!-- TODO: Add <servlet-mapping> tags for each <servlet> here. -->
-	<!-- TODO: Optionally add a <welcome-file-list> tag to display a welcome file. -->
-</web-app>
diff --git a/test/benchmark/pom.xml b/test/benchmark/pom.xml
deleted file mode 100644
index c6d2036..0000000
--- a/test/benchmark/pom.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.googlecode.playn</groupId>
-    <artifactId>playn-test</artifactId>
-    <version>1.0-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>playn-benchmark</artifactId>
-  <name>PlayN Benchmark Metaproject</name>
-  <packaging>pom</packaging>
-
-  <modules>
-    <module>core</module>
-    <module>html</module>
-<!--
-    <module>flash</module>
-    <module>android</module>
--->
-  </modules>
-</project>
diff --git a/test/core/.gitignore b/test/core/.gitignore
new file mode 100644
index 0000000..f759ea0
--- /dev/null
+++ b/test/core/.gitignore
@@ -0,0 +1,3 @@
+bin
+.settings
+*.launch
diff --git a/test/core/build.xml b/test/core/build.xml
new file mode 100644
index 0000000..e9d8b69
--- /dev/null
+++ b/test/core/build.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0"?>
+<project name="coretest" default="compile">
+  <property name="java.classname" value="playn.test.java.TestJava"/>
+  <property name="html.classname" value="playn.test.html.TestHtml"/>
+  <property name="html.index" value="Test.html"/>
+  <import file="../../sample/build-common.xml"/>
+</project>
diff --git a/test/core/pom.xml b/test/core/pom.xml
new file mode 100644
index 0000000..5a1e436
--- /dev/null
+++ b/test/core/pom.xml
@@ -0,0 +1,53 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>com.googlecode.playn</groupId>
+    <artifactId>playn-project</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <relativePath>../../pom.xml</relativePath>
+  </parent>
+
+  <artifactId>playn-test-core</artifactId>
+  <name>PlayN Tests Core</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.googlecode.playn</groupId>
+      <artifactId>playn-java</artifactId>
+      <version>${coreversion}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>com.googlecode.playn</groupId>
+      <artifactId>playn-flash</artifactId>
+      <version>${coreversion}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>com.google.gwt</groupId>
+      <artifactId>gwt-dev</artifactId>
+      <version>${gwtversion}</version>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <sourceDirectory>src</sourceDirectory>
+
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-source-plugin</artifactId>
+      </plugin>
+    </plugins>
+    <resources>
+      <resource>
+        <directory>${basedir}/src</directory>
+      </resource>
+      <resource>
+        <directory>${basedir}/war/WEB-INF/classes</directory>
+      </resource>
+    </resources>
+  </build>
+</project>
diff --git a/test/core/src/playn/bench/Bench.gwt.xml b/test/core/src/playn/bench/Bench.gwt.xml
new file mode 100644
index 0000000..e144ec4
--- /dev/null
+++ b/test/core/src/playn/bench/Bench.gwt.xml
@@ -0,0 +1,23 @@
+<!--
+ * Copyright 2010 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<module rename-to='bench'>
+  <inherits name='playn.PlayN'/>
+
+  <source path='core'/>
+  <source path='html'/>
+
+  <entry-point class='playn.bench.html.BenchHtml'/>
+</module>
diff --git a/test/core/src/playn/bench/core/Bench.java b/test/core/src/playn/bench/core/Bench.java
new file mode 100644
index 0000000..a948ff8
--- /dev/null
+++ b/test/core/src/playn/bench/core/Bench.java
@@ -0,0 +1,84 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.bench.core;
+
+import static playn.core.PlayN.*;
+
+import playn.core.Game;
+import playn.core.GroupLayer;
+import playn.core.Keyboard;
+import playn.core.Pointer;
+
+public class Bench implements Game {
+
+  private static final TimeTest[] TESTS = new TimeTest[] {
+    new SurfaceTimeTest(),
+    new LayerTimeTest(),
+  };
+
+  private GroupLayer benchLayer;
+  private int curTextIndex = -1;
+  private TimeTest curTest;
+
+  @Override
+  public void init() {
+    graphics().setSize(800, 600);
+    nextTest();
+  }
+
+  @Override
+  public void update(float delta) {
+  }
+
+  @Override
+  public void paint(float alpha) {
+    if (curTest != null) {
+      curTest.paint();
+      if (curTest.done()) {
+        nextTest();
+      }
+    }
+  }
+
+  @Override
+  public int updateRate() {
+    return 33;
+  }
+
+  private void cleanup() {
+    if (curTest != null) {
+      curTest.cleanup();
+      graphics().rootLayer().remove(benchLayer);
+    }
+    benchLayer = graphics().createGroupLayer();
+    graphics().rootLayer().add(benchLayer);
+  }
+
+  private void nextTest() {
+    cleanup();
+
+    if (++curTextIndex == TESTS.length) {
+      for (TimeTest test : TESTS) {
+        log().info(test.getClass().getName() + " : " + test.score());
+      }
+      curTest = null;
+      return;
+    }
+
+    curTest = TESTS[curTextIndex];
+    curTest.init(benchLayer);
+  }
+}
diff --git a/test/core/src/playn/bench/core/LayerTimeTest.java b/test/core/src/playn/bench/core/LayerTimeTest.java
new file mode 100644
index 0000000..6d8fcee
--- /dev/null
+++ b/test/core/src/playn/bench/core/LayerTimeTest.java
@@ -0,0 +1,103 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.bench.core;
+
+import static playn.core.PlayN.*;
+
+import playn.core.GroupLayer;
+import playn.core.Image;
+import playn.core.ImageLayer;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class LayerTimeTest extends TimeTest {
+
+  static final String[] IMAGES = new String[] {
+    "boy", "bug", "gemblue", "gemgreen", "gemorange", "girlcat", "girlhorn", "girlpink",
+    "girlprincess", "heart", "rock", "star", "treeshort"
+  };
+
+  private ImageLayer bgLayer;
+  private List<ImageLayer> layers = new ArrayList<ImageLayer>();
+  private Image[] images;
+  private GroupLayer root;
+
+  @Override
+  protected void advance() {
+    int image = (int) (random() * images.length);
+    ImageLayer layer = graphics().createImageLayer(images[image]);
+    layers.add(layer);
+    root.add(layer);
+
+    int w = graphics().width(), h = graphics().height();
+    layer.transform().translate(random() * w, random() * h);
+    float scale = random() + 1.0f;
+    layer.transform().scale(scale, scale);
+    layer.transform().rotate(random() * (float) Math.PI * 2);
+  }
+
+  @Override
+  protected int count() {
+    return layers.size();
+  }
+
+  @Override
+  protected void retreat() {
+    if (layers.size() == 0) {
+      // TODO(jgw): What can we do about this case?
+      return;
+    }
+
+    ImageLayer layer = layers.get(layers.size() - 1);
+    layers.remove(layers.size() - 1);
+    root.remove(layer);
+  }
+
+  @Override
+  void init(GroupLayer root) {
+    this.root = root;
+
+    Image bg = assetManager().getImage("images/background.png");
+
+    images = new Image[IMAGES.length];
+    for (int i = 0; i < IMAGES.length; ++i) {
+      images[i] = assetManager().getImage("images/" + IMAGES[i] + ".png");
+    }
+
+    bgLayer = graphics().createImageLayer(bg);
+    root.add(bgLayer);
+  }
+
+  @Override
+  String name() {
+    return "Layers";
+  }
+
+  @Override
+  void cleanup() {
+  }
+
+  @Override
+  double score() {
+    return layers.size();
+  }
+
+  @Override
+  protected void doPaint() {
+    for (ImageLayer p : layers) {
+      p.transform().rotate(0.01f * (float) Math.PI);
+    }
+  }
+}
diff --git a/test/core/src/playn/bench/core/SurfaceTimeTest.java b/test/core/src/playn/bench/core/SurfaceTimeTest.java
new file mode 100644
index 0000000..655b220
--- /dev/null
+++ b/test/core/src/playn/bench/core/SurfaceTimeTest.java
@@ -0,0 +1,114 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.bench.core;
+
+import static playn.core.PlayN.*;
+
+import playn.core.GroupLayer;
+import playn.core.Image;
+import playn.core.Surface;
+import playn.core.SurfaceLayer;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class SurfaceTimeTest extends TimeTest {
+
+  static class Entity {
+    private final Image image;
+    private float x, y, scale, rotation;
+
+    public Entity(Image image) {
+      this.image = image;
+      this.scale = random() + 0.5f;
+    }
+  }
+
+  private SurfaceLayer surfLayer;
+  private Image background;
+  private List<Entity> ents = new ArrayList<Entity>();
+  private Image[] images;
+
+  @Override
+  protected void advance() {
+    int image = (int) (random() * images.length);
+    Entity ent = new Entity(images[image]);
+    ents.add(ent);
+
+    int w = graphics().width(), h = graphics().height();
+    ent.x = random() * w;
+    ent.y = random() * h;
+    ent.rotation = random() * (float) Math.PI * 2;
+  }
+
+  @Override
+  protected int count() {
+    return ents.size();
+  }
+
+  @Override
+  protected void retreat() {
+    if (ents.size() == 0) {
+      // TODO(jgw): What can we do about this case?
+      return;
+    }
+
+    ents.remove(ents.size() - 1);
+  }
+
+  @Override
+  void init(GroupLayer root) {
+    background = assetManager().getImage("images/background.png");
+
+    images = new Image[LayerTimeTest.IMAGES.length];
+    for (int i = 0; i < images.length; ++i) {
+      images[i] = assetManager().getImage("images/" + LayerTimeTest.IMAGES[i] + ".png");
+    }
+
+    surfLayer = graphics().createSurfaceLayer(graphics().width(), graphics().height());
+    root.add(surfLayer);
+  }
+
+  @Override
+  String name() {
+    return "Surface";
+  }
+
+  @Override
+  void cleanup() {
+  }
+
+  @Override
+  double score() {
+    return ents.size();
+  }
+
+  @Override
+  protected void doPaint() {
+    Surface surf = surfLayer.surface();
+    surf.drawImage(background, 0, 0);
+    for (Entity ent : ents) {
+      surf.save();
+      {
+        surf.translate(ent.x, ent.y);
+        surf.scale(ent.scale, ent.scale);
+        surf.rotate(ent.rotation);
+        surf.drawImage(ent.image, 0, 0);
+      }
+      surf.restore();
+
+      ent.rotation += (float) Math.PI * 0.01;
+    }
+  }
+}
diff --git a/test/core/src/playn/bench/core/TimeTest.java b/test/core/src/playn/bench/core/TimeTest.java
new file mode 100644
index 0000000..36d55e5
--- /dev/null
+++ b/test/core/src/playn/bench/core/TimeTest.java
@@ -0,0 +1,93 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.bench.core;
+
+import static playn.core.PlayN.log;
+import static playn.core.PlayN.currentTime;
+import playn.core.GroupLayer;
+
+abstract class TimeTest {
+
+  private static final int FREQ_SAMPLES = 10;
+  private static final double TARGET_FREQ = 33;
+  private static final double EPSILON = 4;
+  private static final int SETTLE_FRAMES = 100;
+
+  private double[] freqs = new double[FREQ_SAMPLES];
+  private int freqOffset;
+  private double lastTime = currentTime();
+  private int doneFrames;
+  private boolean done;
+  private int logCountdown = 30;
+
+  final void paint() {
+    if (--logCountdown == 0) {
+      logCountdown = 30;
+      log().info("count: " + count());
+    }
+
+    double now = currentTime();
+    freqs[freqOffset++] = now - lastTime;
+    if (freqOffset == freqs.length) {
+      freqOffset = 0;
+    }
+    lastTime = now;
+
+    if (averageFreq() < TARGET_FREQ - EPSILON) {
+      doneFrames = 0;
+      advance();
+    } else if (averageFreq() > TARGET_FREQ + EPSILON) {
+      doneFrames = 0;
+      retreat();
+    } else {
+      ++doneFrames;
+      if (doneFrames >= SETTLE_FRAMES) {
+        done = true;
+      }
+    }
+
+    doPaint();
+  }
+
+  abstract String name();
+
+  abstract void init(GroupLayer root);
+
+  abstract void cleanup();
+
+  abstract double score();
+
+  boolean done() {
+    return done;
+  }
+
+  protected abstract void doPaint();
+
+  protected abstract void advance();
+
+  protected abstract void retreat();
+
+  private double averageFreq() {
+    double total = 0;
+    for (int i = 0; i < freqs.length; ++i) {
+      total += freqs[i];
+    }
+    return total / FREQ_SAMPLES;
+  }
+
+  protected int count() {
+    // TODO Auto-generated method stub
+    return 0;
+  }
+}
diff --git a/test/core/src/playn/bench/html/BenchHtml.java b/test/core/src/playn/bench/html/BenchHtml.java
new file mode 100644
index 0000000..8240ca5
--- /dev/null
+++ b/test/core/src/playn/bench/html/BenchHtml.java
@@ -0,0 +1,30 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.bench.html;
+
+import playn.bench.core.Bench;
+import playn.core.PlayN;
+import playn.html.HtmlGame;
+import playn.html.HtmlPlatform;
+
+public class BenchHtml extends HtmlGame {
+
+  @Override
+  public void start() {
+    HtmlPlatform.register();
+    PlayN.run(new Bench());
+  }
+}
diff --git a/test/core/src/playn/bench/java/BenchJava.java b/test/core/src/playn/bench/java/BenchJava.java
new file mode 100644
index 0000000..d8ac747
--- /dev/null
+++ b/test/core/src/playn/bench/java/BenchJava.java
@@ -0,0 +1,28 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.bench.java;
+
+import playn.bench.core.Bench;
+import playn.core.PlayN;
+import playn.java.JavaPlatform;
+
+public class BenchJava {
+
+  public static void main(String[] args) {
+    JavaPlatform.register();
+    PlayN.run(new Bench());
+  }
+}
diff --git a/test/core/src/playn/test/Test.gwt.xml b/test/core/src/playn/test/Test.gwt.xml
new file mode 100644
index 0000000..f01d48b
--- /dev/null
+++ b/test/core/src/playn/test/Test.gwt.xml
@@ -0,0 +1,23 @@
+<!--
+ * Copyright 2010 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<module rename-to='test'>
+  <inherits name='playn.PlayN'/>
+
+  <source path='core'/>
+  <source path='html'/>
+
+  <entry-point class='playn.test.html.TestHtml'/>
+</module>
diff --git a/test/core/src/playn/test/core/Test.java b/test/core/src/playn/test/core/Test.java
new file mode 100644
index 0000000..2851d0b
--- /dev/null
+++ b/test/core/src/playn/test/core/Test.java
@@ -0,0 +1,109 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.test.core;
+
+import static playn.core.PlayN.assetManager;
+import static playn.core.PlayN.graphics;
+import static playn.core.PlayN.pointer;
+import playn.core.Game;
+import playn.core.GroupLayer;
+import playn.core.Image;
+import playn.core.ImageLayer;
+import playn.core.Pointer;
+
+public class Test implements Game {
+
+  GroupLayer groupLayer;
+  ImageLayer bgLayer;
+  ImageLayer layer0, layer1, layer2, layer3;
+
+  @Override
+  public void init() {
+    pointer().setListener(new Pointer.Adapter() {
+      @Override
+      public void onPointerStart(Pointer.Event event) {
+        doStuff();
+      }
+    });
+
+    Image background = assetManager().getImage("images/background.png");
+    Image catgirl = assetManager().getImage("images/girlcat.png");
+
+    groupLayer = graphics().createGroupLayer();
+    groupLayer.setOrigin(128, 128);
+    groupLayer.transform().translate(256, 256);
+    graphics().rootLayer().add(groupLayer);
+
+    bgLayer = graphics().createImageLayer(background);
+    bgLayer.setWidth(256);
+    bgLayer.setHeight(256);
+    groupLayer.add(bgLayer);
+
+    layer0 = graphics().createImageLayer(catgirl);
+    layer1 = graphics().createImageLayer(catgirl);
+    layer2 = graphics().createImageLayer(catgirl);
+    layer3 = graphics().createImageLayer(catgirl);
+
+    groupLayer.add(layer0);
+    groupLayer.add(layer1);
+    groupLayer.add(layer2);
+    groupLayer.add(layer3);
+
+    layer0.setOrigin(50, 100);
+    layer1.setOrigin(50, 100);
+    layer2.setOrigin(50, 100);
+    layer3.setOrigin(50, 100);
+
+    layer0.transform().translate(0, 0);
+    layer1.transform().translate(256, 0);
+    layer2.transform().translate(256, 256);
+    layer3.transform().translate(0, 256);
+  }
+
+  private void doStuff() {
+  }
+
+  float angle = 0;
+  float scale = 1;
+
+  @Override
+  public void update(float delta) {
+    angle += delta * (float) Math.PI / 5000;
+    scale = (float) Math.sin(angle) + 0.5f;
+
+    layer0.transform().setRotation(angle);
+    layer1.transform().setRotation(angle);
+    layer2.transform().setRotation(angle);
+    layer3.transform().setRotation(angle);
+
+    layer0.transform().setUniformScale(scale);
+    layer1.transform().setUniformScale(scale);
+    layer2.transform().setUniformScale(scale);
+    layer3.transform().setUniformScale(scale);
+
+    groupLayer.transform().setRotation(angle);
+    groupLayer.transform().setUniformScale(scale);
+  }
+
+  @Override
+  public void paint(float alpha) {
+  }
+
+  @Override
+  public int updateRate() {
+    return 33;
+  }
+}
diff --git a/test/core/src/playn/test/html/TestHtml.java b/test/core/src/playn/test/html/TestHtml.java
new file mode 100644
index 0000000..d7b79b7
--- /dev/null
+++ b/test/core/src/playn/test/html/TestHtml.java
@@ -0,0 +1,30 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.test.html;
+
+import playn.core.PlayN;
+import playn.html.HtmlGame;
+import playn.html.HtmlPlatform;
+import playn.test.core.Test;
+
+public class TestHtml extends HtmlGame {
+
+  @Override
+  public void start() {
+    HtmlPlatform.register();
+    PlayN.run(new Test());
+  }
+}
diff --git a/test/core/src/playn/test/java/TestJava.java b/test/core/src/playn/test/java/TestJava.java
new file mode 100644
index 0000000..2fcb321
--- /dev/null
+++ b/test/core/src/playn/test/java/TestJava.java
@@ -0,0 +1,28 @@
+/**
+ * Copyright 2010 The PlayN Authors
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package playn.test.java;
+
+import playn.core.PlayN;
+import playn.java.JavaPlatform;
+import playn.test.core.Test;
+
+public class TestJava {
+
+  public static void main(String[] args) {
+    JavaPlatform.register();
+    PlayN.run(new Test());
+  }
+}
diff --git a/test/core/war/.gitignore b/test/core/war/.gitignore
new file mode 100644
index 0000000..70572a6
--- /dev/null
+++ b/test/core/war/.gitignore
@@ -0,0 +1,2 @@
+bench
+test
diff --git a/test/core/war/Bench.html b/test/core/war/Bench.html
new file mode 100644
index 0000000..77a36e6
--- /dev/null
+++ b/test/core/war/Bench.html
@@ -0,0 +1,24 @@
+<!--
+ * Copyright 2010 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<!DOCTYPE html>
+<html>
+  <head>
+    <title>PlayN Benchmarks</title>
+    <script src="bench/bench.nocache.js"></script>
+  </head>
+  <body bgcolor="black">
+  </body>
+</html>
diff --git a/test/core/war/Test.html b/test/core/war/Test.html
new file mode 100644
index 0000000..43b1560
--- /dev/null
+++ b/test/core/war/Test.html
@@ -0,0 +1,24 @@
+<!--
+ * Copyright 2010 The PlayN Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License. 
+-->
+<!DOCTYPE html>
+<html>
+  <head>
+    <title>PlayN Tests</title>
+    <script src="test/test.nocache.js"></script>
+  </head>
+  <body bgcolor="black">
+  </body>
+</html>
diff --git a/test/core/war/WEB-INF/.gitignore b/test/core/war/WEB-INF/.gitignore
new file mode 100644
index 0000000..489267f
--- /dev/null
+++ b/test/core/war/WEB-INF/.gitignore
@@ -0,0 +1,3 @@
+deploy
+classes
+lib
diff --git a/test/core/war/WEB-INF/web.xml b/test/core/war/WEB-INF/web.xml
new file mode 100644
index 0000000..a0e8eb7
--- /dev/null
+++ b/test/core/war/WEB-INF/web.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+xmlns="http://java.sun.com/xml/ns/javaee"
+xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
+xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
+http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
+	<!-- TODO: Add <servlet> tags for each servlet here. -->
+	<!-- TODO: Add <servlet-mapping> tags for each <servlet> here. -->
+	<!-- TODO: Optionally add a <welcome-file-list> tag to display a welcome file. -->
+</web-app>
diff --git a/test/core/war/images/background.png b/test/core/war/images/background.png
new file mode 100644
index 0000000..919c57b
Binary files /dev/null and b/test/core/war/images/background.png differ
diff --git a/test/core/war/images/boy.png b/test/core/war/images/boy.png
new file mode 100755
index 0000000..3dc7c29
Binary files /dev/null and b/test/core/war/images/boy.png differ
diff --git a/test/core/war/images/bug.png b/test/core/war/images/bug.png
new file mode 100755
index 0000000..191587b
Binary files /dev/null and b/test/core/war/images/bug.png differ
diff --git a/test/core/war/images/gemblue.png b/test/core/war/images/gemblue.png
new file mode 100755
index 0000000..5808a7d
Binary files /dev/null and b/test/core/war/images/gemblue.png differ
diff --git a/test/core/war/images/gemgreen.png b/test/core/war/images/gemgreen.png
new file mode 100755
index 0000000..e971d14
Binary files /dev/null and b/test/core/war/images/gemgreen.png differ
diff --git a/test/core/war/images/gemorange.png b/test/core/war/images/gemorange.png
new file mode 100755
index 0000000..f8faf7b
Binary files /dev/null and b/test/core/war/images/gemorange.png differ
diff --git a/test/core/war/images/girlcat.png b/test/core/war/images/girlcat.png
new file mode 100755
index 0000000..dc0538b
Binary files /dev/null and b/test/core/war/images/girlcat.png differ
diff --git a/test/core/war/images/girlhorn.png b/test/core/war/images/girlhorn.png
new file mode 100755
index 0000000..90f2278
Binary files /dev/null and b/test/core/war/images/girlhorn.png differ
diff --git a/test/core/war/images/girlpink.png b/test/core/war/images/girlpink.png
new file mode 100755
index 0000000..baef177
Binary files /dev/null and b/test/core/war/images/girlpink.png differ
diff --git a/test/core/war/images/girlprincess.png b/test/core/war/images/girlprincess.png
new file mode 100755
index 0000000..9d9f958
Binary files /dev/null and b/test/core/war/images/girlprincess.png differ
diff --git a/test/core/war/images/heart.png b/test/core/war/images/heart.png
new file mode 100755
index 0000000..aa49b5c
Binary files /dev/null and b/test/core/war/images/heart.png differ
diff --git a/test/core/war/images/pea.png b/test/core/war/images/pea.png
new file mode 100644
index 0000000..dae99e4
Binary files /dev/null and b/test/core/war/images/pea.png differ
diff --git a/test/core/war/images/rock.png b/test/core/war/images/rock.png
new file mode 100755
index 0000000..29c4e20
Binary files /dev/null and b/test/core/war/images/rock.png differ
diff --git a/test/core/war/images/star.png b/test/core/war/images/star.png
new file mode 100755
index 0000000..17c0af5
Binary files /dev/null and b/test/core/war/images/star.png differ
diff --git a/test/core/war/images/treeshort.png b/test/core/war/images/treeshort.png
new file mode 100755
index 0000000..28a15d0
Binary files /dev/null and b/test/core/war/images/treeshort.png differ
diff --git a/test/manualtests/pom.xml b/test/manualtests/pom.xml
index 0a3f5b9..b5a366c 100644
--- a/test/manualtests/pom.xml
+++ b/test/manualtests/pom.xml
@@ -3,8 +3,9 @@
   <modelVersion>4.0.0</modelVersion>
   <parent>
     <groupId>com.googlecode.playn</groupId>
-    <artifactId>playn-test</artifactId>
+    <artifactId>playn-project</artifactId>
     <version>1.0-SNAPSHOT</version>
+    <relativePath>../../pom.xml</relativePath>
   </parent>
 
   <artifactId>playn-manualtests</artifactId>
diff --git a/test/pom.xml b/test/pom.xml
deleted file mode 100644
index 2335b26..0000000
--- a/test/pom.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.googlecode.playn</groupId>
-    <artifactId>playn-project</artifactId>
-    <version>1.0-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>playn-test</artifactId>
-  <name>PlayN Tests Metaproject</name>
-  <packaging>pom</packaging>
-
-  <modules>
-    <module>benchmark</module>
-    <module>manualtests</module>
-  </modules>
-</project>
